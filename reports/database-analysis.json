{
  "entities": [
    {
      "name": "unitEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "kg",
        "lb",
        "L",
        "gal",
        "bushel"
      ]
    },
    {
      "name": "batchStatusEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "planned",
        "active",
        "packaged"
      ]
    },
    {
      "name": "vesselStatusEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "available",
        "in_use",
        "cleaning",
        "maintenance",
        "empty",
        "fermenting",
        "storing",
        "aging"
      ]
    },
    {
      "name": "vesselTypeEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "fermenter",
        "conditioning_tank",
        "bright_tank",
        "storage"
      ]
    },
    {
      "name": "vesselMaterialEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "stainless_steel",
        "plastic"
      ]
    },
    {
      "name": "vesselJacketedEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "yes",
        "no"
      ]
    },
    {
      "name": "transactionTypeEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "purchase",
        "transfer",
        "adjustment",
        "sale",
        "waste"
      ]
    },
    {
      "name": "cogsItemTypeEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "apple_cost",
        "labor",
        "overhead",
        "packaging"
      ]
    },
    {
      "name": "userRoleEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "admin",
        "operator"
      ]
    },
    {
      "name": "pressRunStatusEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "draft",
        "in_progress",
        "completed",
        "cancelled"
      ]
    },
    {
      "name": "fruitTypeEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "apple",
        "pear",
        "plum"
      ]
    },
    {
      "name": "ciderCategoryEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "sweet",
        "bittersweet",
        "sharp",
        "bittersharp"
      ]
    },
    {
      "name": "intensityEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "high",
        "medium-high",
        "medium",
        "low-medium",
        "low"
      ]
    },
    {
      "name": "harvestWindowEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "Late",
        "Mid-Late",
        "Mid",
        "Early-Mid",
        "Early"
      ]
    },
    {
      "name": "materialTypeEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/services/inventory.ts",
          "line": 28,
          "context": "schema",
          "snippet": "materialTypeEnum,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 31,
          "context": "schema",
          "snippet": "materialTypeEnum,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 413,
          "context": "schema",
          "snippet": "materialType: materialTypeEnum.optional(),"
        },
        {
          "file": "src/types/inventory.ts",
          "line": 4,
          "context": "validation",
          "snippet": "export const materialTypeEnum = z.enum(["
        },
        {
          "file": "src/types/inventory.ts",
          "line": 148,
          "context": "schema",
          "snippet": "materialType: materialTypeEnum,"
        },
        {
          "file": "src/types/inventory.ts",
          "line": 166,
          "context": "schema",
          "snippet": "materialType: materialTypeEnum.optional(),"
        },
        {
          "file": "src/types/inventory.ts",
          "line": 175,
          "context": "validation",
          "snippet": "materialTypes: z.array(materialTypeEnum).optional(),"
        },
        {
          "file": "src/types/inventory.ts",
          "line": 180,
          "context": "validation",
          "snippet": "export type MaterialType = z.infer<typeof materialTypeEnum>;"
        },
        {
          "file": "src/types/inventory.ts",
          "line": 4,
          "context": "validation",
          "snippet": "export const materialTypeEnum = z.enum(["
        },
        {
          "file": "src/types/inventory.ts",
          "line": 10,
          "context": "validation",
          "snippet": "export type MaterialType = z.infer<typeof materialTypeEnum>;"
        },
        {
          "file": "src/types/inventory.ts",
          "line": 31,
          "context": "validation",
          "snippet": "materialTypes: z.array(materialTypeEnum).default([]),"
        },
        {
          "file": "src/types/inventory.ts",
          "line": 37,
          "context": "validation",
          "snippet": "materialTypes: z.array(materialTypeEnum).default([]),"
        }
      ],
      "enumValues": [
        "apple",
        "additive",
        "juice",
        "packaging"
      ]
    },
    {
      "name": "packagingItemTypeEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "Primary Packaging",
        "Closures",
        "Secondary Packaging",
        "Tertiary Packaging"
      ]
    },
    {
      "name": "users",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/pressRun.ts",
          "line": 13,
          "context": "schema",
          "snippet": "users,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1788,
          "context": "schema",
          "snippet": "id: users.id,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1789,
          "context": "schema",
          "snippet": "name: users.name,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1790,
          "context": "schema",
          "snippet": "email: users.email,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1792,
          "context": "import",
          "snippet": ".from(users)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1793,
          "context": "schema",
          "snippet": ".where(inArray(users.id, userIds));"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 11,
          "context": "schema",
          "snippet": "users,"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 341,
          "context": "schema",
          "snippet": "sql`users AS qa_tech`,"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 345,
          "context": "schema",
          "snippet": "sql`users AS voided_user`,"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 349,
          "context": "schema",
          "snippet": "sql`users AS created_user`,"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 377,
          "context": "schema",
          "snippet": "uploaderName: users.name,"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 380,
          "context": "schema",
          "snippet": ".leftJoin(users, eq(packagingRunPhotos.uploadedBy, users.id))"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 380,
          "context": "schema",
          "snippet": ".leftJoin(users, eq(packagingRunPhotos.uploadedBy, users.id))"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 543,
          "context": "query",
          "snippet": ".select({ id: users.id })"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 544,
          "context": "import",
          "snippet": ".from(users)"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 545,
          "context": "schema",
          "snippet": ".where(eq(users.id, input.qaTechnicianId))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 52,
          "context": "schema",
          "snippet": "users,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3092,
          "context": "schema",
          "snippet": "const u = aliasedTable(users, \"u\");"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3425,
          "context": "schema",
          "snippet": "users: router({"
        },
        {
          "file": "src/routers/health.ts",
          "line": 64,
          "context": "query",
          "snippet": "(SELECT count(*) FROM users WHERE deleted_at IS NULL) as user_count"
        },
        {
          "file": "src/lib/auth.ts",
          "line": 4,
          "context": "import",
          "snippet": "import { users } from \"db/src/schema\";"
        },
        {
          "file": "src/lib/auth.ts",
          "line": 27,
          "context": "import",
          "snippet": ".from(users)"
        },
        {
          "file": "src/lib/auth.ts",
          "line": 28,
          "context": "schema",
          "snippet": ".where(eq(users.email, credentials.email))"
        },
        {
          "file": "src/lib/auth.ts",
          "line": 46,
          "context": "query",
          "snippet": ".update(users)"
        },
        {
          "file": "src/lib/auth.ts",
          "line": 48,
          "context": "schema",
          "snippet": ".where(eq(users.id, user[0].id));"
        },
        {
          "file": "src/lib/auth.ts",
          "line": 46,
          "context": "query",
          "snippet": ".update(users)"
        },
        {
          "file": "src/components/inventory/VendorVarietyLinkModal.tsx",
          "line": 107,
          "context": "schema",
          "snippet": "const isAdmin = true; // For now, assume all users are admin for testing"
        },
        {
          "file": "src/app/admin/page.tsx",
          "line": 98,
          "context": "schema",
          "snippet": "const users = ["
        },
        {
          "file": "src/app/admin/page.tsx",
          "line": 167,
          "context": "schema",
          "snippet": "Manage system users and their permissions"
        },
        {
          "file": "src/app/admin/page.tsx",
          "line": 288,
          "context": "schema",
          "snippet": "{users.map((user) => ("
        },
        {
          "file": "src/app/admin/page.tsx",
          "line": 929,
          "context": "schema",
          "snippet": "\"users\" | \"reference\" | \"settings\""
        },
        {
          "file": "src/app/admin/page.tsx",
          "line": 930,
          "context": "schema",
          "snippet": ">(\"users\");"
        },
        {
          "file": "src/app/admin/page.tsx",
          "line": 940,
          "context": "schema",
          "snippet": "Manage users, reference data, and system configuration."
        },
        {
          "file": "src/app/admin/page.tsx",
          "line": 947,
          "context": "schema",
          "snippet": "{ key: \"users\", label: \"User Management\", icon: Users },"
        },
        {
          "file": "src/app/admin/page.tsx",
          "line": 971,
          "context": "schema",
          "snippet": "{activeTab === \"users\" && <UserManagement />}"
        },
        {
          "file": "src/app/auth/test/page.tsx",
          "line": 17,
          "context": "schema",
          "snippet": "const usersCreate = trpc.users.create.useMutation();"
        },
        {
          "file": "packaging-optimized.ts",
          "line": 19,
          "context": "schema",
          "snippet": "users,"
        },
        {
          "file": "packaging-optimized.ts",
          "line": 207,
          "context": "schema",
          "snippet": "sql`users AS qa_tech`,"
        },
        {
          "file": "packaging-optimized.ts",
          "line": 318,
          "context": "schema",
          "snippet": "sql`users AS qa_tech`,"
        }
      ],
      "columns": []
    },
    {
      "name": "vendors",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/services/inventory.ts",
          "line": 8,
          "context": "schema",
          "snippet": "vendors,"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 249,
          "context": "query",
          "snippet": ".select({ id: vendors.id })"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 250,
          "context": "import",
          "snippet": ".from(vendors)"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 253,
          "context": "schema",
          "snippet": "eq(vendors.id, transaction.vendorId),"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 254,
          "context": "schema",
          "snippet": "eq(vendors.isActive, true),"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 255,
          "context": "query",
          "snippet": "isNull(vendors.deletedAt),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 7,
          "context": "schema",
          "snippet": "vendors,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 168,
          "context": "query",
          "snippet": ".select({ id: vendors.id, name: vendors.name })"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 168,
          "context": "query",
          "snippet": ".select({ id: vendors.id, name: vendors.name })"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 169,
          "context": "import",
          "snippet": ".from(vendors)"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 171,
          "context": "schema",
          "snippet": "and(eq(vendors.id, input.vendorId), eq(vendors.isActive, true)),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 171,
          "context": "schema",
          "snippet": "and(eq(vendors.id, input.vendorId), eq(vendors.isActive, true)),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 346,
          "context": "schema",
          "snippet": "vendorName: vendors.name,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 350,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(vendorVarieties.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 350,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(vendorVarieties.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 5,
          "context": "schema",
          "snippet": "vendors,"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 50,
          "context": "schema",
          "snippet": "// List vendors with search and pagination - accessible by both admin and operator"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 87,
          "context": "schema",
          "snippet": "whereConditions.push(eq(vendors.isActive, true));"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 96,
          "context": "schema",
          "snippet": "sql`LOWER(${vendors.name}) LIKE LOWER(${searchTerm})`,"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 111,
          "context": "schema",
          "snippet": "orderByField = vendors.name;"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 114,
          "context": "schema",
          "snippet": "orderByField = vendors.createdAt;"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 117,
          "context": "query",
          "snippet": "orderByField = vendors.updatedAt;"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 120,
          "context": "schema",
          "snippet": "orderByField = vendors.name;"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 126,
          "context": "import",
          "snippet": ".from(vendors)"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 131,
          "context": "schema",
          "snippet": "// Get vendors with pagination"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 134,
          "context": "import",
          "snippet": ".from(vendors)"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 141,
          "context": "schema",
          "snippet": "`Query returned ${vendorList.length} vendors out of ${totalCount} total`,"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 146,
          "context": "schema",
          "snippet": "vendors: vendorList,"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 162,
          "context": "import",
          "snippet": ".from(vendors)"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 163,
          "context": "schema",
          "snippet": ".where(eq(vendors.id, input.id))"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 182,
          "context": "query",
          "snippet": ".insert(vendors)"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 225,
          "context": "import",
          "snippet": ".from(vendors)"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 226,
          "context": "schema",
          "snippet": ".where(eq(vendors.id, id))"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 237,
          "context": "query",
          "snippet": ".update(vendors)"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 242,
          "context": "schema",
          "snippet": ".where(eq(vendors.id, id))"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 280,
          "context": "import",
          "snippet": ".from(vendors)"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 281,
          "context": "schema",
          "snippet": ".where(eq(vendors.id, input.id))"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 293,
          "context": "query",
          "snippet": ".update(vendors)"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 298,
          "context": "schema",
          "snippet": ".where(eq(vendors.id, input.id))"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 334,
          "context": "import",
          "snippet": ".from(vendors)"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 335,
          "context": "schema",
          "snippet": ".where(eq(vendors.id, input.id))"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 353,
          "context": "query",
          "snippet": ".update(vendors)"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 358,
          "context": "schema",
          "snippet": ".where(eq(vendors.id, input.id))"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 386,
          "context": "type",
          "snippet": "// List vendors by variety type - accessible by both admin and operator"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 400,
          "context": "schema",
          "snippet": "id: vendors.id,"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 401,
          "context": "schema",
          "snippet": "name: vendors.name,"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 402,
          "context": "schema",
          "snippet": "contactInfo: vendors.contactInfo,"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 403,
          "context": "schema",
          "snippet": "isActive: vendors.isActive,"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 404,
          "context": "schema",
          "snippet": "createdAt: vendors.createdAt,"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 405,
          "context": "query",
          "snippet": "updatedAt: vendors.updatedAt,"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 407,
          "context": "import",
          "snippet": ".from(vendors);"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 413,
          "context": "schema",
          "snippet": "whereConditions.push(eq(vendors.isActive, true));"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 424,
          "context": "schema",
          "snippet": ".where(eq(vendorVarieties.vendorId, vendors.id)),"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 434,
          "context": "schema",
          "snippet": ".where(eq(vendorAdditiveVarieties.vendorId, vendors.id)),"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 444,
          "context": "schema",
          "snippet": ".where(eq(vendorJuiceVarieties.vendorId, vendors.id)),"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 454,
          "context": "schema",
          "snippet": ".where(eq(vendorPackagingVarieties.vendorId, vendors.id)),"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 465,
          "context": "schema",
          "snippet": ".orderBy(asc(vendors.name));"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 468,
          "context": "schema",
          "snippet": "vendors: results,"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 182,
          "context": "query",
          "snippet": ".insert(vendors)"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 237,
          "context": "query",
          "snippet": ".update(vendors)"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 293,
          "context": "query",
          "snippet": ".update(vendors)"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 353,
          "context": "query",
          "snippet": ".update(vendors)"
        },
        {
          "file": "src/routers/reports.ts",
          "line": 8,
          "context": "schema",
          "snippet": "vendors,"
        },
        {
          "file": "src/routers/reports.ts",
          "line": 158,
          "context": "schema",
          "snippet": "// Get available vendors for filtering"
        },
        {
          "file": "src/routers/reports.ts",
          "line": 160,
          "context": "schema",
          "snippet": "const vendorList = await db.query.vendors.findMany({"
        },
        {
          "file": "src/routers/reports.ts",
          "line": 161,
          "context": "schema",
          "snippet": "orderBy: [vendors.name],"
        },
        {
          "file": "src/routers/reports.ts",
          "line": 165,
          "context": "schema",
          "snippet": "vendors: vendorList.map((vendor) => ({"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 7,
          "context": "schema",
          "snippet": "vendors,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 698,
          "context": "schema",
          "snippet": "vendorName: vendors.name,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 715,
          "context": "schema",
          "snippet": ".innerJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 715,
          "context": "schema",
          "snippet": ".innerJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1105,
          "context": "schema",
          "snippet": "vendorId: vendors.id,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1117,
          "context": "schema",
          "snippet": ".innerJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1117,
          "context": "schema",
          "snippet": ".innerJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1546,
          "context": "schema",
          "snippet": "vendorName: vendors.name,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1563,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(applePressRuns.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1563,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(applePressRuns.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1684,
          "context": "schema",
          "snippet": "vendorName: vendors.name,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1685,
          "context": "schema",
          "snippet": "vendorContactInfo: vendors.contactInfo,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1709,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(applePressRuns.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1709,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(applePressRuns.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1736,
          "context": "schema",
          "snippet": "vendorName: vendors.name,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1769,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1769,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2268,
          "context": "schema",
          "snippet": "vendorId: vendors.id,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2269,
          "context": "schema",
          "snippet": "vendorName: vendors.name,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2285,
          "context": "schema",
          "snippet": ".innerJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2285,
          "context": "schema",
          "snippet": ".innerJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2294,
          "context": "query",
          "snippet": "isNull(vendors.deletedAt),"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 3,
          "context": "import",
          "snippet": "import { db, packagingPurchases, packagingPurchaseItems, vendors } from \"db\";"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 30,
          "context": "schema",
          "snippet": "vendorName: vendors.name,"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 40,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(packagingPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 40,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(packagingPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 3,
          "context": "import",
          "snippet": "import { db, juicePurchases, juicePurchaseItems, vendors } from \"db\";"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 30,
          "context": "schema",
          "snippet": "vendorName: vendors.name,"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 40,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(juicePurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 40,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(juicePurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 9,
          "context": "schema",
          "snippet": "vendors,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 61,
          "context": "schema",
          "snippet": "'vendorName', ${vendors.name},"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 77,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 77,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 99,
          "context": "schema",
          "snippet": "'vendorName', ${vendors.name},"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 123,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(additivePurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 123,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(additivePurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 140,
          "context": "schema",
          "snippet": "'vendorName', ${vendors.name},"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 159,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(juicePurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 159,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(juicePurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 172,
          "context": "schema",
          "snippet": "'vendorName', ${vendors.name},"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 188,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(packagingPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 188,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(packagingPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 29,
          "context": "schema",
          "snippet": "vendors,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 106,
          "context": "import",
          "snippet": ".from(vendors)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 107,
          "context": "schema",
          "snippet": ".where(eq(vendors.isActive, true))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 108,
          "context": "schema",
          "snippet": ".orderBy(vendors.name);"
        },
        {
          "file": "src/routers/index.ts",
          "line": 111,
          "context": "schema",
          "snippet": "vendors: vendorList,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 115,
          "context": "schema",
          "snippet": "console.error(\"Error listing vendors:\", error);"
        },
        {
          "file": "src/routers/index.ts",
          "line": 118,
          "context": "schema",
          "snippet": "message: \"Failed to list vendors\","
        },
        {
          "file": "src/routers/index.ts",
          "line": 141,
          "context": "query",
          "snippet": ".insert(vendors)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 153,
          "context": "schema",
          "snippet": "tableName: \"vendors\","
        },
        {
          "file": "src/routers/index.ts",
          "line": 180,
          "context": "import",
          "snippet": ".from(vendors)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 181,
          "context": "schema",
          "snippet": ".where(eq(vendors.id, input.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 192,
          "context": "query",
          "snippet": ".update(vendors)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 197,
          "context": "schema",
          "snippet": ".where(eq(vendors.id, input.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 202,
          "context": "schema",
          "snippet": "tableName: \"vendors\","
        },
        {
          "file": "src/routers/index.ts",
          "line": 239,
          "context": "import",
          "snippet": ".from(vendors)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 240,
          "context": "schema",
          "snippet": ".where(eq(vendors.id, input.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 257,
          "context": "query",
          "snippet": ".update(vendors)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 264,
          "context": "schema",
          "snippet": ".where(eq(vendors.id, input.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 269,
          "context": "schema",
          "snippet": "tableName: \"vendors\","
        },
        {
          "file": "src/routers/index.ts",
          "line": 339,
          "context": "schema",
          "snippet": "vendorName: vendors.name,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 352,
          "context": "schema",
          "snippet": "vendorName: vendors.name,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 360,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 360,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 370,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 370,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 992,
          "context": "schema",
          "snippet": "vendorName: vendors.name,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1001,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1001,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1066,
          "context": "schema",
          "snippet": "vendorName: vendors.name,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1075,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(additivePurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1075,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(additivePurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1120,
          "context": "schema",
          "snippet": "vendorName: vendors.name,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1129,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(juicePurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1129,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(juicePurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1177,
          "context": "schema",
          "snippet": "vendorName: vendors.name,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1186,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(packagingPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1186,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(packagingPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1310,
          "context": "schema",
          "snippet": "vendorName: vendors.name,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1322,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1322,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1343,
          "context": "schema",
          "snippet": "vendors.name,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1432,
          "context": "schema",
          "snippet": "vendorName: vendors.name,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1439,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1439,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1458,
          "context": "schema",
          "snippet": "vendors.name,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3405,
          "context": "schema",
          "snippet": "vendors: router({"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3408,
          "context": "schema",
          "snippet": "message: \"Listing vendors (RBAC: list vendor)\","
        },
        {
          "file": "src/routers/index.ts",
          "line": 141,
          "context": "query",
          "snippet": ".insert(vendors)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 192,
          "context": "query",
          "snippet": ".update(vendors)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 257,
          "context": "query",
          "snippet": ".update(vendors)"
        },
        {
          "file": "src/routers/health.ts",
          "line": 63,
          "context": "query",
          "snippet": "(SELECT count(*) FROM vendors WHERE deleted_at IS NULL) as vendor_count,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 7,
          "context": "schema",
          "snippet": "vendors,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 107,
          "context": "schema",
          "snippet": "vendorName: vendors.name,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 117,
          "context": "schema",
          "snippet": ".innerJoin(vendors, eq(batchCompositions.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 117,
          "context": "schema",
          "snippet": ".innerJoin(vendors, eq(batchCompositions.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 405,
          "context": "schema",
          "snippet": "vendorName: vendors.name,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 414,
          "context": "schema",
          "snippet": ".innerJoin(vendors, eq(batchCompositions.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 414,
          "context": "schema",
          "snippet": ".innerJoin(vendors, eq(batchCompositions.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 7,
          "context": "schema",
          "snippet": "vendors,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 36,
          "context": "schema",
          "snippet": "vendorName: vendors.name,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 46,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 46,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 176,
          "context": "schema",
          "snippet": "vendorName: vendors.name,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 186,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 186,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 3,
          "context": "import",
          "snippet": "import { db, additivePurchases, additivePurchaseItems, vendors } from \"db\";"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 30,
          "context": "schema",
          "snippet": "vendorName: vendors.name,"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 40,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(additivePurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 40,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(additivePurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/middleware/audit.ts",
          "line": 98,
          "context": "schema",
          "snippet": "// e.g., \"vendors.create\" -> \"vendors\""
        },
        {
          "file": "src/middleware/audit.ts",
          "line": 98,
          "context": "schema",
          "snippet": "// e.g., \"vendors.create\" -> \"vendors\""
        },
        {
          "file": "src/lib/dbChecks.ts",
          "line": 7,
          "context": "schema",
          "snippet": "* This ensures that vendors can only supply varieties they are approved/configured to provide"
        },
        {
          "file": "src/services/pdf/reportDataMapper.ts",
          "line": 61,
          "context": "schema",
          "snippet": "// Calculate top vendors"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 7,
          "context": "schema",
          "snippet": "vendors,"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 43,
          "context": "query",
          "snippet": "await db.delete(vendors);"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 45,
          "context": "schema",
          "snippet": "// Create test vendors"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 47,
          "context": "query",
          "snippet": ".insert(vendors)"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 58,
          "context": "query",
          "snippet": ".insert(vendors)"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 47,
          "context": "query",
          "snippet": ".insert(vendors)"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 58,
          "context": "query",
          "snippet": ".insert(vendors)"
        },
        {
          "file": "src/routers/__tests__/purchase-integration.test.ts",
          "line": 3,
          "context": "import",
          "snippet": "import { db, purchases, vendors, appleVarieties } from \"db\";"
        },
        {
          "file": "src/routers/__tests__/purchase-integration.test.ts",
          "line": 24,
          "context": "query",
          "snippet": "await db.delete(vendors);"
        },
        {
          "file": "src/routers/__tests__/purchase-integration.test.ts",
          "line": 29,
          "context": "query",
          "snippet": ".insert(vendors)"
        },
        {
          "file": "src/routers/__tests__/purchase-integration.test.ts",
          "line": 195,
          "context": "schema",
          "snippet": "it(\"should handle multiple vendors on same date\", async () => {"
        },
        {
          "file": "src/routers/__tests__/purchase-integration.test.ts",
          "line": 201,
          "context": "query",
          "snippet": ".insert(vendors)"
        },
        {
          "file": "src/routers/__tests__/purchase-integration.test.ts",
          "line": 211,
          "context": "schema",
          "snippet": "// Create purchases for both vendors same date"
        },
        {
          "file": "src/routers/__tests__/purchase-integration.test.ts",
          "line": 241,
          "context": "schema",
          "snippet": "// Both should have sequence 001 for their respective vendors"
        },
        {
          "file": "src/routers/__tests__/purchase-integration.test.ts",
          "line": 29,
          "context": "query",
          "snippet": ".insert(vendors)"
        },
        {
          "file": "src/routers/__tests__/purchase-integration.test.ts",
          "line": 201,
          "context": "query",
          "snippet": ".insert(vendors)"
        },
        {
          "file": "src/routers/__tests__/invoiceNumber.test.ts",
          "line": 5,
          "context": "import",
          "snippet": "import { db, purchases, vendors } from \"db\";"
        },
        {
          "file": "src/routers/__tests__/invoiceNumber.test.ts",
          "line": 144,
          "context": "schema",
          "snippet": "it(\"should handle different vendors independently\", async () => {"
        },
        {
          "file": "src/components/navbar.tsx",
          "line": 31,
          "context": "schema",
          "snippet": "href: \"/vendors\","
        },
        {
          "file": "src/app/page.tsx",
          "line": 22,
          "context": "import",
          "snippet": "description: \"Order apples from vendors\","
        },
        {
          "file": "src/components/pressing/FruitLoadFormWithTRPC.tsx",
          "line": 107,
          "context": "schema",
          "snippet": "const { data: vendors, isLoading: vendorsLoading } ="
        },
        {
          "file": "src/components/pressing/FruitLoadFormWithTRPC.tsx",
          "line": 387,
          "context": "schema",
          "snippet": "? \"Loading vendors...\""
        },
        {
          "file": "src/components/pressing/FruitLoadFormWithTRPC.tsx",
          "line": 393,
          "context": "schema",
          "snippet": "{vendors?.vendors?.map((vendor) => ("
        },
        {
          "file": "src/components/pressing/FruitLoadFormWithTRPC.tsx",
          "line": 393,
          "context": "schema",
          "snippet": "{vendors?.vendors?.map((vendor) => ("
        },
        {
          "file": "src/components/inventory/VendorManagement.tsx",
          "line": 116,
          "context": "schema",
          "snippet": "const vendors = React.useMemo(() => vendorData?.vendors || [], [vendorData]);"
        },
        {
          "file": "src/components/inventory/VendorManagement.tsx",
          "line": 116,
          "context": "schema",
          "snippet": "const vendors = React.useMemo(() => vendorData?.vendors || [], [vendorData]);"
        },
        {
          "file": "src/components/inventory/VendorManagement.tsx",
          "line": 120,
          "context": "schema",
          "snippet": "\"VendorManagement - vendors count:\","
        },
        {
          "file": "src/components/inventory/VendorManagement.tsx",
          "line": 121,
          "context": "schema",
          "snippet": "vendors.length,"
        },
        {
          "file": "src/components/inventory/VendorManagement.tsx",
          "line": 135,
          "context": "schema",
          "snippet": "if (preSelectedVendorId && vendors.length > 0) {"
        },
        {
          "file": "src/components/inventory/VendorManagement.tsx",
          "line": 136,
          "context": "schema",
          "snippet": "const vendor = vendors.find((v) => v.id === preSelectedVendorId);"
        },
        {
          "file": "src/components/inventory/VendorManagement.tsx",
          "line": 141,
          "context": "schema",
          "snippet": "}, [preSelectedVendorId, vendors]);"
        },
        {
          "file": "src/components/inventory/VendorManagement.tsx",
          "line": 226,
          "context": "schema",
          "snippet": "Manage your apple suppliers and vendors"
        },
        {
          "file": "src/components/inventory/VendorManagement.tsx",
          "line": 252,
          "context": "schema",
          "snippet": "placeholder=\"Search vendors by name, email, phone, or address...\""
        },
        {
          "file": "src/components/inventory/VendorManagement.tsx",
          "line": 348,
          "context": "schema",
          "snippet": "<div className=\"text-gray-500\">Loading vendors...</div>"
        },
        {
          "file": "src/components/inventory/VendorManagement.tsx",
          "line": 353,
          "context": "schema",
          "snippet": "{!isLoading && vendors.length === 0 && ("
        },
        {
          "file": "src/components/inventory/VendorManagement.tsx",
          "line": 357,
          "context": "schema",
          "snippet": "{searchQuery ? \"No vendors found\" : \"No vendors yet\"}"
        },
        {
          "file": "src/components/inventory/VendorManagement.tsx",
          "line": 357,
          "context": "schema",
          "snippet": "{searchQuery ? \"No vendors found\" : \"No vendors yet\"}"
        },
        {
          "file": "src/components/inventory/VendorManagement.tsx",
          "line": 361,
          "context": "schema",
          "snippet": "? `No vendors match \"${searchQuery}\". Try a different search term.`"
        },
        {
          "file": "src/components/inventory/VendorManagement.tsx",
          "line": 368,
          "context": "schema",
          "snippet": "{!isLoading && vendors.length > 0 && ("
        },
        {
          "file": "src/components/inventory/VendorManagement.tsx",
          "line": 383,
          "context": "schema",
          "snippet": "{vendors.map((vendor: any) => ("
        },
        {
          "file": "src/components/inventory/VendorManagement.tsx",
          "line": 452,
          "context": "schema",
          "snippet": "{vendors.map((vendor: any) => ("
        },
        {
          "file": "src/components/inventory/VendorManagement.tsx",
          "line": 532,
          "context": "schema",
          "snippet": "(pagination.total > itemsPerPage || vendors.length > 0) && ("
        },
        {
          "file": "src/components/inventory/VendorManagement.tsx",
          "line": 540,
          "context": "schema",
          "snippet": "of {pagination.total} vendors"
        },
        {
          "file": "src/components/inventory/TransactionTypeSelector.tsx",
          "line": 25,
          "context": "import",
          "snippet": "description: \"Record base fruit purchases from vendors\","
        },
        {
          "file": "src/components/inventory/PurchaseOrdersTable.tsx",
          "line": 185,
          "context": "schema",
          "snippet": "// Get unique vendors for filter dropdown"
        },
        {
          "file": "src/components/inventory/PurchaseOrdersTable.tsx",
          "line": 188,
          "context": "schema",
          "snippet": "const vendors = ["
        },
        {
          "file": "src/components/inventory/PurchaseOrdersTable.tsx",
          "line": 195,
          "context": "schema",
          "snippet": "return vendors.sort();"
        },
        {
          "file": "src/components/inventory/PurchaseOrdersTable.tsx",
          "line": 337,
          "context": "schema",
          "snippet": "placeholder=\"Search transactions, vendors...\""
        },
        {
          "file": "src/components/inventory/PackagingTransactionForm.tsx",
          "line": 156,
          "context": "schema",
          "snippet": "// Get vendors that have packaging varieties"
        },
        {
          "file": "src/components/inventory/PackagingTransactionForm.tsx",
          "line": 161,
          "context": "schema",
          "snippet": "// Filter vendors based on search query"
        },
        {
          "file": "src/components/inventory/PackagingTransactionForm.tsx",
          "line": 162,
          "context": "schema",
          "snippet": "const vendors = React.useMemo(() => {"
        },
        {
          "file": "src/components/inventory/PackagingTransactionForm.tsx",
          "line": 163,
          "context": "schema",
          "snippet": "const allVendors = vendorData?.vendors || [];"
        },
        {
          "file": "src/components/inventory/PackagingTransactionForm.tsx",
          "line": 171,
          "context": "schema",
          "snippet": "}, [vendorData?.vendors, debouncedVendorSearch]);"
        },
        {
          "file": "src/components/inventory/PackagingTransactionForm.tsx",
          "line": 317,
          "context": "schema",
          "snippet": "const vendor = vendors.find((v) => v.id === data.vendorId);"
        },
        {
          "file": "src/components/inventory/PackagingTransactionForm.tsx",
          "line": 458,
          "context": "import",
          "snippet": "Record new packaging purchases from vendors"
        },
        {
          "file": "src/components/inventory/PackagingTransactionForm.tsx",
          "line": 474,
          "context": "schema",
          "snippet": "placeholder=\"Search vendors...\""
        },
        {
          "file": "src/components/inventory/PackagingTransactionForm.tsx",
          "line": 483,
          "context": "schema",
          "snippet": "{vendors.map((vendor: any) => ("
        },
        {
          "file": "src/components/inventory/PackagingTransactionForm.tsx",
          "line": 528,
          "context": "query",
          "snippet": "vendors.find((v) => v.id === selectedVendorId) && ("
        },
        {
          "file": "src/components/inventory/PackagingTransactionForm.tsx",
          "line": 534,
          "context": "query",
          "snippet": "{vendors.find((v) => v.id === selectedVendorId)?.name}"
        },
        {
          "file": "src/components/inventory/PackagingInventoryTable.tsx",
          "line": 310,
          "context": "type",
          "snippet": "placeholder=\"Search packaging, vendors, types, or notes...\""
        },
        {
          "file": "src/components/inventory/JuiceTransactionForm.tsx",
          "line": 166,
          "context": "schema",
          "snippet": "// Get vendors that have juice varieties"
        },
        {
          "file": "src/components/inventory/JuiceTransactionForm.tsx",
          "line": 171,
          "context": "schema",
          "snippet": "// Filter vendors based on search query"
        },
        {
          "file": "src/components/inventory/JuiceTransactionForm.tsx",
          "line": 172,
          "context": "schema",
          "snippet": "const vendors = React.useMemo(() => {"
        },
        {
          "file": "src/components/inventory/JuiceTransactionForm.tsx",
          "line": 173,
          "context": "schema",
          "snippet": "const allVendors = vendorData?.vendors || [];"
        },
        {
          "file": "src/components/inventory/JuiceTransactionForm.tsx",
          "line": 181,
          "context": "schema",
          "snippet": "}, [vendorData?.vendors, debouncedVendorSearch]);"
        },
        {
          "file": "src/components/inventory/JuiceTransactionForm.tsx",
          "line": 328,
          "context": "schema",
          "snippet": "const vendor = vendors.find((v) => v.id === data.vendorId);"
        },
        {
          "file": "src/components/inventory/JuiceTransactionForm.tsx",
          "line": 470,
          "context": "import",
          "snippet": "Record new juice purchases from vendors"
        },
        {
          "file": "src/components/inventory/JuiceTransactionForm.tsx",
          "line": 486,
          "context": "schema",
          "snippet": "placeholder=\"Search vendors...\""
        },
        {
          "file": "src/components/inventory/JuiceTransactionForm.tsx",
          "line": 495,
          "context": "schema",
          "snippet": "{vendors.map((vendor: any) => ("
        },
        {
          "file": "src/components/inventory/JuiceTransactionForm.tsx",
          "line": 540,
          "context": "query",
          "snippet": "vendors.find((v) => v.id === selectedVendorId) && ("
        },
        {
          "file": "src/components/inventory/JuiceTransactionForm.tsx",
          "line": 546,
          "context": "query",
          "snippet": "{vendors.find((v) => v.id === selectedVendorId)?.name}"
        },
        {
          "file": "src/components/inventory/JuiceInventoryTable.tsx",
          "line": 306,
          "context": "type",
          "snippet": "placeholder=\"Search varieties, vendors, types, or notes...\""
        },
        {
          "file": "src/components/inventory/BaseFruitTable.tsx",
          "line": 307,
          "context": "schema",
          "snippet": "placeholder=\"Search varieties, vendors, or notes...\""
        },
        {
          "file": "src/components/inventory/AppleTransactionForm.tsx",
          "line": 136,
          "context": "schema",
          "snippet": "// Get vendors that have base fruit varieties only"
        },
        {
          "file": "src/components/inventory/AppleTransactionForm.tsx",
          "line": 141,
          "context": "schema",
          "snippet": "// Filter vendors based on search query"
        },
        {
          "file": "src/components/inventory/AppleTransactionForm.tsx",
          "line": 142,
          "context": "schema",
          "snippet": "const vendors = React.useMemo(() => {"
        },
        {
          "file": "src/components/inventory/AppleTransactionForm.tsx",
          "line": 143,
          "context": "schema",
          "snippet": "const allVendors = vendorData?.vendors || [];"
        },
        {
          "file": "src/components/inventory/AppleTransactionForm.tsx",
          "line": 151,
          "context": "schema",
          "snippet": "}, [vendorData?.vendors, debouncedVendorSearch]);"
        },
        {
          "file": "src/components/inventory/AppleTransactionForm.tsx",
          "line": 457,
          "context": "import",
          "snippet": "Record a new apple purchase from vendors"
        },
        {
          "file": "src/components/inventory/AppleTransactionForm.tsx",
          "line": 472,
          "context": "schema",
          "snippet": "placeholder=\"Search vendors...\""
        },
        {
          "file": "src/components/inventory/AppleTransactionForm.tsx",
          "line": 481,
          "context": "schema",
          "snippet": "{vendors.map((vendor: any) => ("
        },
        {
          "file": "src/components/inventory/AppleTransactionForm.tsx",
          "line": 526,
          "context": "query",
          "snippet": "vendors.find((v) => v.id === selectedVendorId) && ("
        },
        {
          "file": "src/components/inventory/AppleTransactionForm.tsx",
          "line": 532,
          "context": "query",
          "snippet": "{vendors.find((v) => v.id === selectedVendorId)?.name}"
        },
        {
          "file": "src/components/inventory/AdditivesTransactionForm.tsx",
          "line": 142,
          "context": "schema",
          "snippet": "// Get vendors that have additive varieties"
        },
        {
          "file": "src/components/inventory/AdditivesTransactionForm.tsx",
          "line": 148,
          "context": "schema",
          "snippet": "// Filter vendors based on search query"
        },
        {
          "file": "src/components/inventory/AdditivesTransactionForm.tsx",
          "line": 149,
          "context": "schema",
          "snippet": "const vendors = React.useMemo(() => {"
        },
        {
          "file": "src/components/inventory/AdditivesTransactionForm.tsx",
          "line": 150,
          "context": "schema",
          "snippet": "const allVendors = vendorData?.vendors || [];"
        },
        {
          "file": "src/components/inventory/AdditivesTransactionForm.tsx",
          "line": 158,
          "context": "schema",
          "snippet": "}, [vendorData?.vendors, debouncedVendorSearch]);"
        },
        {
          "file": "src/components/inventory/AdditivesTransactionForm.tsx",
          "line": 304,
          "context": "schema",
          "snippet": "const vendor = vendors.find((v) => v.id === data.vendorId);"
        },
        {
          "file": "src/components/inventory/AdditivesTransactionForm.tsx",
          "line": 447,
          "context": "import",
          "snippet": "Record new additive purchases from vendors"
        },
        {
          "file": "src/components/inventory/AdditivesTransactionForm.tsx",
          "line": 462,
          "context": "schema",
          "snippet": "placeholder=\"Search vendors...\""
        },
        {
          "file": "src/components/inventory/AdditivesTransactionForm.tsx",
          "line": 471,
          "context": "schema",
          "snippet": "{vendors.map((vendor: any) => ("
        },
        {
          "file": "src/components/inventory/AdditivesTransactionForm.tsx",
          "line": 516,
          "context": "query",
          "snippet": "vendors.find((v) => v.id === selectedVendorId) && ("
        },
        {
          "file": "src/components/inventory/AdditivesTransactionForm.tsx",
          "line": 522,
          "context": "query",
          "snippet": "{vendors.find((v) => v.id === selectedVendorId)?.name}"
        },
        {
          "file": "src/components/inventory/AdditivesInventoryTable.tsx",
          "line": 297,
          "context": "type",
          "snippet": "placeholder=\"Search products, vendors, types, or notes...\""
        },
        {
          "file": "src/app/reports/page.tsx",
          "line": 73,
          "context": "schema",
          "snippet": "const { data: vendors, isLoading: vendorsLoading } ="
        },
        {
          "file": "src/app/reports/page.tsx",
          "line": 77,
          "context": "schema",
          "snippet": "// Get vendors for PDF filtering"
        },
        {
          "file": "src/app/reports/page.tsx",
          "line": 157,
          "context": "schema",
          "snippet": "const vendorList = vendors?.vendors || [];"
        },
        {
          "file": "src/app/reports/page.tsx",
          "line": 157,
          "context": "schema",
          "snippet": "const vendorList = vendors?.vendors || [];"
        },
        {
          "file": "src/app/reports/page.tsx",
          "line": 235,
          "context": "schema",
          "snippet": "{reportVendors?.vendors.map((vendor) => ("
        },
        {
          "file": "src/app/reports/page.tsx",
          "line": 288,
          "context": "schema",
          "snippet": "<TabsTrigger value=\"vendors\">Vendors</TabsTrigger>"
        },
        {
          "file": "src/app/reports/page.tsx",
          "line": 482,
          "context": "schema",
          "snippet": "<TabsContent value=\"vendors\">"
        },
        {
          "file": "src/app/vendors/page.tsx",
          "line": 34,
          "context": "schema",
          "snippet": "const [activeTab, setActiveTab] = useState(\"vendors\");"
        },
        {
          "file": "src/app/vendors/page.tsx",
          "line": 83,
          "context": "schema",
          "snippet": "Manage vendors and their associated products for your cidery"
        },
        {
          "file": "src/app/vendors/page.tsx",
          "line": 109,
          "context": "schema",
          "snippet": "value=\"vendors\""
        },
        {
          "file": "src/app/vendors/page.tsx",
          "line": 145,
          "context": "schema",
          "snippet": "<TabsContent value=\"vendors\" className=\"space-y-6\">"
        },
        {
          "file": "src/app/auth/test/page.tsx",
          "line": 14,
          "context": "schema",
          "snippet": "const vendorsList = trpc.vendors.list.useQuery(undefined, {"
        },
        {
          "file": "src/app/auth/test/page.tsx",
          "line": 18,
          "context": "query",
          "snippet": "const vendorsDelete = trpc.vendors.delete.useMutation();"
        },
        {
          "file": "src/app/auth/test/page.tsx",
          "line": 123,
          "context": "schema",
          "snippet": "<h3 className=\"font-medium\">RBAC Endpoint (/vendors.list)</h3>"
        }
      ],
      "columns": []
    },
    {
      "name": "baseFruitVarieties",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 6,
          "context": "schema",
          "snippet": "baseFruitVarieties,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 32,
          "context": "schema",
          "snippet": "id: baseFruitVarieties.id,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 33,
          "context": "schema",
          "snippet": "name: baseFruitVarieties.name,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 34,
          "context": "schema",
          "snippet": "isActive: baseFruitVarieties.isActive,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 42,
          "context": "schema",
          "snippet": "baseFruitVarieties,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 43,
          "context": "schema",
          "snippet": "eq(vendorVarieties.varietyId, baseFruitVarieties.id),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 49,
          "context": "query",
          "snippet": "isNull(baseFruitVarieties.deletedAt),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 50,
          "context": "schema",
          "snippet": "eq(baseFruitVarieties.isActive, true),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 195,
          "context": "schema",
          "snippet": "id: baseFruitVarieties.id,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 196,
          "context": "schema",
          "snippet": "name: baseFruitVarieties.name,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 198,
          "context": "import",
          "snippet": ".from(baseFruitVarieties)"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 201,
          "context": "schema",
          "snippet": "eq(baseFruitVarieties.id, input.varietyNameOrId),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 202,
          "context": "query",
          "snippet": "isNull(baseFruitVarieties.deletedAt),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 220,
          "context": "schema",
          "snippet": "id: baseFruitVarieties.id,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 221,
          "context": "schema",
          "snippet": "name: baseFruitVarieties.name,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 223,
          "context": "import",
          "snippet": ".from(baseFruitVarieties)"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 226,
          "context": "schema",
          "snippet": "ilike(baseFruitVarieties.name, input.varietyNameOrId.trim()),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 227,
          "context": "query",
          "snippet": "isNull(baseFruitVarieties.deletedAt),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 239,
          "context": "query",
          "snippet": ".insert(baseFruitVarieties)"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 347,
          "context": "schema",
          "snippet": "varietyName: baseFruitVarieties.name,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 352,
          "context": "schema",
          "snippet": "baseFruitVarieties,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 353,
          "context": "schema",
          "snippet": "eq(vendorVarieties.varietyId, baseFruitVarieties.id),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 422,
          "context": "schema",
          "snippet": "id: baseFruitVarieties.id,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 423,
          "context": "schema",
          "snippet": "name: baseFruitVarieties.name,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 424,
          "context": "schema",
          "snippet": "isActive: baseFruitVarieties.isActive,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 426,
          "context": "import",
          "snippet": ".from(baseFruitVarieties)"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 429,
          "context": "schema",
          "snippet": "ilike(baseFruitVarieties.name, `%${input.q}%`),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 430,
          "context": "query",
          "snippet": "isNull(baseFruitVarieties.deletedAt),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 431,
          "context": "schema",
          "snippet": "eq(baseFruitVarieties.isActive, true),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 434,
          "context": "schema",
          "snippet": ".orderBy(baseFruitVarieties.name)"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 239,
          "context": "query",
          "snippet": ".insert(baseFruitVarieties)"
        },
        {
          "file": "src/routers/reports.ts",
          "line": 9,
          "context": "schema",
          "snippet": "baseFruitVarieties,"
        },
        {
          "file": "src/routers/reports.ts",
          "line": 174,
          "context": "schema",
          "snippet": "const varieties = await db.query.baseFruitVarieties.findMany({"
        },
        {
          "file": "src/routers/reports.ts",
          "line": 175,
          "context": "schema",
          "snippet": "orderBy: [baseFruitVarieties.name],"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 11,
          "context": "schema",
          "snippet": "baseFruitVarieties,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 242,
          "context": "import",
          "snippet": ".from(baseFruitVarieties)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 243,
          "context": "schema",
          "snippet": ".where(eq(baseFruitVarieties.id, input.fruitVarietyId))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 431,
          "context": "import",
          "snippet": ".from(baseFruitVarieties)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 432,
          "context": "schema",
          "snippet": ".where(eq(baseFruitVarieties.id, input.fruitVarietyId))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 700,
          "context": "schema",
          "snippet": "varietyName: baseFruitVarieties.name,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 717,
          "context": "schema",
          "snippet": "baseFruitVarieties,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 718,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.fruitVarietyId, baseFruitVarieties.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1102,
          "context": "schema",
          "snippet": "varietyName: baseFruitVarieties.name,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1119,
          "context": "schema",
          "snippet": "baseFruitVarieties,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1120,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.fruitVarietyId, baseFruitVarieties.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1610,
          "context": "schema",
          "snippet": "varietyName: baseFruitVarieties.name,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1614,
          "context": "schema",
          "snippet": "baseFruitVarieties,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1615,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.fruitVarietyId, baseFruitVarieties.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1625,
          "context": "schema",
          "snippet": "baseFruitVarieties.name,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1734,
          "context": "schema",
          "snippet": "appleVarietyName: baseFruitVarieties.name,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1758,
          "context": "schema",
          "snippet": "baseFruitVarieties,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1759,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.fruitVarietyId, baseFruitVarieties.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2271,
          "context": "schema",
          "snippet": "varietyName: baseFruitVarieties.name,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2287,
          "context": "schema",
          "snippet": "baseFruitVarieties,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2288,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.fruitVarietyId, baseFruitVarieties.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2295,
          "context": "query",
          "snippet": "isNull(baseFruitVarieties.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2304,
          "context": "schema",
          "snippet": "asc(baseFruitVarieties.name),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 13,
          "context": "schema",
          "snippet": "baseFruitVarieties,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 62,
          "context": "schema",
          "snippet": "'varietyName', ${baseFruitVarieties.name},"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 79,
          "context": "schema",
          "snippet": "baseFruitVarieties,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 80,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.fruitVarietyId, baseFruitVarieties.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 48,
          "context": "schema",
          "snippet": "baseFruitVarieties,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 382,
          "context": "schema",
          "snippet": "varietyName: baseFruitVarieties.name,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 388,
          "context": "schema",
          "snippet": "baseFruitVarieties,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 391,
          "context": "schema",
          "snippet": "baseFruitVarieties.id,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1301,
          "context": "schema",
          "snippet": "varietyName: baseFruitVarieties.name,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1324,
          "context": "schema",
          "snippet": "baseFruitVarieties,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1325,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.fruitVarietyId, baseFruitVarieties.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1336,
          "context": "schema",
          "snippet": "baseFruitVarieties.name,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1351,
          "context": "schema",
          "snippet": "baseFruitVarieties.name,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1431,
          "context": "schema",
          "snippet": "varietyName: baseFruitVarieties.name,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1441,
          "context": "schema",
          "snippet": "baseFruitVarieties,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1442,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.fruitVarietyId, baseFruitVarieties.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1457,
          "context": "schema",
          "snippet": "baseFruitVarieties.name,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 8,
          "context": "schema",
          "snippet": "baseFruitVarieties,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 108,
          "context": "schema",
          "snippet": "varietyName: baseFruitVarieties.name,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 119,
          "context": "schema",
          "snippet": "baseFruitVarieties,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 120,
          "context": "schema",
          "snippet": "eq(batchCompositions.varietyId, baseFruitVarieties.id),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 406,
          "context": "schema",
          "snippet": "varietyName: baseFruitVarieties.name,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 416,
          "context": "schema",
          "snippet": "baseFruitVarieties,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 417,
          "context": "schema",
          "snippet": "eq(batchCompositions.varietyId, baseFruitVarieties.id),"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 8,
          "context": "schema",
          "snippet": "baseFruitVarieties,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 207,
          "context": "schema",
          "snippet": "varietyName: baseFruitVarieties.name,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 217,
          "context": "schema",
          "snippet": "baseFruitVarieties,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 218,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.fruitVarietyId, baseFruitVarieties.id),"
        }
      ],
      "columns": []
    },
    {
      "name": "vendorVarieties",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/services/inventory.ts",
          "line": 12,
          "context": "schema",
          "snippet": "vendorVarieties,"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 269,
          "context": "query",
          "snippet": ".select({ id: vendorVarieties.id })"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 270,
          "context": "import",
          "snippet": ".from(vendorVarieties)"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 273,
          "context": "schema",
          "snippet": "eq(vendorVarieties.vendorId, transaction.vendorId),"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 274,
          "context": "schema",
          "snippet": "eq(vendorVarieties.varietyId, transaction.appleVarietyId),"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 275,
          "context": "query",
          "snippet": "isNull(vendorVarieties.deletedAt),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 5,
          "context": "schema",
          "snippet": "vendorVarieties,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 35,
          "context": "schema",
          "snippet": "vendorVarietyId: vendorVarieties.id,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 36,
          "context": "schema",
          "snippet": "notes: vendorVarieties.notes,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 37,
          "context": "schema",
          "snippet": "linkedAt: vendorVarieties.createdAt,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 40,
          "context": "import",
          "snippet": ".from(vendorVarieties)"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 43,
          "context": "schema",
          "snippet": "eq(vendorVarieties.varietyId, baseFruitVarieties.id),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 47,
          "context": "schema",
          "snippet": "eq(vendorVarieties.vendorId, input.vendorId),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 48,
          "context": "query",
          "snippet": "isNull(vendorVarieties.deletedAt),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 265,
          "context": "query",
          "snippet": ".select({ id: vendorVarieties.id })"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 266,
          "context": "import",
          "snippet": ".from(vendorVarieties)"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 269,
          "context": "schema",
          "snippet": "eq(vendorVarieties.vendorId, input.vendorId),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 270,
          "context": "schema",
          "snippet": "eq(vendorVarieties.varietyId, varietyId),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 271,
          "context": "query",
          "snippet": "isNull(vendorVarieties.deletedAt),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 288,
          "context": "query",
          "snippet": ".insert(vendorVarieties)"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 345,
          "context": "schema",
          "snippet": "id: vendorVarieties.id,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 349,
          "context": "import",
          "snippet": ".from(vendorVarieties)"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 350,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(vendorVarieties.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 353,
          "context": "schema",
          "snippet": "eq(vendorVarieties.varietyId, baseFruitVarieties.id),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 357,
          "context": "schema",
          "snippet": "eq(vendorVarieties.vendorId, input.vendorId),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 358,
          "context": "schema",
          "snippet": "eq(vendorVarieties.varietyId, input.varietyId),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 359,
          "context": "query",
          "snippet": "isNull(vendorVarieties.deletedAt),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 373,
          "context": "query",
          "snippet": ".update(vendorVarieties)"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 378,
          "context": "schema",
          "snippet": ".where(eq(vendorVarieties.id, existingLink[0].id));"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 288,
          "context": "query",
          "snippet": ".insert(vendorVarieties)"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 373,
          "context": "query",
          "snippet": ".update(vendorVarieties)"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 7,
          "context": "schema",
          "snippet": "vendorVarieties,"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 422,
          "context": "query",
          "snippet": ".select({ vendorId: vendorVarieties.vendorId })"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 423,
          "context": "import",
          "snippet": ".from(vendorVarieties)"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 424,
          "context": "schema",
          "snippet": ".where(eq(vendorVarieties.vendorId, vendors.id)),"
        },
        {
          "file": "src/lib/dbChecks.ts",
          "line": 2,
          "context": "import",
          "snippet": "import { vendorVarieties } from \"db/src/schema\";"
        },
        {
          "file": "src/lib/dbChecks.ts",
          "line": 28,
          "context": "query",
          "snippet": ".select({ id: vendorVarieties.id })"
        },
        {
          "file": "src/lib/dbChecks.ts",
          "line": 29,
          "context": "import",
          "snippet": ".from(vendorVarieties)"
        },
        {
          "file": "src/lib/dbChecks.ts",
          "line": 32,
          "context": "schema",
          "snippet": "eq(vendorVarieties.vendorId, vendorId),"
        },
        {
          "file": "src/lib/dbChecks.ts",
          "line": 33,
          "context": "schema",
          "snippet": "eq(vendorVarieties.varietyId, varietyId),"
        },
        {
          "file": "src/lib/dbChecks.ts",
          "line": 34,
          "context": "query",
          "snippet": "isNull(vendorVarieties.deletedAt), // Only active relationships"
        },
        {
          "file": "src/lib/dbChecks.ts",
          "line": 63,
          "context": "query",
          "snippet": ".select({ varietyId: vendorVarieties.varietyId })"
        },
        {
          "file": "src/lib/dbChecks.ts",
          "line": 64,
          "context": "import",
          "snippet": ".from(vendorVarieties)"
        },
        {
          "file": "src/lib/dbChecks.ts",
          "line": 67,
          "context": "schema",
          "snippet": "eq(vendorVarieties.vendorId, vendorId),"
        },
        {
          "file": "src/lib/dbChecks.ts",
          "line": 68,
          "context": "query",
          "snippet": "isNull(vendorVarieties.deletedAt), // Only active relationships"
        },
        {
          "file": "src/lib/dbChecks.ts",
          "line": 105,
          "context": "query",
          "snippet": "await db.insert(vendorVarieties).values({"
        },
        {
          "file": "src/lib/dbChecks.ts",
          "line": 105,
          "context": "query",
          "snippet": "await db.insert(vendorVarieties).values({"
        },
        {
          "file": "src/lib/dbChecks.ts",
          "line": 105,
          "context": "query",
          "snippet": "await db.insert(vendorVarieties).values({"
        },
        {
          "file": "src/components/inventory/AppleTransactionForm.tsx",
          "line": 159,
          "context": "schema",
          "snippet": "const vendorVarieties = React.useMemo("
        },
        {
          "file": "src/components/inventory/AppleTransactionForm.tsx",
          "line": 216,
          "context": "query",
          "snippet": "if (!selectedVendorId || vendorVarieties.length === 0) return;"
        },
        {
          "file": "src/components/inventory/AppleTransactionForm.tsx",
          "line": 218,
          "context": "schema",
          "snippet": "const validVarietyIds = new Set(vendorVarieties.map((v) => v.id));"
        },
        {
          "file": "src/components/inventory/AppleTransactionForm.tsx",
          "line": 253,
          "context": "query",
          "snippet": "}, [selectedVendorId, vendorVarieties]);"
        },
        {
          "file": "src/components/inventory/AppleTransactionForm.tsx",
          "line": 615,
          "context": "schema",
          "snippet": "{vendorVarieties.map((variety: any) => ("
        },
        {
          "file": "src/components/inventory/AppleTransactionForm.tsx",
          "line": 627,
          "context": "query",
          "snippet": "{selectedVendorId && vendorVarieties.length === 0 && ("
        },
        {
          "file": "src/components/inventory/AppleTransactionForm.tsx",
          "line": 798,
          "context": "schema",
          "snippet": "{vendorVarieties.map((variety: any) => ("
        },
        {
          "file": "src/components/inventory/AppleTransactionForm.tsx",
          "line": 810,
          "context": "query",
          "snippet": "{selectedVendorId && vendorVarieties.length === 0 && ("
        }
      ],
      "columns": []
    },
    {
      "name": "additiveVarieties",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 10,
          "context": "schema",
          "snippet": "additiveVarieties,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 57,
          "context": "schema",
          "snippet": "id: additiveVarieties.id,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 58,
          "context": "schema",
          "snippet": "name: additiveVarieties.name,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 59,
          "context": "schema",
          "snippet": "isActive: additiveVarieties.isActive,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 64,
          "context": "schema",
          "snippet": "category: additiveVarieties.itemType,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 68,
          "context": "schema",
          "snippet": "additiveVarieties,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 69,
          "context": "schema",
          "snippet": "eq(vendorAdditiveVarieties.varietyId, additiveVarieties.id),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 75,
          "context": "query",
          "snippet": "isNull(additiveVarieties.deletedAt),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 76,
          "context": "schema",
          "snippet": "eq(additiveVarieties.isActive, true),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 16,
          "context": "schema",
          "snippet": "additiveVarieties,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 100,
          "context": "schema",
          "snippet": "'varietyName', COALESCE(${additiveVarieties.name}, ${additivePurchaseItems.additiveType}),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 101,
          "context": "schema",
          "snippet": "'varietyType', COALESCE(${additiveVarieties.itemType}, ${additivePurchaseItems.additiveType}),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 125,
          "context": "schema",
          "snippet": "additiveVarieties,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 126,
          "context": "schema",
          "snippet": "eq(additivePurchaseItems.additiveVarietyId, additiveVarieties.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 23,
          "context": "import",
          "snippet": "import { additiveVarietiesRouter } from \"./additiveVarieties\";"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3465,
          "context": "schema",
          "snippet": "additiveVarieties: additiveVarietiesRouter,"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 4,
          "context": "import",
          "snippet": "import { db, additiveVarieties, vendorAdditiveVarieties } from \"db\";"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 26,
          "context": "query",
          "snippet": "const whereConditions = [isNull(additiveVarieties.deletedAt)];"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 29,
          "context": "schema",
          "snippet": "whereConditions.push(eq(additiveVarieties.isActive, true));"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 34,
          "context": "schema",
          "snippet": "sql`${additiveVarieties.name} ILIKE ${\"%\" + search + \"%\"} OR ${additiveVarieties.itemType} ILIKE ${\"%\" + search + \"%\"}`,"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 34,
          "context": "schema",
          "snippet": "sql`${additiveVarieties.name} ILIKE ${\"%\" + search + \"%\"} OR ${additiveVarieties.itemType} ILIKE ${\"%\" + search + \"%\"}`,"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 41,
          "context": "schema",
          "snippet": "? asc(additiveVarieties[sortBy])"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 42,
          "context": "schema",
          "snippet": ": desc(additiveVarieties[sortBy]);"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 47,
          "context": "import",
          "snippet": ".from(additiveVarieties)"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 56,
          "context": "import",
          "snippet": ".from(additiveVarieties)"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 84,
          "context": "import",
          "snippet": ".from(additiveVarieties)"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 87,
          "context": "schema",
          "snippet": "eq(additiveVarieties.id, id),"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 88,
          "context": "query",
          "snippet": "isNull(additiveVarieties.deletedAt),"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 128,
          "context": "import",
          "snippet": ".from(additiveVarieties)"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 131,
          "context": "schema",
          "snippet": "eq(additiveVarieties.name, name),"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 132,
          "context": "query",
          "snippet": "isNull(additiveVarieties.deletedAt),"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 145,
          "context": "query",
          "snippet": ".insert(additiveVarieties)"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 189,
          "context": "import",
          "snippet": ".from(additiveVarieties)"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 192,
          "context": "schema",
          "snippet": "eq(additiveVarieties.id, id),"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 193,
          "context": "query",
          "snippet": "isNull(additiveVarieties.deletedAt),"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 208,
          "context": "import",
          "snippet": ".from(additiveVarieties)"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 211,
          "context": "schema",
          "snippet": "eq(additiveVarieties.name, name),"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 212,
          "context": "schema",
          "snippet": "sql`${additiveVarieties.id} != ${id}`,"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 213,
          "context": "query",
          "snippet": "isNull(additiveVarieties.deletedAt),"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 226,
          "context": "query",
          "snippet": ".update(additiveVarieties)"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 237,
          "context": "schema",
          "snippet": ".where(eq(additiveVarieties.id, id))"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 256,
          "context": "import",
          "snippet": ".from(additiveVarieties)"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 259,
          "context": "schema",
          "snippet": "eq(additiveVarieties.id, id),"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 260,
          "context": "query",
          "snippet": "isNull(additiveVarieties.deletedAt),"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 274,
          "context": "query",
          "snippet": ".update(additiveVarieties)"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 279,
          "context": "schema",
          "snippet": ".where(eq(additiveVarieties.id, id));"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 302,
          "context": "schema",
          "snippet": "id: additiveVarieties.id,"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 303,
          "context": "schema",
          "snippet": "name: additiveVarieties.name,"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 304,
          "context": "schema",
          "snippet": "itemType: additiveVarieties.itemType,"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 305,
          "context": "schema",
          "snippet": "isActive: additiveVarieties.isActive,"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 310,
          "context": "schema",
          "snippet": "additiveVarieties,"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 311,
          "context": "schema",
          "snippet": "eq(vendorAdditiveVarieties.varietyId, additiveVarieties.id),"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 317,
          "context": "query",
          "snippet": "isNull(additiveVarieties.deletedAt),"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 320,
          "context": "schema",
          "snippet": ".orderBy(asc(additiveVarieties.name));"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 145,
          "context": "query",
          "snippet": ".insert(additiveVarieties)"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 226,
          "context": "query",
          "snippet": ".update(additiveVarieties)"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 274,
          "context": "query",
          "snippet": ".update(additiveVarieties)"
        },
        {
          "file": "src/components/cellar/AddBatchAdditiveForm.tsx",
          "line": 83,
          "context": "schema",
          "snippet": "trpc.additiveVarieties.list.useQuery("
        },
        {
          "file": "src/components/inventory/VendorVarietyLinkModal.tsx",
          "line": 53,
          "context": "schema",
          "snippet": "| \"additiveVarieties\""
        },
        {
          "file": "src/components/inventory/VendorVarietyLinkModal.tsx",
          "line": 75,
          "context": "schema",
          "snippet": "apiName: \"additiveVarieties\","
        },
        {
          "file": "src/components/inventory/VendorVarietyLinkModal.tsx",
          "line": 217,
          "context": "schema",
          "snippet": "return trpc.additiveVarieties.getVendorLinks.useQuery("
        },
        {
          "file": "src/components/inventory/VendorVarietyLinkModal.tsx",
          "line": 268,
          "context": "schema",
          "snippet": "return trpc.additiveVarieties.unlinkVendor.useMutation({"
        },
        {
          "file": "src/components/inventory/AdditiveVarietyManagement.tsx",
          "line": 115,
          "context": "schema",
          "snippet": "} = trpc.additiveVarieties.list.useQuery(queryInput);"
        },
        {
          "file": "src/components/inventory/AdditiveVarietyManagement.tsx",
          "line": 128,
          "context": "schema",
          "snippet": "const createVariety = trpc.additiveVarieties.create.useMutation({"
        },
        {
          "file": "src/components/inventory/AdditiveVarietyManagement.tsx",
          "line": 146,
          "context": "query",
          "snippet": "const updateVariety = trpc.additiveVarieties.update.useMutation({"
        },
        {
          "file": "src/components/inventory/AdditiveVarietyManagement.tsx",
          "line": 162,
          "context": "query",
          "snippet": "const deleteVariety = trpc.additiveVarieties.delete.useMutation({"
        }
      ],
      "columns": []
    },
    {
      "name": "vendorAdditiveVarieties",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 9,
          "context": "schema",
          "snippet": "vendorAdditiveVarieties,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 60,
          "context": "schema",
          "snippet": "vendorVarietyId: vendorAdditiveVarieties.id,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 61,
          "context": "schema",
          "snippet": "notes: vendorAdditiveVarieties.notes,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 62,
          "context": "schema",
          "snippet": "linkedAt: vendorAdditiveVarieties.createdAt,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 66,
          "context": "import",
          "snippet": ".from(vendorAdditiveVarieties)"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 69,
          "context": "schema",
          "snippet": "eq(vendorAdditiveVarieties.varietyId, additiveVarieties.id),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 73,
          "context": "schema",
          "snippet": "eq(vendorAdditiveVarieties.vendorId, input.vendorId),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 74,
          "context": "query",
          "snippet": "isNull(vendorAdditiveVarieties.deletedAt),"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 8,
          "context": "schema",
          "snippet": "vendorAdditiveVarieties,"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 432,
          "context": "query",
          "snippet": ".select({ vendorId: vendorAdditiveVarieties.vendorId })"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 433,
          "context": "import",
          "snippet": ".from(vendorAdditiveVarieties)"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 434,
          "context": "schema",
          "snippet": ".where(eq(vendorAdditiveVarieties.vendorId, vendors.id)),"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 4,
          "context": "import",
          "snippet": "import { db, additiveVarieties, vendorAdditiveVarieties } from \"db\";"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 296,
          "context": "schema",
          "snippet": "id: vendorAdditiveVarieties.id,"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 297,
          "context": "schema",
          "snippet": "vendorId: vendorAdditiveVarieties.vendorId,"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 298,
          "context": "schema",
          "snippet": "varietyId: vendorAdditiveVarieties.varietyId,"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 299,
          "context": "schema",
          "snippet": "notes: vendorAdditiveVarieties.notes,"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 300,
          "context": "schema",
          "snippet": "createdAt: vendorAdditiveVarieties.createdAt,"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 308,
          "context": "import",
          "snippet": ".from(vendorAdditiveVarieties)"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 311,
          "context": "schema",
          "snippet": "eq(vendorAdditiveVarieties.varietyId, additiveVarieties.id),"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 315,
          "context": "schema",
          "snippet": "eq(vendorAdditiveVarieties.vendorId, vendorId),"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 316,
          "context": "query",
          "snippet": "isNull(vendorAdditiveVarieties.deletedAt),"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 340,
          "context": "import",
          "snippet": ".from(vendorAdditiveVarieties)"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 343,
          "context": "schema",
          "snippet": "eq(vendorAdditiveVarieties.vendorId, vendorId),"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 344,
          "context": "schema",
          "snippet": "eq(vendorAdditiveVarieties.varietyId, varietyId),"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 353,
          "context": "query",
          "snippet": ".update(vendorAdditiveVarieties)"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 359,
          "context": "schema",
          "snippet": ".where(eq(vendorAdditiveVarieties.id, existing[0].id))"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 374,
          "context": "query",
          "snippet": ".insert(vendorAdditiveVarieties)"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 398,
          "context": "query",
          "snippet": ".update(vendorAdditiveVarieties)"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 405,
          "context": "schema",
          "snippet": "eq(vendorAdditiveVarieties.vendorId, vendorId),"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 406,
          "context": "schema",
          "snippet": "eq(vendorAdditiveVarieties.varietyId, varietyId),"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 374,
          "context": "query",
          "snippet": ".insert(vendorAdditiveVarieties)"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 353,
          "context": "query",
          "snippet": ".update(vendorAdditiveVarieties)"
        },
        {
          "file": "src/routers/additiveVarieties.ts",
          "line": 398,
          "context": "query",
          "snippet": ".update(vendorAdditiveVarieties)"
        }
      ],
      "columns": []
    },
    {
      "name": "juiceVarieties",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 12,
          "context": "schema",
          "snippet": "juiceVarieties,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 83,
          "context": "schema",
          "snippet": "id: juiceVarieties.id,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 84,
          "context": "schema",
          "snippet": "name: juiceVarieties.name,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 85,
          "context": "schema",
          "snippet": "isActive: juiceVarieties.isActive,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 93,
          "context": "schema",
          "snippet": "juiceVarieties,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 94,
          "context": "schema",
          "snippet": "eq(vendorJuiceVarieties.varietyId, juiceVarieties.id),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 100,
          "context": "query",
          "snippet": "isNull(juiceVarieties.deletedAt),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 101,
          "context": "schema",
          "snippet": "eq(juiceVarieties.isActive, true),"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 4,
          "context": "import",
          "snippet": "import { db, juiceVarieties, vendorJuiceVarieties } from \"db\";"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 25,
          "context": "query",
          "snippet": "const whereConditions = [isNull(juiceVarieties.deletedAt)];"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 28,
          "context": "schema",
          "snippet": "whereConditions.push(eq(juiceVarieties.isActive, true));"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 33,
          "context": "schema",
          "snippet": "sql`${juiceVarieties.name} ILIKE ${\"%\" + search + \"%\"}`,"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 40,
          "context": "schema",
          "snippet": "? asc(juiceVarieties[sortBy])"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 41,
          "context": "schema",
          "snippet": ": desc(juiceVarieties[sortBy]);"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 46,
          "context": "import",
          "snippet": ".from(juiceVarieties)"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 55,
          "context": "import",
          "snippet": ".from(juiceVarieties)"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 83,
          "context": "import",
          "snippet": ".from(juiceVarieties)"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 84,
          "context": "query",
          "snippet": ".where(and(eq(juiceVarieties.id, id), isNull(juiceVarieties.deletedAt)))"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 84,
          "context": "query",
          "snippet": ".where(and(eq(juiceVarieties.id, id), isNull(juiceVarieties.deletedAt)))"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 110,
          "context": "import",
          "snippet": ".from(juiceVarieties)"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 112,
          "context": "query",
          "snippet": "and(eq(juiceVarieties.name, name), isNull(juiceVarieties.deletedAt)),"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 112,
          "context": "query",
          "snippet": "and(eq(juiceVarieties.name, name), isNull(juiceVarieties.deletedAt)),"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 124,
          "context": "query",
          "snippet": ".insert(juiceVarieties)"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 149,
          "context": "import",
          "snippet": ".from(juiceVarieties)"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 150,
          "context": "query",
          "snippet": ".where(and(eq(juiceVarieties.id, id), isNull(juiceVarieties.deletedAt)))"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 150,
          "context": "query",
          "snippet": ".where(and(eq(juiceVarieties.id, id), isNull(juiceVarieties.deletedAt)))"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 163,
          "context": "import",
          "snippet": ".from(juiceVarieties)"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 166,
          "context": "schema",
          "snippet": "eq(juiceVarieties.name, name),"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 167,
          "context": "schema",
          "snippet": "sql`${juiceVarieties.id} != ${id}`,"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 168,
          "context": "query",
          "snippet": "isNull(juiceVarieties.deletedAt),"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 181,
          "context": "query",
          "snippet": ".update(juiceVarieties)"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 187,
          "context": "schema",
          "snippet": ".where(eq(juiceVarieties.id, id))"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 206,
          "context": "import",
          "snippet": ".from(juiceVarieties)"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 207,
          "context": "query",
          "snippet": ".where(and(eq(juiceVarieties.id, id), isNull(juiceVarieties.deletedAt)))"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 207,
          "context": "query",
          "snippet": ".where(and(eq(juiceVarieties.id, id), isNull(juiceVarieties.deletedAt)))"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 219,
          "context": "query",
          "snippet": ".update(juiceVarieties)"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 224,
          "context": "schema",
          "snippet": ".where(eq(juiceVarieties.id, id));"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 247,
          "context": "schema",
          "snippet": "id: juiceVarieties.id,"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 248,
          "context": "schema",
          "snippet": "name: juiceVarieties.name,"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 249,
          "context": "schema",
          "snippet": "isActive: juiceVarieties.isActive,"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 254,
          "context": "schema",
          "snippet": "juiceVarieties,"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 255,
          "context": "schema",
          "snippet": "eq(vendorJuiceVarieties.varietyId, juiceVarieties.id),"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 261,
          "context": "query",
          "snippet": "isNull(juiceVarieties.deletedAt),"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 264,
          "context": "schema",
          "snippet": ".orderBy(asc(juiceVarieties.name));"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 124,
          "context": "query",
          "snippet": ".insert(juiceVarieties)"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 181,
          "context": "query",
          "snippet": ".update(juiceVarieties)"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 219,
          "context": "query",
          "snippet": ".update(juiceVarieties)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 24,
          "context": "import",
          "snippet": "import { juiceVarietiesRouter } from \"./juiceVarieties\";"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3466,
          "context": "schema",
          "snippet": "juiceVarieties: juiceVarietiesRouter,"
        },
        {
          "file": "src/components/inventory/VendorVarietyLinkModal.tsx",
          "line": 54,
          "context": "schema",
          "snippet": "| \"juiceVarieties\""
        },
        {
          "file": "src/components/inventory/VendorVarietyLinkModal.tsx",
          "line": 84,
          "context": "schema",
          "snippet": "apiName: \"juiceVarieties\","
        },
        {
          "file": "src/components/inventory/VendorVarietyLinkModal.tsx",
          "line": 222,
          "context": "schema",
          "snippet": "return trpc.juiceVarieties.getVendorLinks.useQuery("
        },
        {
          "file": "src/components/inventory/VendorVarietyLinkModal.tsx",
          "line": 273,
          "context": "schema",
          "snippet": "return trpc.juiceVarieties.unlinkVendor.useMutation({"
        },
        {
          "file": "src/components/inventory/JuiceVarietyManagement.tsx",
          "line": 88,
          "context": "schema",
          "snippet": "} = trpc.juiceVarieties.list.useQuery(queryInput);"
        },
        {
          "file": "src/components/inventory/JuiceVarietyManagement.tsx",
          "line": 101,
          "context": "schema",
          "snippet": "const createVariety = trpc.juiceVarieties.create.useMutation({"
        },
        {
          "file": "src/components/inventory/JuiceVarietyManagement.tsx",
          "line": 109,
          "context": "query",
          "snippet": "const updateVariety = trpc.juiceVarieties.update.useMutation({"
        },
        {
          "file": "src/components/inventory/JuiceVarietyManagement.tsx",
          "line": 118,
          "context": "query",
          "snippet": "const deleteVariety = trpc.juiceVarieties.delete.useMutation({"
        }
      ],
      "columns": []
    },
    {
      "name": "vendorJuiceVarieties",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 11,
          "context": "schema",
          "snippet": "vendorJuiceVarieties,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 86,
          "context": "schema",
          "snippet": "vendorVarietyId: vendorJuiceVarieties.id,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 87,
          "context": "schema",
          "snippet": "notes: vendorJuiceVarieties.notes,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 88,
          "context": "schema",
          "snippet": "linkedAt: vendorJuiceVarieties.createdAt,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 91,
          "context": "import",
          "snippet": ".from(vendorJuiceVarieties)"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 94,
          "context": "schema",
          "snippet": "eq(vendorJuiceVarieties.varietyId, juiceVarieties.id),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 98,
          "context": "schema",
          "snippet": "eq(vendorJuiceVarieties.vendorId, input.vendorId),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 99,
          "context": "query",
          "snippet": "isNull(vendorJuiceVarieties.deletedAt),"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 9,
          "context": "schema",
          "snippet": "vendorJuiceVarieties,"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 442,
          "context": "query",
          "snippet": ".select({ vendorId: vendorJuiceVarieties.vendorId })"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 443,
          "context": "import",
          "snippet": ".from(vendorJuiceVarieties)"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 444,
          "context": "schema",
          "snippet": ".where(eq(vendorJuiceVarieties.vendorId, vendors.id)),"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 4,
          "context": "import",
          "snippet": "import { db, juiceVarieties, vendorJuiceVarieties } from \"db\";"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 241,
          "context": "schema",
          "snippet": "id: vendorJuiceVarieties.id,"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 242,
          "context": "schema",
          "snippet": "vendorId: vendorJuiceVarieties.vendorId,"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 243,
          "context": "schema",
          "snippet": "varietyId: vendorJuiceVarieties.varietyId,"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 244,
          "context": "schema",
          "snippet": "notes: vendorJuiceVarieties.notes,"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 245,
          "context": "schema",
          "snippet": "createdAt: vendorJuiceVarieties.createdAt,"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 252,
          "context": "import",
          "snippet": ".from(vendorJuiceVarieties)"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 255,
          "context": "schema",
          "snippet": "eq(vendorJuiceVarieties.varietyId, juiceVarieties.id),"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 259,
          "context": "schema",
          "snippet": "eq(vendorJuiceVarieties.vendorId, vendorId),"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 260,
          "context": "query",
          "snippet": "isNull(vendorJuiceVarieties.deletedAt),"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 284,
          "context": "import",
          "snippet": ".from(vendorJuiceVarieties)"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 287,
          "context": "schema",
          "snippet": "eq(vendorJuiceVarieties.vendorId, vendorId),"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 288,
          "context": "schema",
          "snippet": "eq(vendorJuiceVarieties.varietyId, varietyId),"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 289,
          "context": "query",
          "snippet": "isNull(vendorJuiceVarieties.deletedAt),"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 302,
          "context": "query",
          "snippet": ".insert(vendorJuiceVarieties)"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 326,
          "context": "query",
          "snippet": ".update(vendorJuiceVarieties)"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 333,
          "context": "schema",
          "snippet": "eq(vendorJuiceVarieties.vendorId, vendorId),"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 334,
          "context": "schema",
          "snippet": "eq(vendorJuiceVarieties.varietyId, varietyId),"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 302,
          "context": "query",
          "snippet": ".insert(vendorJuiceVarieties)"
        },
        {
          "file": "src/routers/juiceVarieties.ts",
          "line": 326,
          "context": "query",
          "snippet": ".update(vendorJuiceVarieties)"
        }
      ],
      "columns": []
    },
    {
      "name": "packagingVarieties",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 14,
          "context": "schema",
          "snippet": "packagingVarieties,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 108,
          "context": "schema",
          "snippet": "id: packagingVarieties.id,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 109,
          "context": "schema",
          "snippet": "name: packagingVarieties.name,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 110,
          "context": "schema",
          "snippet": "isActive: packagingVarieties.isActive,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 115,
          "context": "schema",
          "snippet": "category: packagingVarieties.itemType,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 119,
          "context": "schema",
          "snippet": "packagingVarieties,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 120,
          "context": "schema",
          "snippet": "eq(vendorPackagingVarieties.varietyId, packagingVarieties.id),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 126,
          "context": "query",
          "snippet": "isNull(packagingVarieties.deletedAt),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 127,
          "context": "schema",
          "snippet": "eq(packagingVarieties.isActive, true),"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 4,
          "context": "import",
          "snippet": "import { db, packagingVarieties, vendorPackagingVarieties } from \"db\";"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 26,
          "context": "query",
          "snippet": "const whereConditions = [isNull(packagingVarieties.deletedAt)];"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 29,
          "context": "schema",
          "snippet": "whereConditions.push(eq(packagingVarieties.isActive, true));"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 34,
          "context": "schema",
          "snippet": "sql`${packagingVarieties.name} ILIKE ${\"%\" + search + \"%\"} OR CAST(${packagingVarieties.itemType} AS TEXT) ILIKE ${\"%\" + search + \"%\"}`,"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 34,
          "context": "schema",
          "snippet": "sql`${packagingVarieties.name} ILIKE ${\"%\" + search + \"%\"} OR CAST(${packagingVarieties.itemType} AS TEXT) ILIKE ${\"%\" + search + \"%\"}`,"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 41,
          "context": "schema",
          "snippet": "? asc(packagingVarieties[sortBy])"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 42,
          "context": "schema",
          "snippet": ": desc(packagingVarieties[sortBy]);"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 47,
          "context": "import",
          "snippet": ".from(packagingVarieties)"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 56,
          "context": "import",
          "snippet": ".from(packagingVarieties)"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 84,
          "context": "import",
          "snippet": ".from(packagingVarieties)"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 87,
          "context": "schema",
          "snippet": "eq(packagingVarieties.id, id),"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 88,
          "context": "query",
          "snippet": "isNull(packagingVarieties.deletedAt),"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 117,
          "context": "import",
          "snippet": ".from(packagingVarieties)"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 120,
          "context": "schema",
          "snippet": "eq(packagingVarieties.name, name),"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 121,
          "context": "query",
          "snippet": "isNull(packagingVarieties.deletedAt),"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 134,
          "context": "query",
          "snippet": ".insert(packagingVarieties)"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 161,
          "context": "import",
          "snippet": ".from(packagingVarieties)"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 164,
          "context": "schema",
          "snippet": "eq(packagingVarieties.id, id),"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 165,
          "context": "query",
          "snippet": "isNull(packagingVarieties.deletedAt),"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 180,
          "context": "import",
          "snippet": ".from(packagingVarieties)"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 183,
          "context": "schema",
          "snippet": "eq(packagingVarieties.name, name),"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 184,
          "context": "schema",
          "snippet": "sql`${packagingVarieties.id} != ${id}`,"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 185,
          "context": "query",
          "snippet": "isNull(packagingVarieties.deletedAt),"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 198,
          "context": "query",
          "snippet": ".update(packagingVarieties)"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 205,
          "context": "schema",
          "snippet": ".where(eq(packagingVarieties.id, id))"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 224,
          "context": "import",
          "snippet": ".from(packagingVarieties)"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 227,
          "context": "schema",
          "snippet": "eq(packagingVarieties.id, id),"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 228,
          "context": "query",
          "snippet": "isNull(packagingVarieties.deletedAt),"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 242,
          "context": "query",
          "snippet": ".update(packagingVarieties)"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 247,
          "context": "schema",
          "snippet": ".where(eq(packagingVarieties.id, id));"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 270,
          "context": "schema",
          "snippet": "id: packagingVarieties.id,"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 271,
          "context": "schema",
          "snippet": "name: packagingVarieties.name,"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 272,
          "context": "schema",
          "snippet": "itemType: packagingVarieties.itemType,"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 273,
          "context": "schema",
          "snippet": "isActive: packagingVarieties.isActive,"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 278,
          "context": "schema",
          "snippet": "packagingVarieties,"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 279,
          "context": "schema",
          "snippet": "eq(vendorPackagingVarieties.varietyId, packagingVarieties.id),"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 285,
          "context": "query",
          "snippet": "isNull(packagingVarieties.deletedAt),"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 288,
          "context": "schema",
          "snippet": ".orderBy(asc(packagingVarieties.name));"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 134,
          "context": "query",
          "snippet": ".insert(packagingVarieties)"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 198,
          "context": "query",
          "snippet": ".update(packagingVarieties)"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 242,
          "context": "query",
          "snippet": ".update(packagingVarieties)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 25,
          "context": "import",
          "snippet": "import { packagingVarietiesRouter } from \"./packagingVarieties\";"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3467,
          "context": "schema",
          "snippet": "packagingVarieties: packagingVarietiesRouter,"
        },
        {
          "file": "src/components/inventory/VendorVarietyLinkModal.tsx",
          "line": 55,
          "context": "schema",
          "snippet": "| \"packagingVarieties\";"
        },
        {
          "file": "src/components/inventory/VendorVarietyLinkModal.tsx",
          "line": 93,
          "context": "schema",
          "snippet": "apiName: \"packagingVarieties\","
        },
        {
          "file": "src/components/inventory/VendorVarietyLinkModal.tsx",
          "line": 227,
          "context": "schema",
          "snippet": "return trpc.packagingVarieties.getVendorLinks.useQuery("
        },
        {
          "file": "src/components/inventory/VendorVarietyLinkModal.tsx",
          "line": 278,
          "context": "schema",
          "snippet": "return trpc.packagingVarieties.unlinkVendor.useMutation({"
        },
        {
          "file": "src/components/inventory/PackagingVarietyManagement.tsx",
          "line": 100,
          "context": "schema",
          "snippet": "} = trpc.packagingVarieties.list.useQuery(queryInput);"
        },
        {
          "file": "src/components/inventory/PackagingVarietyManagement.tsx",
          "line": 113,
          "context": "schema",
          "snippet": "const createVariety = trpc.packagingVarieties.create.useMutation({"
        },
        {
          "file": "src/components/inventory/PackagingVarietyManagement.tsx",
          "line": 121,
          "context": "query",
          "snippet": "const updateVariety = trpc.packagingVarieties.update.useMutation({"
        },
        {
          "file": "src/components/inventory/PackagingVarietyManagement.tsx",
          "line": 130,
          "context": "query",
          "snippet": "const deleteVariety = trpc.packagingVarieties.delete.useMutation({"
        }
      ],
      "columns": []
    },
    {
      "name": "vendorPackagingVarieties",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 13,
          "context": "schema",
          "snippet": "vendorPackagingVarieties,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 111,
          "context": "schema",
          "snippet": "vendorVarietyId: vendorPackagingVarieties.id,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 112,
          "context": "schema",
          "snippet": "notes: vendorPackagingVarieties.notes,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 113,
          "context": "schema",
          "snippet": "linkedAt: vendorPackagingVarieties.createdAt,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 117,
          "context": "import",
          "snippet": ".from(vendorPackagingVarieties)"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 120,
          "context": "schema",
          "snippet": "eq(vendorPackagingVarieties.varietyId, packagingVarieties.id),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 124,
          "context": "schema",
          "snippet": "eq(vendorPackagingVarieties.vendorId, input.vendorId),"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 125,
          "context": "query",
          "snippet": "isNull(vendorPackagingVarieties.deletedAt),"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 10,
          "context": "schema",
          "snippet": "vendorPackagingVarieties,"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 452,
          "context": "query",
          "snippet": ".select({ vendorId: vendorPackagingVarieties.vendorId })"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 453,
          "context": "import",
          "snippet": ".from(vendorPackagingVarieties)"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 454,
          "context": "schema",
          "snippet": ".where(eq(vendorPackagingVarieties.vendorId, vendors.id)),"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 4,
          "context": "import",
          "snippet": "import { db, packagingVarieties, vendorPackagingVarieties } from \"db\";"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 264,
          "context": "schema",
          "snippet": "id: vendorPackagingVarieties.id,"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 265,
          "context": "schema",
          "snippet": "vendorId: vendorPackagingVarieties.vendorId,"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 266,
          "context": "schema",
          "snippet": "varietyId: vendorPackagingVarieties.varietyId,"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 267,
          "context": "schema",
          "snippet": "notes: vendorPackagingVarieties.notes,"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 268,
          "context": "schema",
          "snippet": "createdAt: vendorPackagingVarieties.createdAt,"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 276,
          "context": "import",
          "snippet": ".from(vendorPackagingVarieties)"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 279,
          "context": "schema",
          "snippet": "eq(vendorPackagingVarieties.varietyId, packagingVarieties.id),"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 283,
          "context": "schema",
          "snippet": "eq(vendorPackagingVarieties.vendorId, vendorId),"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 284,
          "context": "query",
          "snippet": "isNull(vendorPackagingVarieties.deletedAt),"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 308,
          "context": "import",
          "snippet": ".from(vendorPackagingVarieties)"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 311,
          "context": "schema",
          "snippet": "eq(vendorPackagingVarieties.vendorId, vendorId),"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 312,
          "context": "schema",
          "snippet": "eq(vendorPackagingVarieties.varietyId, varietyId),"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 313,
          "context": "query",
          "snippet": "isNull(vendorPackagingVarieties.deletedAt),"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 326,
          "context": "query",
          "snippet": ".insert(vendorPackagingVarieties)"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 350,
          "context": "query",
          "snippet": ".update(vendorPackagingVarieties)"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 357,
          "context": "schema",
          "snippet": "eq(vendorPackagingVarieties.vendorId, vendorId),"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 358,
          "context": "schema",
          "snippet": "eq(vendorPackagingVarieties.varietyId, varietyId),"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 326,
          "context": "query",
          "snippet": ".insert(vendorPackagingVarieties)"
        },
        {
          "file": "src/routers/packagingVarieties.ts",
          "line": 350,
          "context": "query",
          "snippet": ".update(vendorPackagingVarieties)"
        }
      ],
      "columns": []
    },
    {
      "name": "basefruitPurchases",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/reports.ts",
          "line": 6,
          "context": "schema",
          "snippet": "basefruitPurchases,"
        },
        {
          "file": "src/routers/reports.ts",
          "line": 40,
          "context": "schema",
          "snippet": "const purchase = await db.query.basefruitPurchases.findFirst({"
        },
        {
          "file": "src/routers/reports.ts",
          "line": 41,
          "context": "schema",
          "snippet": "where: eq(basefruitPurchases.id, input.purchaseId),"
        },
        {
          "file": "src/routers/reports.ts",
          "line": 97,
          "context": "schema",
          "snippet": "gte(basefruitPurchases.purchaseDate, input.startDate),"
        },
        {
          "file": "src/routers/reports.ts",
          "line": 98,
          "context": "schema",
          "snippet": "lte(basefruitPurchases.purchaseDate, input.endDate),"
        },
        {
          "file": "src/routers/reports.ts",
          "line": 102,
          "context": "schema",
          "snippet": "conditions.push(eq(basefruitPurchases.vendorId, input.vendorId));"
        },
        {
          "file": "src/routers/reports.ts",
          "line": 105,
          "context": "schema",
          "snippet": "// Fetch basefruitPurchases in date range"
        },
        {
          "file": "src/routers/reports.ts",
          "line": 106,
          "context": "schema",
          "snippet": "const purchaseList = await db.query.basefruitPurchases.findMany({"
        },
        {
          "file": "src/routers/reports.ts",
          "line": 119,
          "context": "schema",
          "snippet": "orderBy: [desc(basefruitPurchases.purchaseDate)],"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 10,
          "context": "schema",
          "snippet": "basefruitPurchases,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 697,
          "context": "schema",
          "snippet": "vendorId: basefruitPurchases.vendorId,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 712,
          "context": "schema",
          "snippet": "basefruitPurchases,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 713,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.purchaseId, basefruitPurchases.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 715,
          "context": "schema",
          "snippet": ".innerJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1114,
          "context": "schema",
          "snippet": "basefruitPurchases,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1115,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.purchaseId, basefruitPurchases.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1117,
          "context": "schema",
          "snippet": ".innerJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1735,
          "context": "schema",
          "snippet": "vendorId: basefruitPurchases.vendorId,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1766,
          "context": "schema",
          "snippet": "basefruitPurchases,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1767,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.purchaseId, basefruitPurchases.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1769,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2267,
          "context": "schema",
          "snippet": "purchaseId: basefruitPurchases.id,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2282,
          "context": "schema",
          "snippet": "basefruitPurchases,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2283,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.purchaseId, basefruitPurchases.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2285,
          "context": "schema",
          "snippet": ".innerJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2293,
          "context": "query",
          "snippet": "isNull(basefruitPurchases.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2298,
          "context": "schema",
          "snippet": "? eq(basefruitPurchases.vendorId, input.vendorId)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2303,
          "context": "schema",
          "snippet": "desc(basefruitPurchases.purchaseDate),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 11,
          "context": "schema",
          "snippet": "basefruitPurchases,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 60,
          "context": "schema",
          "snippet": "'purchaseId', ${basefruitPurchases.id},"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 64,
          "context": "schema",
          "snippet": "'purchaseDate', ${basefruitPurchases.purchaseDate},"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 69,
          "context": "schema",
          "snippet": "createdAt: basefruitPurchases.purchaseDate,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 70,
          "context": "query",
          "snippet": "updatedAt: basefruitPurchases.updatedAt,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 74,
          "context": "schema",
          "snippet": "basefruitPurchases,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 75,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.purchaseId, basefruitPurchases.id),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 77,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 30,
          "context": "schema",
          "snippet": "basefruitPurchases,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 318,
          "context": "query",
          "snippet": "const conditions = [isNull(basefruitPurchases.deletedAt)];"
        },
        {
          "file": "src/routers/index.ts",
          "line": 321,
          "context": "schema",
          "snippet": "conditions.push(eq(basefruitPurchases.vendorId, input.vendorId));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 326,
          "context": "schema",
          "snippet": "sql`${basefruitPurchases.purchaseDate} >= ${input.startDate.toISOString().split(\"T\")[0]}`,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 332,
          "context": "schema",
          "snippet": "sql`${basefruitPurchases.purchaseDate} <= ${input.endDate.toISOString().split(\"T\")[0]}`,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 338,
          "context": "schema",
          "snippet": "purchaseDate: basefruitPurchases.purchaseDate,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 340,
          "context": "schema",
          "snippet": "totalCost: basefruitPurchases.totalCost,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 341,
          "context": "schema",
          "snippet": "createdAt: basefruitPurchases.createdAt,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 347,
          "context": "schema",
          "snippet": "// Get basefruitPurchases with pagination"
        },
        {
          "file": "src/routers/index.ts",
          "line": 350,
          "context": "schema",
          "snippet": "id: basefruitPurchases.id,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 351,
          "context": "schema",
          "snippet": "vendorId: basefruitPurchases.vendorId,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 353,
          "context": "schema",
          "snippet": "purchaseDate: basefruitPurchases.purchaseDate,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 354,
          "context": "schema",
          "snippet": "invoiceNumber: basefruitPurchases.invoiceNumber,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 355,
          "context": "schema",
          "snippet": "totalCost: basefruitPurchases.totalCost,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 356,
          "context": "schema",
          "snippet": "notes: basefruitPurchases.notes,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 357,
          "context": "schema",
          "snippet": "createdAt: basefruitPurchases.createdAt,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 359,
          "context": "import",
          "snippet": ".from(basefruitPurchases)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 360,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 362,
          "context": "schema",
          "snippet": ".orderBy(orderBy, desc(basefruitPurchases.createdAt))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 369,
          "context": "import",
          "snippet": ".from(basefruitPurchases)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 370,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 412,
          "context": "schema",
          "snippet": "basefruitPurchases: basefruitPurchasesWithItems,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 423,
          "context": "schema",
          "snippet": "console.error(\"Error listing basefruitPurchases:\", error);"
        },
        {
          "file": "src/routers/index.ts",
          "line": 426,
          "context": "schema",
          "snippet": "message: \"Failed to list basefruitPurchases\","
        },
        {
          "file": "src/routers/index.ts",
          "line": 533,
          "context": "schema",
          "snippet": "maxInvoice: sql<string>`MAX(${basefruitPurchases.invoiceNumber})`,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 535,
          "context": "import",
          "snippet": ".from(basefruitPurchases)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 538,
          "context": "schema",
          "snippet": "eq(basefruitPurchases.vendorId, input.vendorId),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 539,
          "context": "schema",
          "snippet": "sql`${basefruitPurchases.purchaseDate} >= ${startOfDay}`,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 540,
          "context": "schema",
          "snippet": "sql`${basefruitPurchases.purchaseDate} <= ${endOfDay}`,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 541,
          "context": "schema",
          "snippet": "eq(basefruitPurchases.autoGeneratedInvoice, true),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 542,
          "context": "schema",
          "snippet": "sql`${basefruitPurchases.invoiceNumber} LIKE ${`${dateStr}-${input.vendorId}-%`}`,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 565,
          "context": "query",
          "snippet": ".select({ id: basefruitPurchases.id })"
        },
        {
          "file": "src/routers/index.ts",
          "line": 566,
          "context": "import",
          "snippet": ".from(basefruitPurchases)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 567,
          "context": "schema",
          "snippet": ".where(eq(basefruitPurchases.invoiceNumber, finalInvoiceNumber))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 580,
          "context": "query",
          "snippet": ".insert(basefruitPurchases)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 625,
          "context": "schema",
          "snippet": "\"basefruitPurchases\","
        },
        {
          "file": "src/routers/index.ts",
          "line": 673,
          "context": "import",
          "snippet": ".from(basefruitPurchases)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 676,
          "context": "schema",
          "snippet": "eq(basefruitPurchases.id, input.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 677,
          "context": "query",
          "snippet": "isNull(basefruitPurchases.deletedAt),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 750,
          "context": "import",
          "snippet": ".from(basefruitPurchases)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 753,
          "context": "schema",
          "snippet": "eq(basefruitPurchases.id, input.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 754,
          "context": "query",
          "snippet": "isNull(basefruitPurchases.deletedAt),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 782,
          "context": "query",
          "snippet": ".update(basefruitPurchases)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 784,
          "context": "schema",
          "snippet": ".where(eq(basefruitPurchases.id, input.id));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 860,
          "context": "query",
          "snippet": ".update(basefruitPurchases)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 862,
          "context": "schema",
          "snippet": ".where(eq(basefruitPurchases.id, input.id));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 892,
          "context": "import",
          "snippet": ".from(basefruitPurchases)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 895,
          "context": "schema",
          "snippet": "eq(basefruitPurchases.id, input.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 896,
          "context": "query",
          "snippet": "isNull(basefruitPurchases.deletedAt),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 910,
          "context": "query",
          "snippet": ".update(basefruitPurchases)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 912,
          "context": "schema",
          "snippet": ".where(eq(basefruitPurchases.id, input.id));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 972,
          "context": "query",
          "snippet": "conditions.push(isNull(basefruitPurchases.deletedAt));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 975,
          "context": "schema",
          "snippet": "conditions.push(eq(basefruitPurchases.vendorId, input.vendorId));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 979,
          "context": "schema",
          "snippet": "sql`${basefruitPurchases.purchaseDate} >= ${input.startDate.toISOString().split(\"T\")[0]}`,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 984,
          "context": "schema",
          "snippet": "sql`${basefruitPurchases.purchaseDate} <= ${input.endDate.toISOString().split(\"T\")[0]}`,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 990,
          "context": "schema",
          "snippet": "id: basefruitPurchases.id,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 991,
          "context": "schema",
          "snippet": "vendorId: basefruitPurchases.vendorId,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 993,
          "context": "schema",
          "snippet": "purchaseDate: basefruitPurchases.purchaseDate,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 994,
          "context": "schema",
          "snippet": "invoiceNumber: basefruitPurchases.invoiceNumber,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 995,
          "context": "schema",
          "snippet": "totalCost: basefruitPurchases.totalCost,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 996,
          "context": "schema",
          "snippet": "notes: basefruitPurchases.notes,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 997,
          "context": "schema",
          "snippet": "createdAt: basefruitPurchases.createdAt,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 998,
          "context": "query",
          "snippet": "deletedAt: basefruitPurchases.deletedAt,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1000,
          "context": "import",
          "snippet": ".from(basefruitPurchases)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1001,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1281,
          "context": "query",
          "snippet": "isNull(basefruitPurchases.deletedAt),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1285,
          "context": "schema",
          "snippet": "conditions.push(eq(basefruitPurchases.vendorId, input.vendorId));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1309,
          "context": "schema",
          "snippet": "vendorId: basefruitPurchases.vendorId,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1311,
          "context": "schema",
          "snippet": "purchaseDate: basefruitPurchases.purchaseDate,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1312,
          "context": "schema",
          "snippet": "invoiceNumber: basefruitPurchases.invoiceNumber,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1319,
          "context": "schema",
          "snippet": "basefruitPurchases,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1320,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.purchaseId, basefruitPurchases.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1322,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1342,
          "context": "schema",
          "snippet": "basefruitPurchases.vendorId,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1344,
          "context": "schema",
          "snippet": "basefruitPurchases.purchaseDate,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1345,
          "context": "schema",
          "snippet": "basefruitPurchases.invoiceNumber,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1350,
          "context": "schema",
          "snippet": "desc(basefruitPurchases.purchaseDate),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1380,
          "context": "schema",
          "snippet": "basefruitPurchases,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1381,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.purchaseId, basefruitPurchases.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1436,
          "context": "schema",
          "snippet": "basefruitPurchases,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1437,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.purchaseId, basefruitPurchases.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1439,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 580,
          "context": "query",
          "snippet": ".insert(basefruitPurchases)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 782,
          "context": "query",
          "snippet": ".update(basefruitPurchases)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 860,
          "context": "query",
          "snippet": ".update(basefruitPurchases)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 910,
          "context": "query",
          "snippet": ".update(basefruitPurchases)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 15,
          "context": "schema",
          "snippet": "basefruitPurchases,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 5,
          "context": "schema",
          "snippet": "basefruitPurchases,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 27,
          "context": "query",
          "snippet": "const conditions = [isNull(basefruitPurchases.deletedAt)];"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 29,
          "context": "schema",
          "snippet": "conditions.push(eq(basefruitPurchases.vendorId, vendorId));"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 34,
          "context": "schema",
          "snippet": "id: basefruitPurchases.id,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 35,
          "context": "schema",
          "snippet": "vendorId: basefruitPurchases.vendorId,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 37,
          "context": "schema",
          "snippet": "purchaseDate: basefruitPurchases.purchaseDate,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 38,
          "context": "schema",
          "snippet": "totalCost: basefruitPurchases.totalCost,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 39,
          "context": "schema",
          "snippet": "invoiceNumber: basefruitPurchases.invoiceNumber,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 40,
          "context": "schema",
          "snippet": "autoGeneratedInvoice: basefruitPurchases.autoGeneratedInvoice,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 41,
          "context": "schema",
          "snippet": "notes: basefruitPurchases.notes,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 42,
          "context": "schema",
          "snippet": "createdAt: basefruitPurchases.createdAt,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 43,
          "context": "query",
          "snippet": "updatedAt: basefruitPurchases.updatedAt,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 45,
          "context": "import",
          "snippet": ".from(basefruitPurchases)"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 46,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 48,
          "context": "schema",
          "snippet": ".orderBy(desc(basefruitPurchases.purchaseDate))"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 54,
          "context": "import",
          "snippet": ".from(basefruitPurchases)"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 109,
          "context": "query",
          "snippet": ".insert(basefruitPurchases)"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 174,
          "context": "schema",
          "snippet": "id: basefruitPurchases.id,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 175,
          "context": "schema",
          "snippet": "vendorId: basefruitPurchases.vendorId,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 177,
          "context": "schema",
          "snippet": "purchaseDate: basefruitPurchases.purchaseDate,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 178,
          "context": "schema",
          "snippet": "totalCost: basefruitPurchases.totalCost,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 179,
          "context": "schema",
          "snippet": "invoiceNumber: basefruitPurchases.invoiceNumber,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 180,
          "context": "schema",
          "snippet": "autoGeneratedInvoice: basefruitPurchases.autoGeneratedInvoice,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 181,
          "context": "schema",
          "snippet": "notes: basefruitPurchases.notes,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 182,
          "context": "schema",
          "snippet": "createdAt: basefruitPurchases.createdAt,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 183,
          "context": "query",
          "snippet": "updatedAt: basefruitPurchases.updatedAt,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 185,
          "context": "import",
          "snippet": ".from(basefruitPurchases)"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 186,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(basefruitPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 189,
          "context": "schema",
          "snippet": "eq(basefruitPurchases.id, input.purchaseId),"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 190,
          "context": "query",
          "snippet": "isNull(basefruitPurchases.deletedAt),"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 248,
          "context": "query",
          "snippet": ".select({ id: basefruitPurchases.id })"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 249,
          "context": "import",
          "snippet": ".from(basefruitPurchases)"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 252,
          "context": "schema",
          "snippet": "eq(basefruitPurchases.id, input.purchaseId),"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 253,
          "context": "query",
          "snippet": "isNull(basefruitPurchases.deletedAt),"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 267,
          "context": "query",
          "snippet": ".update(basefruitPurchases)"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 269,
          "context": "schema",
          "snippet": ".where(eq(basefruitPurchases.id, input.purchaseId));"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 109,
          "context": "query",
          "snippet": ".insert(basefruitPurchases)"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 267,
          "context": "query",
          "snippet": ".update(basefruitPurchases)"
        }
      ],
      "columns": []
    },
    {
      "name": "basefruitPurchaseItems",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/reports.ts",
          "line": 7,
          "context": "schema",
          "snippet": "basefruitPurchaseItems,"
        },
        {
          "file": "src/routers/reports.ts",
          "line": 115,
          "context": "schema",
          "snippet": "? eq(basefruitPurchaseItems.fruitVarietyId, input.varietyId)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 9,
          "context": "schema",
          "snippet": "basefruitPurchaseItems,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 222,
          "context": "import",
          "snippet": ".from(basefruitPurchaseItems)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 225,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.id, input.purchaseItemId),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 226,
          "context": "query",
          "snippet": "isNull(basefruitPurchaseItems.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 227,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.isDepleted, false),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 411,
          "context": "import",
          "snippet": ".from(basefruitPurchaseItems)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 414,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.id, input.purchaseItemId),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 415,
          "context": "query",
          "snippet": "isNull(basefruitPurchaseItems.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 416,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.isDepleted, false),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 704,
          "context": "schema",
          "snippet": "totalCost: basefruitPurchaseItems.totalCost,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 708,
          "context": "schema",
          "snippet": "basefruitPurchaseItems,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 709,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.purchaseItemId, basefruitPurchaseItems.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 713,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.purchaseId, basefruitPurchases.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1061,
          "context": "query",
          "snippet": ".update(basefruitPurchaseItems)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1072,
          "context": "schema",
          "snippet": "basefruitPurchaseItems.id,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1075,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.isDepleted, false),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1106,
          "context": "schema",
          "snippet": "totalCost: basefruitPurchaseItems.totalCost,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1110,
          "context": "schema",
          "snippet": "basefruitPurchaseItems,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1111,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.purchaseItemId, basefruitPurchaseItems.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1115,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.purchaseId, basefruitPurchases.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1752,
          "context": "schema",
          "snippet": "purchaseItemOriginalQuantityKg: basefruitPurchaseItems.quantityKg,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1753,
          "context": "schema",
          "snippet": "purchaseItemOriginalQuantity: basefruitPurchaseItems.quantity,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1754,
          "context": "schema",
          "snippet": "purchaseItemOriginalUnit: basefruitPurchaseItems.unit,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1762,
          "context": "schema",
          "snippet": "basefruitPurchaseItems,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1763,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.purchaseItemId, basefruitPurchaseItems.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1767,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.purchaseId, basefruitPurchases.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2263,
          "context": "schema",
          "snippet": "// Base query for basefruitPurchaseItems with vendor filtering"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2266,
          "context": "schema",
          "snippet": "purchaseItemId: basefruitPurchaseItems.id,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2270,
          "context": "schema",
          "snippet": "fruitVarietyId: basefruitPurchaseItems.fruitVarietyId,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2272,
          "context": "schema",
          "snippet": "quantityKg: basefruitPurchaseItems.quantityKg,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2273,
          "context": "schema",
          "snippet": "originalQuantity: basefruitPurchaseItems.quantity,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2274,
          "context": "schema",
          "snippet": "originalUnit: basefruitPurchaseItems.unit,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2275,
          "context": "schema",
          "snippet": "pricePerUnit: basefruitPurchaseItems.pricePerUnit,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2276,
          "context": "schema",
          "snippet": "totalCost: basefruitPurchaseItems.totalCost,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2277,
          "context": "schema",
          "snippet": "harvestDate: basefruitPurchaseItems.harvestDate,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2278,
          "context": "schema",
          "snippet": "notes: basefruitPurchaseItems.notes,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2280,
          "context": "import",
          "snippet": ".from(basefruitPurchaseItems)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2283,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.purchaseId, basefruitPurchases.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2288,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.fruitVarietyId, baseFruitVarieties.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2292,
          "context": "query",
          "snippet": "isNull(basefruitPurchaseItems.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2296,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.isDepleted, false),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1061,
          "context": "query",
          "snippet": ".update(basefruitPurchaseItems)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 12,
          "context": "schema",
          "snippet": "basefruitPurchaseItems,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 54,
          "context": "schema",
          "snippet": "id: sql<string>`CONCAT('basefruit-', ${basefruitPurchaseItems.id})`,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 56,
          "context": "schema",
          "snippet": "currentBottleCount: sql<number>`COALESCE(CAST(${basefruitPurchaseItems.originalQuantity} AS NUMERIC), 0)`,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 63,
          "context": "schema",
          "snippet": "'harvestDate', ${basefruitPurchaseItems.harvestDate},"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 65,
          "context": "schema",
          "snippet": "'unit', ${basefruitPurchaseItems.originalUnit}"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 68,
          "context": "schema",
          "snippet": "notes: basefruitPurchaseItems.notes,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 72,
          "context": "import",
          "snippet": ".from(basefruitPurchaseItems)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 75,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.purchaseId, basefruitPurchases.id),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 80,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.fruitVarietyId, baseFruitVarieties.id),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 84,
          "context": "query",
          "snippet": "isNull(basefruitPurchaseItems.deletedAt),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 85,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.isDepleted, false),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 563,
          "context": "query",
          "snippet": ".update(basefruitPurchaseItems)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 572,
          "context": "schema",
          "snippet": ".where(eq(basefruitPurchaseItems.id, id));"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 716,
          "context": "query",
          "snippet": ".update(basefruitPurchaseItems)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 718,
          "context": "schema",
          "snippet": ".where(eq(basefruitPurchaseItems.id, actualId));"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 563,
          "context": "query",
          "snippet": ".update(basefruitPurchaseItems)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 716,
          "context": "query",
          "snippet": ".update(basefruitPurchaseItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 31,
          "context": "schema",
          "snippet": "basefruitPurchaseItems,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 380,
          "context": "schema",
          "snippet": "id: basefruitPurchaseItems.id,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 381,
          "context": "schema",
          "snippet": "fruitVarietyId: basefruitPurchaseItems.fruitVarietyId,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 383,
          "context": "schema",
          "snippet": "originalQuantity: basefruitPurchaseItems.originalQuantity,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 384,
          "context": "schema",
          "snippet": "originalUnit: basefruitPurchaseItems.originalUnit,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 386,
          "context": "import",
          "snippet": ".from(basefruitPurchaseItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 390,
          "context": "schema",
          "snippet": "basefruitPurchaseItems.fruitVarietyId,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 394,
          "context": "schema",
          "snippet": ".where(eq(basefruitPurchaseItems.purchaseId, purchase.id));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 597,
          "context": "query",
          "snippet": ".insert(basefruitPurchaseItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 691,
          "context": "import",
          "snippet": ".from(basefruitPurchaseItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 694,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.purchaseId, input.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 695,
          "context": "query",
          "snippet": "isNull(basefruitPurchaseItems.deletedAt),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 806,
          "context": "query",
          "snippet": ".update(basefruitPurchaseItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 808,
          "context": "schema",
          "snippet": ".where(eq(basefruitPurchaseItems.purchaseId, input.id));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 856,
          "context": "query",
          "snippet": "await tx.insert(basefruitPurchaseItems).values(processedItems);"
        },
        {
          "file": "src/routers/index.ts",
          "line": 916,
          "context": "query",
          "snippet": ".update(basefruitPurchaseItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 918,
          "context": "schema",
          "snippet": ".where(eq(basefruitPurchaseItems.purchaseId, input.id));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1008,
          "context": "schema",
          "snippet": "id: basefruitPurchaseItems.id,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1009,
          "context": "schema",
          "snippet": "isDepleted: basefruitPurchaseItems.isDepleted,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1010,
          "context": "schema",
          "snippet": "depletedAt: basefruitPurchaseItems.depletedAt,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1012,
          "context": "import",
          "snippet": ".from(basefruitPurchaseItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1013,
          "context": "schema",
          "snippet": ".where(eq(basefruitPurchaseItems.purchaseId, purchase.id));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1280,
          "context": "query",
          "snippet": "isNull(basefruitPurchaseItems.deletedAt),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1290,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.fruitVarietyId, input.fruitVarietyId),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1298,
          "context": "schema",
          "snippet": "purchaseItemId: basefruitPurchaseItems.id,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1299,
          "context": "schema",
          "snippet": "purchaseId: basefruitPurchaseItems.purchaseId,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1300,
          "context": "schema",
          "snippet": "fruitVarietyId: basefruitPurchaseItems.fruitVarietyId,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1302,
          "context": "schema",
          "snippet": "originalQuantity: basefruitPurchaseItems.originalQuantity,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1303,
          "context": "schema",
          "snippet": "originalUnit: basefruitPurchaseItems.originalUnit,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1304,
          "context": "schema",
          "snippet": "quantityKg: basefruitPurchaseItems.quantityKg,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1305,
          "context": "schema",
          "snippet": "harvestDate: basefruitPurchaseItems.harvestDate,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1306,
          "context": "schema",
          "snippet": "notes: basefruitPurchaseItems.notes,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1317,
          "context": "import",
          "snippet": ".from(basefruitPurchaseItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1320,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.purchaseId, basefruitPurchases.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1325,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.fruitVarietyId, baseFruitVarieties.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1329,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.purchaseItemId, basefruitPurchaseItems.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1333,
          "context": "schema",
          "snippet": "basefruitPurchaseItems.id,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1334,
          "context": "schema",
          "snippet": "basefruitPurchaseItems.purchaseId,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1335,
          "context": "schema",
          "snippet": "basefruitPurchaseItems.fruitVarietyId,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1337,
          "context": "schema",
          "snippet": "basefruitPurchaseItems.originalQuantity,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1338,
          "context": "schema",
          "snippet": "basefruitPurchaseItems.originalUnit,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1339,
          "context": "schema",
          "snippet": "basefruitPurchaseItems.quantityKg,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1340,
          "context": "schema",
          "snippet": "basefruitPurchaseItems.harvestDate,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1341,
          "context": "schema",
          "snippet": "basefruitPurchaseItems.notes,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1376,
          "context": "schema",
          "snippet": "count: sql<number>`COUNT(DISTINCT ${basefruitPurchaseItems.id})`,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1378,
          "context": "import",
          "snippet": ".from(basefruitPurchaseItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1381,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.purchaseId, basefruitPurchases.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1385,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.purchaseItemId, basefruitPurchaseItems.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1428,
          "context": "schema",
          "snippet": "purchaseItemId: basefruitPurchaseItems.id,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1429,
          "context": "schema",
          "snippet": "quantityKg: basefruitPurchaseItems.quantityKg,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1434,
          "context": "import",
          "snippet": ".from(basefruitPurchaseItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1437,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.purchaseId, basefruitPurchases.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1442,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.fruitVarietyId, baseFruitVarieties.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1446,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.purchaseItemId, basefruitPurchaseItems.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1450,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.id, input.purchaseItemId),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1451,
          "context": "query",
          "snippet": "isNull(basefruitPurchaseItems.deletedAt),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1455,
          "context": "schema",
          "snippet": "basefruitPurchaseItems.id,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1456,
          "context": "schema",
          "snippet": "basefruitPurchaseItems.quantityKg,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1564,
          "context": "import",
          "snippet": ".from(basefruitPurchaseItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1567,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.id, item.purchaseItemId),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1568,
          "context": "query",
          "snippet": "isNull(basefruitPurchaseItems.deletedAt),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 597,
          "context": "query",
          "snippet": ".insert(basefruitPurchaseItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 856,
          "context": "query",
          "snippet": "await tx.insert(basefruitPurchaseItems).values(processedItems);"
        },
        {
          "file": "src/routers/index.ts",
          "line": 806,
          "context": "query",
          "snippet": ".update(basefruitPurchaseItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 916,
          "context": "query",
          "snippet": ".update(basefruitPurchaseItems)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 14,
          "context": "schema",
          "snippet": "basefruitPurchaseItems,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 6,
          "context": "schema",
          "snippet": "basefruitPurchaseItems,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 131,
          "context": "query",
          "snippet": ".insert(basefruitPurchaseItems)"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 205,
          "context": "schema",
          "snippet": "id: basefruitPurchaseItems.id,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 206,
          "context": "schema",
          "snippet": "fruitVarietyId: basefruitPurchaseItems.fruitVarietyId,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 208,
          "context": "schema",
          "snippet": "quantity: basefruitPurchaseItems.quantity,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 209,
          "context": "schema",
          "snippet": "unit: basefruitPurchaseItems.unit,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 210,
          "context": "schema",
          "snippet": "pricePerUnit: basefruitPurchaseItems.pricePerUnit,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 211,
          "context": "schema",
          "snippet": "notes: basefruitPurchaseItems.notes,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 212,
          "context": "schema",
          "snippet": "createdAt: basefruitPurchaseItems.createdAt,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 213,
          "context": "query",
          "snippet": "updatedAt: basefruitPurchaseItems.updatedAt,"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 215,
          "context": "import",
          "snippet": ".from(basefruitPurchaseItems)"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 218,
          "context": "schema",
          "snippet": "eq(basefruitPurchaseItems.fruitVarietyId, baseFruitVarieties.id),"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 220,
          "context": "schema",
          "snippet": ".where(eq(basefruitPurchaseItems.purchaseId, purchase[0].id));"
        },
        {
          "file": "src/routers/baseFruitPurchases.ts",
          "line": 131,
          "context": "query",
          "snippet": ".insert(basefruitPurchaseItems)"
        }
      ],
      "columns": []
    },
    {
      "name": "additivePurchases",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/inventory.ts",
          "line": 14,
          "context": "schema",
          "snippet": "additivePurchases,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 98,
          "context": "schema",
          "snippet": "'purchaseId', ${additivePurchases.id},"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 111,
          "context": "schema",
          "snippet": "'purchaseDate', ${additivePurchases.purchaseDate}"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 115,
          "context": "schema",
          "snippet": "createdAt: additivePurchases.purchaseDate,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 116,
          "context": "query",
          "snippet": "updatedAt: additivePurchases.updatedAt,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 120,
          "context": "schema",
          "snippet": "additivePurchases,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 121,
          "context": "schema",
          "snippet": "eq(additivePurchaseItems.purchaseId, additivePurchases.id),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 123,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(additivePurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 19,
          "context": "import",
          "snippet": "import { additivePurchasesRouter } from \"./additivePurchases\";"
        },
        {
          "file": "src/routers/index.ts",
          "line": 32,
          "context": "schema",
          "snippet": "additivePurchases,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1046,
          "context": "query",
          "snippet": "conditions.push(isNull(additivePurchases.deletedAt));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1049,
          "context": "schema",
          "snippet": "conditions.push(eq(additivePurchases.vendorId, input.vendorId));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1053,
          "context": "schema",
          "snippet": "sql`${additivePurchases.purchaseDate} >= ${input.startDate.toISOString().split(\"T\")[0]}`,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1058,
          "context": "schema",
          "snippet": "sql`${additivePurchases.purchaseDate} <= ${input.endDate.toISOString().split(\"T\")[0]}`,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1064,
          "context": "schema",
          "snippet": "id: additivePurchases.id,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1065,
          "context": "schema",
          "snippet": "vendorId: additivePurchases.vendorId,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1067,
          "context": "schema",
          "snippet": "purchaseDate: additivePurchases.purchaseDate,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1068,
          "context": "schema",
          "snippet": "invoiceNumber: additivePurchases.invoiceNumber,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1069,
          "context": "schema",
          "snippet": "totalCost: additivePurchases.totalCost,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1070,
          "context": "schema",
          "snippet": "notes: additivePurchases.notes,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1071,
          "context": "schema",
          "snippet": "createdAt: additivePurchases.createdAt,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1072,
          "context": "query",
          "snippet": "deletedAt: additivePurchases.deletedAt,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1074,
          "context": "import",
          "snippet": ".from(additivePurchases)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1075,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(additivePurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3459,
          "context": "schema",
          "snippet": "additivePurchases: additivePurchasesRouter,"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 3,
          "context": "import",
          "snippet": "import { db, additivePurchases, additivePurchaseItems, vendors } from \"db\";"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 21,
          "context": "query",
          "snippet": "const conditions = [isNull(additivePurchases.deletedAt)];"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 23,
          "context": "schema",
          "snippet": "conditions.push(eq(additivePurchases.vendorId, vendorId));"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 28,
          "context": "schema",
          "snippet": "id: additivePurchases.id,"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 29,
          "context": "schema",
          "snippet": "vendorId: additivePurchases.vendorId,"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 31,
          "context": "schema",
          "snippet": "purchaseDate: additivePurchases.purchaseDate,"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 32,
          "context": "schema",
          "snippet": "totalCost: additivePurchases.totalCost,"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 33,
          "context": "schema",
          "snippet": "invoiceNumber: additivePurchases.invoiceNumber,"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 34,
          "context": "schema",
          "snippet": "autoGeneratedInvoice: additivePurchases.autoGeneratedInvoice,"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 35,
          "context": "schema",
          "snippet": "notes: additivePurchases.notes,"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 36,
          "context": "schema",
          "snippet": "createdAt: additivePurchases.createdAt,"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 37,
          "context": "query",
          "snippet": "updatedAt: additivePurchases.updatedAt,"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 39,
          "context": "import",
          "snippet": ".from(additivePurchases)"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 40,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(additivePurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 42,
          "context": "schema",
          "snippet": ".orderBy(desc(additivePurchases.purchaseDate))"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 48,
          "context": "import",
          "snippet": ".from(additivePurchases)"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 146,
          "context": "schema",
          "snippet": "maxInvoice: sql<string>`MAX(${additivePurchases.invoiceNumber})`,"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 148,
          "context": "import",
          "snippet": ".from(additivePurchases)"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 151,
          "context": "schema",
          "snippet": "eq(additivePurchases.vendorId, input.vendorId),"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 152,
          "context": "schema",
          "snippet": "sql`${additivePurchases.purchaseDate} >= ${startOfDay}`,"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 153,
          "context": "schema",
          "snippet": "sql`${additivePurchases.purchaseDate} <= ${endOfDay}`,"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 154,
          "context": "schema",
          "snippet": "eq(additivePurchases.autoGeneratedInvoice, true),"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 155,
          "context": "schema",
          "snippet": "sql`${additivePurchases.invoiceNumber} LIKE ${`${dateStr}-${input.vendorId}-%`}`,"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 178,
          "context": "query",
          "snippet": ".insert(additivePurchases)"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 227,
          "context": "schema",
          "snippet": "const purchase = await db.query.additivePurchases.findFirst({"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 228,
          "context": "schema",
          "snippet": "where: eq(additivePurchases.id, input.id),"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 178,
          "context": "query",
          "snippet": ".insert(additivePurchases)"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 66,
          "context": "schema",
          "snippet": "trpc.additivePurchases.create.useMutation({"
        }
      ],
      "columns": []
    },
    {
      "name": "additivePurchaseItems",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/inventory.ts",
          "line": 15,
          "context": "schema",
          "snippet": "additivePurchaseItems,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 92,
          "context": "schema",
          "snippet": "id: sql<string>`CONCAT('additive-', ${additivePurchaseItems.id})`,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 94,
          "context": "schema",
          "snippet": "currentBottleCount: sql<number>`COALESCE(CAST(${additivePurchaseItems.quantity} AS NUMERIC), 0)`,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 100,
          "context": "schema",
          "snippet": "'varietyName', COALESCE(${additiveVarieties.name}, ${additivePurchaseItems.additiveType}),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 101,
          "context": "schema",
          "snippet": "'varietyType', COALESCE(${additiveVarieties.itemType}, ${additivePurchaseItems.additiveType}),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 102,
          "context": "schema",
          "snippet": "'brandManufacturer', ${additivePurchaseItems.brandManufacturer},"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 104,
          "context": "schema",
          "snippet": "WHEN ${additivePurchaseItems.productName} LIKE '%(%'"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 105,
          "context": "schema",
          "snippet": "THEN TRIM(SUBSTRING(${additivePurchaseItems.productName} FROM 1 FOR POSITION('(' IN ${additivePurchaseItems.productName}) - 1))"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 105,
          "context": "schema",
          "snippet": "THEN TRIM(SUBSTRING(${additivePurchaseItems.productName} FROM 1 FOR POSITION('(' IN ${additivePurchaseItems.productName}) - 1))"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 106,
          "context": "schema",
          "snippet": "ELSE ${additivePurchaseItems.productName}"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 108,
          "context": "schema",
          "snippet": "'unit', ${additivePurchaseItems.unit},"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 109,
          "context": "schema",
          "snippet": "'unitCost', ${additivePurchaseItems.pricePerUnit},"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 110,
          "context": "schema",
          "snippet": "'totalCost', ${additivePurchaseItems.totalCost},"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 114,
          "context": "schema",
          "snippet": "notes: additivePurchaseItems.notes,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 118,
          "context": "import",
          "snippet": ".from(additivePurchaseItems)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 121,
          "context": "schema",
          "snippet": "eq(additivePurchaseItems.purchaseId, additivePurchases.id),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 126,
          "context": "schema",
          "snippet": "eq(additivePurchaseItems.additiveVarietyId, additiveVarieties.id),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 128,
          "context": "query",
          "snippet": ".where(isNull(additivePurchaseItems.deletedAt));"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 602,
          "context": "query",
          "snippet": ".update(additivePurchaseItems)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 611,
          "context": "schema",
          "snippet": ".where(eq(additivePurchaseItems.id, id));"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 723,
          "context": "query",
          "snippet": ".update(additivePurchaseItems)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 725,
          "context": "schema",
          "snippet": ".where(eq(additivePurchaseItems.id, actualId));"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 602,
          "context": "query",
          "snippet": ".update(additivePurchaseItems)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 723,
          "context": "query",
          "snippet": ".update(additivePurchaseItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 33,
          "context": "schema",
          "snippet": "additivePurchaseItems,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1080,
          "context": "query",
          "snippet": ".select({ id: additivePurchaseItems.id })"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1081,
          "context": "import",
          "snippet": ".from(additivePurchaseItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1082,
          "context": "schema",
          "snippet": ".where(eq(additivePurchaseItems.purchaseId, purchase.id));"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 3,
          "context": "import",
          "snippet": "import { db, additivePurchases, additivePurchaseItems, vendors } from \"db\";"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 195,
          "context": "query",
          "snippet": ".insert(additivePurchaseItems)"
        },
        {
          "file": "src/routers/additivePurchases.ts",
          "line": 195,
          "context": "query",
          "snippet": ".insert(additivePurchaseItems)"
        }
      ],
      "columns": []
    },
    {
      "name": "juicePurchases",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 3,
          "context": "import",
          "snippet": "import { db, juicePurchases, juicePurchaseItems, vendors } from \"db\";"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 21,
          "context": "query",
          "snippet": "const conditions = [isNull(juicePurchases.deletedAt)];"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 23,
          "context": "schema",
          "snippet": "conditions.push(eq(juicePurchases.vendorId, vendorId));"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 28,
          "context": "schema",
          "snippet": "id: juicePurchases.id,"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 29,
          "context": "schema",
          "snippet": "vendorId: juicePurchases.vendorId,"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 31,
          "context": "schema",
          "snippet": "purchaseDate: juicePurchases.purchaseDate,"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 32,
          "context": "schema",
          "snippet": "totalCost: juicePurchases.totalCost,"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 33,
          "context": "schema",
          "snippet": "invoiceNumber: juicePurchases.invoiceNumber,"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 34,
          "context": "schema",
          "snippet": "autoGeneratedInvoice: juicePurchases.autoGeneratedInvoice,"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 35,
          "context": "schema",
          "snippet": "notes: juicePurchases.notes,"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 36,
          "context": "schema",
          "snippet": "createdAt: juicePurchases.createdAt,"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 37,
          "context": "query",
          "snippet": "updatedAt: juicePurchases.updatedAt,"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 39,
          "context": "import",
          "snippet": ".from(juicePurchases)"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 40,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(juicePurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 42,
          "context": "schema",
          "snippet": ".orderBy(desc(juicePurchases.purchaseDate))"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 48,
          "context": "import",
          "snippet": ".from(juicePurchases)"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 136,
          "context": "schema",
          "snippet": "maxInvoice: sql<string>`MAX(${juicePurchases.invoiceNumber})`,"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 138,
          "context": "import",
          "snippet": ".from(juicePurchases)"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 141,
          "context": "schema",
          "snippet": "eq(juicePurchases.vendorId, input.vendorId),"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 142,
          "context": "schema",
          "snippet": "sql`${juicePurchases.purchaseDate} >= ${startOfDay}`,"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 143,
          "context": "schema",
          "snippet": "sql`${juicePurchases.purchaseDate} <= ${endOfDay}`,"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 144,
          "context": "schema",
          "snippet": "eq(juicePurchases.autoGeneratedInvoice, true),"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 145,
          "context": "schema",
          "snippet": "sql`${juicePurchases.invoiceNumber} LIKE ${`${dateStr}-${input.vendorId}-%`}`,"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 168,
          "context": "query",
          "snippet": ".insert(juicePurchases)"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 217,
          "context": "schema",
          "snippet": "const purchase = await db.query.juicePurchases.findFirst({"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 218,
          "context": "schema",
          "snippet": "where: eq(juicePurchases.id, input.id),"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 168,
          "context": "query",
          "snippet": ".insert(juicePurchases)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 17,
          "context": "schema",
          "snippet": "juicePurchases,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 139,
          "context": "schema",
          "snippet": "'purchaseId', ${juicePurchases.id},"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 151,
          "context": "schema",
          "snippet": "createdAt: juicePurchases.purchaseDate,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 152,
          "context": "query",
          "snippet": "updatedAt: juicePurchases.updatedAt,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 156,
          "context": "schema",
          "snippet": "juicePurchases,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 157,
          "context": "schema",
          "snippet": "eq(juicePurchaseItems.purchaseId, juicePurchases.id),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 159,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(juicePurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 21,
          "context": "import",
          "snippet": "import { juicePurchasesRouter } from \"./juicePurchases\";"
        },
        {
          "file": "src/routers/index.ts",
          "line": 34,
          "context": "schema",
          "snippet": "juicePurchases,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1100,
          "context": "query",
          "snippet": "conditions.push(isNull(juicePurchases.deletedAt));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1103,
          "context": "schema",
          "snippet": "conditions.push(eq(juicePurchases.vendorId, input.vendorId));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1107,
          "context": "schema",
          "snippet": "sql`${juicePurchases.purchaseDate} >= ${input.startDate.toISOString().split(\"T\")[0]}`,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1112,
          "context": "schema",
          "snippet": "sql`${juicePurchases.purchaseDate} <= ${input.endDate.toISOString().split(\"T\")[0]}`,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1118,
          "context": "schema",
          "snippet": "id: juicePurchases.id,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1119,
          "context": "schema",
          "snippet": "vendorId: juicePurchases.vendorId,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1121,
          "context": "schema",
          "snippet": "purchaseDate: juicePurchases.purchaseDate,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1122,
          "context": "schema",
          "snippet": "invoiceNumber: juicePurchases.invoiceNumber,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1123,
          "context": "schema",
          "snippet": "totalCost: juicePurchases.totalCost,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1124,
          "context": "schema",
          "snippet": "notes: juicePurchases.notes,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1125,
          "context": "schema",
          "snippet": "createdAt: juicePurchases.createdAt,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1126,
          "context": "query",
          "snippet": "deletedAt: juicePurchases.deletedAt,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1128,
          "context": "import",
          "snippet": ".from(juicePurchases)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1129,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(juicePurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3461,
          "context": "schema",
          "snippet": "juicePurchases: juicePurchasesRouter,"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 72,
          "context": "schema",
          "snippet": "const createJuicePurchaseMutation = trpc.juicePurchases.create.useMutation({"
        }
      ],
      "columns": []
    },
    {
      "name": "juicePurchaseItems",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 3,
          "context": "import",
          "snippet": "import { db, juicePurchases, juicePurchaseItems, vendors } from \"db\";"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 185,
          "context": "query",
          "snippet": ".insert(juicePurchaseItems)"
        },
        {
          "file": "src/routers/juicePurchases.ts",
          "line": 185,
          "context": "query",
          "snippet": ".insert(juicePurchaseItems)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 18,
          "context": "schema",
          "snippet": "juicePurchaseItems,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 133,
          "context": "schema",
          "snippet": "id: sql<string>`CONCAT('juice-', ${juicePurchaseItems.id})`,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 135,
          "context": "schema",
          "snippet": "currentBottleCount: sql<number>`COALESCE(CAST(${juicePurchaseItems.volumeL} AS NUMERIC), 0)`,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 141,
          "context": "schema",
          "snippet": "'juiceType', ${juicePurchaseItems.juiceType},"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 142,
          "context": "schema",
          "snippet": "'varietyName', ${juicePurchaseItems.varietyName},"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 143,
          "context": "schema",
          "snippet": "'brix', ${juicePurchaseItems.brix},"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 144,
          "context": "schema",
          "snippet": "'specificGravity', ${juicePurchaseItems.specificGravity},"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 145,
          "context": "schema",
          "snippet": "'ph', ${juicePurchaseItems.ph},"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 146,
          "context": "schema",
          "snippet": "'containerType', ${juicePurchaseItems.containerType},"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 150,
          "context": "schema",
          "snippet": "notes: juicePurchaseItems.notes,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 154,
          "context": "import",
          "snippet": ".from(juicePurchaseItems)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 157,
          "context": "schema",
          "snippet": "eq(juicePurchaseItems.purchaseId, juicePurchases.id),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 160,
          "context": "query",
          "snippet": ".where(isNull(juicePurchaseItems.deletedAt));"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 640,
          "context": "query",
          "snippet": ".update(juicePurchaseItems)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 648,
          "context": "schema",
          "snippet": ".where(eq(juicePurchaseItems.id, id));"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 730,
          "context": "query",
          "snippet": ".update(juicePurchaseItems)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 732,
          "context": "schema",
          "snippet": ".where(eq(juicePurchaseItems.id, actualId));"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 640,
          "context": "query",
          "snippet": ".update(juicePurchaseItems)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 730,
          "context": "query",
          "snippet": ".update(juicePurchaseItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 35,
          "context": "schema",
          "snippet": "juicePurchaseItems,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1134,
          "context": "query",
          "snippet": ".select({ id: juicePurchaseItems.id })"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1135,
          "context": "import",
          "snippet": ".from(juicePurchaseItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1136,
          "context": "schema",
          "snippet": ".where(eq(juicePurchaseItems.purchaseId, purchase.id));"
        }
      ],
      "columns": []
    },
    {
      "name": "packagingPurchases",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 3,
          "context": "import",
          "snippet": "import { db, packagingPurchases, packagingPurchaseItems, vendors } from \"db\";"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 21,
          "context": "query",
          "snippet": "const conditions = [isNull(packagingPurchases.deletedAt)];"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 23,
          "context": "schema",
          "snippet": "conditions.push(eq(packagingPurchases.vendorId, vendorId));"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 28,
          "context": "schema",
          "snippet": "id: packagingPurchases.id,"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 29,
          "context": "schema",
          "snippet": "vendorId: packagingPurchases.vendorId,"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 31,
          "context": "schema",
          "snippet": "purchaseDate: packagingPurchases.purchaseDate,"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 32,
          "context": "schema",
          "snippet": "totalCost: packagingPurchases.totalCost,"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 33,
          "context": "schema",
          "snippet": "invoiceNumber: packagingPurchases.invoiceNumber,"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 34,
          "context": "schema",
          "snippet": "autoGeneratedInvoice: packagingPurchases.autoGeneratedInvoice,"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 35,
          "context": "schema",
          "snippet": "notes: packagingPurchases.notes,"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 36,
          "context": "schema",
          "snippet": "createdAt: packagingPurchases.createdAt,"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 37,
          "context": "query",
          "snippet": "updatedAt: packagingPurchases.updatedAt,"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 39,
          "context": "import",
          "snippet": ".from(packagingPurchases)"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 40,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(packagingPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 42,
          "context": "schema",
          "snippet": ".orderBy(desc(packagingPurchases.purchaseDate))"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 48,
          "context": "import",
          "snippet": ".from(packagingPurchases)"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 137,
          "context": "schema",
          "snippet": "maxInvoice: sql<string>`MAX(${packagingPurchases.invoiceNumber})`,"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 139,
          "context": "import",
          "snippet": ".from(packagingPurchases)"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 142,
          "context": "schema",
          "snippet": "eq(packagingPurchases.vendorId, input.vendorId),"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 143,
          "context": "schema",
          "snippet": "sql`${packagingPurchases.purchaseDate} >= ${startOfDay}`,"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 144,
          "context": "schema",
          "snippet": "sql`${packagingPurchases.purchaseDate} <= ${endOfDay}`,"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 145,
          "context": "schema",
          "snippet": "eq(packagingPurchases.autoGeneratedInvoice, true),"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 146,
          "context": "schema",
          "snippet": "sql`${packagingPurchases.invoiceNumber} LIKE ${`${dateStr}-${input.vendorId}-%`}`,"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 169,
          "context": "query",
          "snippet": ".insert(packagingPurchases)"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 218,
          "context": "schema",
          "snippet": "const purchase = await db.query.packagingPurchases.findFirst({"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 219,
          "context": "schema",
          "snippet": "where: eq(packagingPurchases.id, input.id),"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 169,
          "context": "query",
          "snippet": ".insert(packagingPurchases)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 19,
          "context": "schema",
          "snippet": "packagingPurchases,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 171,
          "context": "schema",
          "snippet": "'purchaseId', ${packagingPurchases.id},"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 180,
          "context": "schema",
          "snippet": "createdAt: packagingPurchases.purchaseDate,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 181,
          "context": "query",
          "snippet": "updatedAt: packagingPurchases.updatedAt,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 185,
          "context": "schema",
          "snippet": "packagingPurchases,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 186,
          "context": "schema",
          "snippet": "eq(packagingPurchaseItems.purchaseId, packagingPurchases.id),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 188,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(packagingPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 22,
          "context": "import",
          "snippet": "import { packagingPurchasesRouter } from \"./packagingPurchases\";"
        },
        {
          "file": "src/routers/index.ts",
          "line": 36,
          "context": "schema",
          "snippet": "packagingPurchases,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1157,
          "context": "query",
          "snippet": "conditions.push(isNull(packagingPurchases.deletedAt));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1160,
          "context": "schema",
          "snippet": "conditions.push(eq(packagingPurchases.vendorId, input.vendorId));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1164,
          "context": "schema",
          "snippet": "sql`${packagingPurchases.purchaseDate} >= ${input.startDate.toISOString().split(\"T\")[0]}`,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1169,
          "context": "schema",
          "snippet": "sql`${packagingPurchases.purchaseDate} <= ${input.endDate.toISOString().split(\"T\")[0]}`,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1175,
          "context": "schema",
          "snippet": "id: packagingPurchases.id,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1176,
          "context": "schema",
          "snippet": "vendorId: packagingPurchases.vendorId,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1178,
          "context": "schema",
          "snippet": "purchaseDate: packagingPurchases.purchaseDate,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1179,
          "context": "schema",
          "snippet": "invoiceNumber: packagingPurchases.invoiceNumber,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1180,
          "context": "schema",
          "snippet": "totalCost: packagingPurchases.totalCost,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1181,
          "context": "schema",
          "snippet": "notes: packagingPurchases.notes,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1182,
          "context": "schema",
          "snippet": "createdAt: packagingPurchases.createdAt,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1183,
          "context": "query",
          "snippet": "deletedAt: packagingPurchases.deletedAt,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1185,
          "context": "import",
          "snippet": ".from(packagingPurchases)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1186,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(packagingPurchases.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3462,
          "context": "schema",
          "snippet": "packagingPurchases: packagingPurchasesRouter,"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 79,
          "context": "schema",
          "snippet": "trpc.packagingPurchases.create.useMutation({"
        }
      ],
      "columns": []
    },
    {
      "name": "packagingPurchaseItems",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 3,
          "context": "import",
          "snippet": "import { db, packagingPurchases, packagingPurchaseItems, vendors } from \"db\";"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 186,
          "context": "query",
          "snippet": ".insert(packagingPurchaseItems)"
        },
        {
          "file": "src/routers/packagingPurchases.ts",
          "line": 186,
          "context": "query",
          "snippet": ".insert(packagingPurchaseItems)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 20,
          "context": "schema",
          "snippet": "packagingPurchaseItems,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 165,
          "context": "schema",
          "snippet": "id: sql<string>`CONCAT('packaging-', ${packagingPurchaseItems.id})`,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 167,
          "context": "schema",
          "snippet": "currentBottleCount: sql<number>`COALESCE(CAST(${packagingPurchaseItems.quantity} AS NUMERIC), 0)`,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 173,
          "context": "schema",
          "snippet": "'packageType', ${packagingPurchaseItems.packageType},"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 174,
          "context": "schema",
          "snippet": "'materialType', ${packagingPurchaseItems.materialType},"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 175,
          "context": "schema",
          "snippet": "'size', ${packagingPurchaseItems.size},"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 179,
          "context": "schema",
          "snippet": "notes: packagingPurchaseItems.notes,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 183,
          "context": "import",
          "snippet": ".from(packagingPurchaseItems)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 186,
          "context": "schema",
          "snippet": "eq(packagingPurchaseItems.purchaseId, packagingPurchases.id),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 189,
          "context": "query",
          "snippet": ".where(isNull(packagingPurchaseItems.deletedAt));"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 675,
          "context": "query",
          "snippet": ".update(packagingPurchaseItems)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 681,
          "context": "schema",
          "snippet": ".where(eq(packagingPurchaseItems.id, id));"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 737,
          "context": "query",
          "snippet": ".update(packagingPurchaseItems)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 739,
          "context": "schema",
          "snippet": ".where(eq(packagingPurchaseItems.id, actualId));"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 675,
          "context": "query",
          "snippet": ".update(packagingPurchaseItems)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 737,
          "context": "query",
          "snippet": ".update(packagingPurchaseItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 37,
          "context": "schema",
          "snippet": "packagingPurchaseItems,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1191,
          "context": "query",
          "snippet": ".select({ id: packagingPurchaseItems.id })"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1192,
          "context": "import",
          "snippet": ".from(packagingPurchaseItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1193,
          "context": "schema",
          "snippet": ".where(eq(packagingPurchaseItems.purchaseId, purchase.id));"
        }
      ],
      "columns": []
    },
    {
      "name": "pressRuns",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/pressRun.ts",
          "line": 1656,
          "context": "schema",
          "snippet": "pressRuns: enhancedPressRuns,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 38,
          "context": "schema",
          "snippet": "pressRuns,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1508,
          "context": "schema",
          "snippet": "id: pressRuns.id,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1509,
          "context": "schema",
          "snippet": "runDate: pressRuns.runDate,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1510,
          "context": "schema",
          "snippet": "totalAppleProcessedKg: pressRuns.totalAppleProcessedKg,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1511,
          "context": "schema",
          "snippet": "totalJuiceProducedL: pressRuns.totalJuiceProducedL,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1512,
          "context": "schema",
          "snippet": "extractionRate: pressRuns.extractionRate,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1513,
          "context": "schema",
          "snippet": "notes: pressRuns.notes,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1514,
          "context": "schema",
          "snippet": "createdAt: pressRuns.createdAt,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1516,
          "context": "import",
          "snippet": ".from(pressRuns)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1517,
          "context": "query",
          "snippet": ".where(isNull(pressRuns.deletedAt))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1518,
          "context": "schema",
          "snippet": ".orderBy(desc(pressRuns.runDate), desc(pressRuns.createdAt));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1518,
          "context": "schema",
          "snippet": ".orderBy(desc(pressRuns.runDate), desc(pressRuns.createdAt));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1521,
          "context": "schema",
          "snippet": "pressRuns: pressList,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1609,
          "context": "query",
          "snippet": ".insert(pressRuns)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1710,
          "context": "import",
          "snippet": ".from(pressRuns)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1713,
          "context": "schema",
          "snippet": "eq(pressRuns.id, input.pressRunId),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1714,
          "context": "query",
          "snippet": "isNull(pressRuns.deletedAt),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1737,
          "context": "query",
          "snippet": ".update(pressRuns)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1744,
          "context": "schema",
          "snippet": ".where(eq(pressRuns.id, input.pressRunId))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1807,
          "context": "import",
          "snippet": ".from(pressRuns)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1808,
          "context": "query",
          "snippet": ".where(and(eq(pressRuns.id, input.id), isNull(pressRuns.deletedAt)))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1808,
          "context": "query",
          "snippet": ".where(and(eq(pressRuns.id, input.id), isNull(pressRuns.deletedAt)))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1609,
          "context": "query",
          "snippet": ".insert(pressRuns)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1737,
          "context": "query",
          "snippet": ".update(pressRuns)"
        },
        {
          "file": "src/app/pressing/page.tsx",
          "line": 69,
          "context": "schema",
          "snippet": "pressRunsData?.pressRuns?.map((run) => ({"
        },
        {
          "file": "src/app/pressing/page.tsx",
          "line": 264,
          "context": "schema",
          "snippet": "if (!pressRunsData?.pressRuns) return [];"
        },
        {
          "file": "src/app/pressing/page.tsx",
          "line": 266,
          "context": "schema",
          "snippet": "const filtered = pressRunsData.pressRuns.filter((pressRun) => {"
        },
        {
          "file": "src/app/pressing/page.tsx",
          "line": 282,
          "context": "schema",
          "snippet": "}, [pressRunsData?.pressRuns, searchTerm]);"
        },
        {
          "file": "src/app/pressing/page.tsx",
          "line": 377,
          "context": "schema",
          "snippet": "Debug: {pressRunsData?.pressRuns?.length || 0} total"
        },
        {
          "file": "src/app/dashboard/page.tsx",
          "line": 415,
          "context": "schema",
          "snippet": "if (!pressRunsData?.pressRuns) return [];"
        },
        {
          "file": "src/app/dashboard/page.tsx",
          "line": 417,
          "context": "schema",
          "snippet": "const filtered = pressRunsData.pressRuns.filter((pressRun) => {"
        },
        {
          "file": "src/app/dashboard/page.tsx",
          "line": 433,
          "context": "schema",
          "snippet": "}, [pressRunsData?.pressRuns, searchTerm]);"
        },
        {
          "file": "src/app/pressing/__tests__/page.test.tsx",
          "line": 106,
          "context": "schema",
          "snippet": "data: { pressRuns: mockActivePressRuns },"
        },
        {
          "file": "src/app/pressing/__tests__/page.test.tsx",
          "line": 113,
          "context": "schema",
          "snippet": "data: { pressRuns: mockCompletedPressRuns },"
        },
        {
          "file": "src/app/pressing/__tests__/page.test.tsx",
          "line": 321,
          "context": "schema",
          "snippet": "data: { pressRuns: [] },"
        },
        {
          "file": "src/app/pressing/__tests__/page.test.tsx",
          "line": 327,
          "context": "schema",
          "snippet": "data: { pressRuns: [] },"
        }
      ],
      "columns": []
    },
    {
      "name": "pressItems",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/index.ts",
          "line": 39,
          "context": "schema",
          "snippet": "pressItems,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1625,
          "context": "query",
          "snippet": ".insert(pressItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1751,
          "context": "query",
          "snippet": ".update(pressItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1760,
          "context": "schema",
          "snippet": "eq(pressItems.id, item.pressItemId),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1761,
          "context": "schema",
          "snippet": "eq(pressItems.pressRunId, input.pressRunId),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1820,
          "context": "import",
          "snippet": ".from(pressItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1823,
          "context": "schema",
          "snippet": "eq(pressItems.pressRunId, input.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1824,
          "context": "query",
          "snippet": "isNull(pressItems.deletedAt),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1891,
          "context": "schema",
          "snippet": "pressItems: z"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1935,
          "context": "schema",
          "snippet": "for (const item of input.pressItems) {"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1939,
          "context": "import",
          "snippet": ".from(pressItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1942,
          "context": "schema",
          "snippet": "eq(pressItems.id, item.pressItemId),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1943,
          "context": "query",
          "snippet": "isNull(pressItems.deletedAt),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1625,
          "context": "query",
          "snippet": ".insert(pressItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1751,
          "context": "query",
          "snippet": ".update(pressItems)"
        }
      ],
      "columns": []
    },
    {
      "name": "vessels",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/services/inventory.ts",
          "line": 11,
          "context": "schema",
          "snippet": "vessels,"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 327,
          "context": "query",
          "snippet": ".select({ id: vessels.id, status: vessels.status })"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 327,
          "context": "query",
          "snippet": ".select({ id: vessels.id, status: vessels.status })"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 328,
          "context": "import",
          "snippet": ".from(vessels)"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 330,
          "context": "query",
          "snippet": "and(eq(vessels.id, transaction.vesselId), isNull(vessels.deletedAt)),"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 330,
          "context": "query",
          "snippet": "and(eq(vessels.id, transaction.vesselId), isNull(vessels.deletedAt)),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 8,
          "context": "schema",
          "snippet": "vessels,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 555,
          "context": "import",
          "snippet": ".from(vessels)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 557,
          "context": "query",
          "snippet": "and(eq(vessels.id, input.vesselId), isNull(vessels.deletedAt)),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 557,
          "context": "query",
          "snippet": "and(eq(vessels.id, input.vesselId), isNull(vessels.deletedAt)),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 684,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 689,
          "context": "schema",
          "snippet": ".where(eq(vessels.id, input.vesselId));"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 774,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 779,
          "context": "schema",
          "snippet": ".where(eq(vessels.id, input.vesselId));"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 783,
          "context": "schema",
          "snippet": "\"vessels\","
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 992,
          "context": "schema",
          "snippet": "// Validate vessels exist and have capacity"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 996,
          "context": "schema",
          "snippet": "id: vessels.id,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 997,
          "context": "schema",
          "snippet": "capacityL: vessels.capacityL,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 998,
          "context": "schema",
          "snippet": "name: vessels.name,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1000,
          "context": "import",
          "snippet": ".from(vessels)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1003,
          "context": "schema",
          "snippet": "eq(vessels.id, assignment.toVesselId),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1004,
          "context": "query",
          "snippet": "isNull(vessels.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1154,
          "context": "query",
          "snippet": ".select({ id: vessels.id, name: vessels.name })"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1154,
          "context": "query",
          "snippet": ".select({ id: vessels.id, name: vessels.name })"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1155,
          "context": "import",
          "snippet": ".from(vessels)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1156,
          "context": "schema",
          "snippet": ".where(eq(vessels.id, assignment.toVesselId))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1252,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1257,
          "context": "schema",
          "snippet": ".where(eq(vessels.id, assignment.toVesselId));"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1261,
          "context": "schema",
          "snippet": "\"vessels\","
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1548,
          "context": "schema",
          "snippet": "vesselName: vessels.name,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1564,
          "context": "schema",
          "snippet": ".leftJoin(vessels, eq(applePressRuns.vesselId, vessels.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1564,
          "context": "schema",
          "snippet": ".leftJoin(vessels, eq(applePressRuns.vesselId, vessels.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1687,
          "context": "schema",
          "snippet": "vesselName: vessels.name,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1688,
          "context": "type",
          "snippet": "vesselType: vessels.type,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1689,
          "context": "schema",
          "snippet": "vesselCapacityL: vessels.capacityL,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1710,
          "context": "schema",
          "snippet": ".leftJoin(vessels, eq(applePressRuns.vesselId, vessels.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1710,
          "context": "schema",
          "snippet": ".leftJoin(vessels, eq(applePressRuns.vesselId, vessels.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2057,
          "context": "import",
          "snippet": ".from(vessels)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2060,
          "context": "schema",
          "snippet": "eq(vessels.id, existingPressRun[0].vesselId),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2061,
          "context": "query",
          "snippet": "isNull(vessels.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 684,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 774,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1252,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 6,
          "context": "schema",
          "snippet": "vessels,"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 100,
          "context": "schema",
          "snippet": "id: vessels.id,"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 101,
          "context": "schema",
          "snippet": "capacityL: vessels.capacityL,"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 102,
          "context": "schema",
          "snippet": "status: vessels.status,"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 103,
          "context": "schema",
          "snippet": "name: vessels.name,"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 105,
          "context": "import",
          "snippet": ".from(vessels)"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 107,
          "context": "query",
          "snippet": "and(eq(vessels.id, input.vesselId), isNull(vessels.deletedAt)),"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 107,
          "context": "query",
          "snippet": "and(eq(vessels.id, input.vesselId), isNull(vessels.deletedAt)),"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 231,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 236,
          "context": "schema",
          "snippet": ".where(eq(vessels.id, input.vesselId));"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 332,
          "context": "schema",
          "snippet": "vesselName: vessels.name,"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 339,
          "context": "schema",
          "snippet": ".leftJoin(vessels, eq(packagingRuns.vesselId, vessels.id))"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 339,
          "context": "schema",
          "snippet": ".leftJoin(vessels, eq(packagingRuns.vesselId, vessels.id))"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 231,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 47,
          "context": "schema",
          "snippet": "vessels,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1911,
          "context": "import",
          "snippet": ".from(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1913,
          "context": "query",
          "snippet": "and(eq(vessels.id, input.vesselId), isNull(vessels.deletedAt)),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1913,
          "context": "query",
          "snippet": "and(eq(vessels.id, input.vesselId), isNull(vessels.deletedAt)),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2012,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2017,
          "context": "schema",
          "snippet": ".where(eq(vessels.id, input.vesselId));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2183,
          "context": "import",
          "snippet": ".from(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2186,
          "context": "schema",
          "snippet": "eq(vessels.id, input.newVesselId),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2187,
          "context": "query",
          "snippet": "isNull(vessels.deletedAt),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2237,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2242,
          "context": "schema",
          "snippet": ".where(eq(vessels.id, batch[0].vesselId));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2247,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2252,
          "context": "schema",
          "snippet": ".where(eq(vessels.id, input.newVesselId));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2349,
          "context": "import",
          "snippet": ".from(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2350,
          "context": "query",
          "snippet": ".where(isNull(vessels.deletedAt))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2351,
          "context": "schema",
          "snippet": ".orderBy(vessels.name);"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2354,
          "context": "schema",
          "snippet": "vessels: vesselList,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2358,
          "context": "schema",
          "snippet": "console.error(\"Error listing vessels:\", error);"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2361,
          "context": "schema",
          "snippet": "message: \"Failed to list vessels\","
        },
        {
          "file": "src/routers/index.ts",
          "line": 2368,
          "context": "schema",
          "snippet": "// Get all vessels with their current active batches"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2371,
          "context": "schema",
          "snippet": "id: vessels.id,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2372,
          "context": "schema",
          "snippet": "name: vessels.name,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2373,
          "context": "schema",
          "snippet": "capacityL: vessels.capacityL,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2374,
          "context": "schema",
          "snippet": "capacityUnit: vessels.capacityUnit,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2375,
          "context": "schema",
          "snippet": "status: vessels.status,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2376,
          "context": "schema",
          "snippet": "material: vessels.material,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2377,
          "context": "schema",
          "snippet": "location: vessels.location,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2384,
          "context": "import",
          "snippet": ".from(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2388,
          "context": "schema",
          "snippet": "eq(vessels.id, batches.vesselId),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2393,
          "context": "query",
          "snippet": ".where(isNull(vessels.deletedAt))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2394,
          "context": "schema",
          "snippet": ".orderBy(vessels.name);"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2426,
          "context": "schema",
          "snippet": "vessels: vesselCapacities,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2430,
          "context": "schema",
          "snippet": "console.error(\"Error listing vessels with batches:\", error);"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2433,
          "context": "schema",
          "snippet": "message: \"Failed to list vessels with batch information\","
        },
        {
          "file": "src/routers/index.ts",
          "line": 2456,
          "context": "query",
          "snippet": ".select({ name: vessels.name })"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2457,
          "context": "import",
          "snippet": ".from(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2460,
          "context": "query",
          "snippet": "isNull(vessels.deletedAt),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2461,
          "context": "schema",
          "snippet": "sql`${vessels.name} ~ '^Tank [0-9]+$'`,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2464,
          "context": "schema",
          "snippet": ".orderBy(vessels.name);"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2482,
          "context": "query",
          "snippet": ".insert(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2499,
          "context": "schema",
          "snippet": "\"vessels\","
        },
        {
          "file": "src/routers/index.ts",
          "line": 2552,
          "context": "import",
          "snippet": ".from(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2553,
          "context": "query",
          "snippet": ".where(and(eq(vessels.id, input.id), isNull(vessels.deletedAt)))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2553,
          "context": "query",
          "snippet": ".where(and(eq(vessels.id, input.id), isNull(vessels.deletedAt)))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2585,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2587,
          "context": "schema",
          "snippet": ".where(eq(vessels.id, input.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2592,
          "context": "schema",
          "snippet": "\"vessels\","
        },
        {
          "file": "src/routers/index.ts",
          "line": 2621,
          "context": "import",
          "snippet": ".from(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2622,
          "context": "query",
          "snippet": ".where(and(eq(vessels.id, input.id), isNull(vessels.deletedAt)))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2622,
          "context": "query",
          "snippet": ".where(and(eq(vessels.id, input.id), isNull(vessels.deletedAt)))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2647,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2652,
          "context": "schema",
          "snippet": ".where(eq(vessels.id, input.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2657,
          "context": "schema",
          "snippet": "\"vessels\","
        },
        {
          "file": "src/routers/index.ts",
          "line": 2685,
          "context": "import",
          "snippet": ".from(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2686,
          "context": "query",
          "snippet": ".where(and(eq(vessels.id, input.id), isNull(vessels.deletedAt)))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2686,
          "context": "query",
          "snippet": ".where(and(eq(vessels.id, input.id), isNull(vessels.deletedAt)))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2711,
          "context": "schema",
          "snippet": "// Get vessels with their current batches and apple press runs"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2714,
          "context": "schema",
          "snippet": "vesselId: vessels.id,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2715,
          "context": "schema",
          "snippet": "vesselName: vessels.name,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2716,
          "context": "schema",
          "snippet": "vesselCapacityL: vessels.capacityL,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2717,
          "context": "schema",
          "snippet": "vesselCapacityUnit: vessels.capacityUnit,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2718,
          "context": "schema",
          "snippet": "vesselStatus: vessels.status,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2719,
          "context": "schema",
          "snippet": "vesselLocation: vessels.location,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2729,
          "context": "import",
          "snippet": ".from(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2733,
          "context": "schema",
          "snippet": "eq(batches.vesselId, vessels.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2741,
          "context": "schema",
          "snippet": "eq(applePressRuns.vesselId, vessels.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2746,
          "context": "query",
          "snippet": ".where(isNull(vessels.deletedAt))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2747,
          "context": "schema",
          "snippet": ".orderBy(vessels.name);"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2819,
          "context": "schema",
          "snippet": "vessels: vesselsWithMeasurements,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2851,
          "context": "import",
          "snippet": ".from(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2854,
          "context": "import",
          "snippet": "eq(vessels.id, input.fromVesselId),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2855,
          "context": "query",
          "snippet": "isNull(vessels.deletedAt),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2870,
          "context": "import",
          "snippet": ".from(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2873,
          "context": "schema",
          "snippet": "eq(vessels.id, input.toVesselId),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2874,
          "context": "query",
          "snippet": "isNull(vessels.deletedAt),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2975,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2980,
          "context": "import",
          "snippet": ".where(eq(vessels.id, input.fromVesselId));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2996,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3001,
          "context": "schema",
          "snippet": ".where(eq(vessels.id, input.toVesselId));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3090,
          "context": "schema",
          "snippet": "const sv = aliasedTable(vessels, \"sv\");"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3091,
          "context": "schema",
          "snippet": "const dv = aliasedTable(vessels, \"dv\");"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3234,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3239,
          "context": "schema",
          "snippet": ".where(eq(vessels.id, input.vesselId));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2482,
          "context": "query",
          "snippet": ".insert(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2012,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2237,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2247,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2585,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2647,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2975,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2996,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3234,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 10,
          "context": "schema",
          "snippet": "vessels,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 166,
          "context": "schema",
          "snippet": "vesselName: vessels.name,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 174,
          "context": "schema",
          "snippet": ".leftJoin(vessels, eq(batches.vesselId, vessels.id))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 174,
          "context": "schema",
          "snippet": ".leftJoin(vessels, eq(batches.vesselId, vessels.id))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 254,
          "context": "schema",
          "snippet": "vesselName: vessels.name,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 255,
          "context": "schema",
          "snippet": "vesselCapacity: vessels.capacityL,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 268,
          "context": "schema",
          "snippet": ".leftJoin(vessels, eq(batches.vesselId, vessels.id))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 268,
          "context": "schema",
          "snippet": ".leftJoin(vessels, eq(batches.vesselId, vessels.id))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 383,
          "context": "schema",
          "snippet": "vesselName: vessels.name,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 389,
          "context": "schema",
          "snippet": ".leftJoin(vessels, eq(batches.vesselId, vessels.id))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 389,
          "context": "schema",
          "snippet": ".leftJoin(vessels, eq(batches.vesselId, vessels.id))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 737,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 742,
          "context": "schema",
          "snippet": ".where(eq(vessels.id, batch.vesselId));"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 782,
          "context": "schema",
          "snippet": "vesselName: vessels.name,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 787,
          "context": "schema",
          "snippet": ".leftJoin(vessels, eq(batches.vesselId, vessels.id))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 787,
          "context": "schema",
          "snippet": ".leftJoin(vessels, eq(batches.vesselId, vessels.id))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 965,
          "context": "schema",
          "snippet": "sql`vessels AS source_vessel`,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 969,
          "context": "schema",
          "snippet": "sql`vessels AS dest_vessel`,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 737,
          "context": "query",
          "snippet": ".update(vessels)"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 11,
          "context": "schema",
          "snippet": "vessels,"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 41,
          "context": "query",
          "snippet": "await db.delete(vessels);"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 95,
          "context": "query",
          "snippet": ".insert(vessels)"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 95,
          "context": "query",
          "snippet": ".insert(vessels)"
        },
        {
          "file": "src/components/pressing/press-run-completion.tsx",
          "line": 300,
          "context": "schema",
          "snippet": "Creating batches and assigning to vessels..."
        },
        {
          "file": "src/components/pressing/press-run-completion-form.tsx",
          "line": 128,
          "context": "schema",
          "snippet": "// Fetch vessels with batch information"
        },
        {
          "file": "src/components/pressing/press-run-completion-form.tsx",
          "line": 132,
          "context": "schema",
          "snippet": "// Get all vessels with remaining capacity"
        },
        {
          "file": "src/components/pressing/press-run-completion-form.tsx",
          "line": 134,
          "context": "schema",
          "snippet": "vesselsData?.vessels?.filter((vessel) => vessel.isAvailable) || [];"
        },
        {
          "file": "src/components/pressing/press-run-completion-form.tsx",
          "line": 404,
          "context": "schema",
          "snippet": "Assign juice volumes to available vessels for fermentation"
        },
        {
          "file": "src/components/pressing/press-run-completion-form.tsx",
          "line": 435,
          "context": "schema",
          "snippet": "Loading vessels..."
        },
        {
          "file": "src/components/pressing/press-run-completion-form.tsx",
          "line": 439,
          "context": "schema",
          "snippet": "No available vessels"
        },
        {
          "file": "src/app/pressing/page.tsx",
          "line": 699,
          "context": "schema",
          "snippet": "window.location.href = `/fermentation/vessels/${vesselId}`;"
        },
        {
          "file": "src/app/pressing/page.tsx",
          "line": 834,
          "context": "query",
          "snippet": "description=\"Are you sure you want to delete this completed press run? Note: Press runs with juice assigned to vessels cannot be deleted to maintain production records. This will permanently remove all records and cannot be undone.\""
        },
        {
          "file": "src/app/dashboard/page.tsx",
          "line": 243,
          "context": "schema",
          "snippet": "const vessels = liquidData?.vessels || [];"
        },
        {
          "file": "src/app/dashboard/page.tsx",
          "line": 243,
          "context": "schema",
          "snippet": "const vessels = liquidData?.vessels || [];"
        },
        {
          "file": "src/app/dashboard/page.tsx",
          "line": 313,
          "context": "schema",
          "snippet": "{vessels.map((vessel) => ("
        },
        {
          "file": "src/app/cellar/page.tsx",
          "line": 388,
          "context": "schema",
          "snippet": "const liquidMapVessel = liquidMapQuery.data?.vessels.find("
        },
        {
          "file": "src/app/cellar/page.tsx",
          "line": 405,
          "context": "schema",
          "snippet": "Additives can only be added to vessels with active batches."
        },
        {
          "file": "src/app/cellar/page.tsx",
          "line": 457,
          "context": "schema",
          "snippet": "const sourceVessel = vesselListQuery.data?.vessels?.find("
        },
        {
          "file": "src/app/cellar/page.tsx",
          "line": 460,
          "context": "schema",
          "snippet": "const sourceLiquidMap = liquidMapQuery.data?.vessels?.find("
        },
        {
          "file": "src/app/cellar/page.tsx",
          "line": 469,
          "context": "schema",
          "snippet": "// Get available destination vessels (exclude current vessel and only available ones)"
        },
        {
          "file": "src/app/cellar/page.tsx",
          "line": 471,
          "context": "schema",
          "snippet": "vesselListQuery.data?.vessels?.filter("
        },
        {
          "file": "src/app/cellar/page.tsx",
          "line": 699,
          "context": "schema",
          "snippet": "const vessels = vesselListQuery.data?.vessels || [];"
        },
        {
          "file": "src/app/cellar/page.tsx",
          "line": 699,
          "context": "schema",
          "snippet": "const vessels = vesselListQuery.data?.vessels || [];"
        },
        {
          "file": "src/app/cellar/page.tsx",
          "line": 806,
          "context": "schema",
          "snippet": "const liquidMapVessel = liquidMapQuery.data?.vessels.find("
        },
        {
          "file": "src/app/cellar/page.tsx",
          "line": 837,
          "context": "schema",
          "snippet": "const liquidMapVessel = liquidMapQuery.data?.vessels.find("
        },
        {
          "file": "src/app/cellar/page.tsx",
          "line": 853,
          "context": "schema",
          "snippet": "const vessel = vesselListQuery.data?.vessels?.find("
        },
        {
          "file": "src/app/cellar/page.tsx",
          "line": 856,
          "context": "schema",
          "snippet": "const liquidMapVessel = liquidMapQuery.data?.vessels.find("
        },
        {
          "file": "src/app/cellar/page.tsx",
          "line": 905,
          "context": "schema",
          "snippet": "<p>Loading vessels...</p>"
        },
        {
          "file": "src/app/cellar/page.tsx",
          "line": 921,
          "context": "schema",
          "snippet": "Overview of all fermentation and storage vessels"
        },
        {
          "file": "src/app/cellar/page.tsx",
          "line": 945,
          "context": "schema",
          "snippet": "{vessels.map((vessel) => {"
        },
        {
          "file": "src/app/cellar/page.tsx",
          "line": 946,
          "context": "schema",
          "snippet": "const liquidMapVessel = liquidMapQuery.data?.vessels.find("
        },
        {
          "file": "src/app/cellar/page.tsx",
          "line": 1509,
          "context": "schema",
          "snippet": "const [activeTab, setActiveTab] = useState<\"vessels\" | \"batches\">(\"vessels\");"
        },
        {
          "file": "src/app/cellar/page.tsx",
          "line": 1509,
          "context": "schema",
          "snippet": "const [activeTab, setActiveTab] = useState<\"vessels\" | \"batches\">(\"vessels\");"
        },
        {
          "file": "src/app/cellar/page.tsx",
          "line": 1519,
          "context": "schema",
          "snippet": "Monitor fermentation vessels, track batch progress, and record"
        },
        {
          "file": "src/app/cellar/page.tsx",
          "line": 1527,
          "context": "schema",
          "snippet": "{ key: \"vessels\", label: \"Vessel Map\", icon: Beaker },"
        },
        {
          "file": "src/app/cellar/page.tsx",
          "line": 1550,
          "context": "schema",
          "snippet": "{activeTab === \"vessels\" && <VesselMap />}"
        },
        {
          "file": "src/app/admin/page.tsx",
          "line": 370,
          "context": "schema",
          "snippet": "\"varieties\" | \"vessels\" | \"locations\""
        },
        {
          "file": "src/app/pressing/[id]/complete/page.tsx",
          "line": 25,
          "context": "schema",
          "snippet": "window.location.href = `/fermentation/vessels/${vesselId}`;"
        },
        {
          "file": "packaging-optimized.ts",
          "line": 18,
          "context": "schema",
          "snippet": "vessels,"
        },
        {
          "file": "packaging-optimized.ts",
          "line": 200,
          "context": "schema",
          "snippet": "vesselName: vessels.name,"
        },
        {
          "file": "packaging-optimized.ts",
          "line": 205,
          "context": "schema",
          "snippet": ".leftJoin(vessels, eq(packagingRuns.vesselId, vessels.id))"
        },
        {
          "file": "packaging-optimized.ts",
          "line": 205,
          "context": "schema",
          "snippet": ".leftJoin(vessels, eq(packagingRuns.vesselId, vessels.id))"
        },
        {
          "file": "packaging-optimized.ts",
          "line": 311,
          "context": "schema",
          "snippet": "vesselName: vessels.name,"
        },
        {
          "file": "packaging-optimized.ts",
          "line": 316,
          "context": "schema",
          "snippet": ".leftJoin(vessels, eq(packagingRuns.vesselId, vessels.id))"
        },
        {
          "file": "packaging-optimized.ts",
          "line": 316,
          "context": "schema",
          "snippet": ".leftJoin(vessels, eq(packagingRuns.vesselId, vessels.id))"
        }
      ],
      "columns": []
    },
    {
      "name": "juiceLots",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [],
      "columns": []
    },
    {
      "name": "batches",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/pressRun.ts",
          "line": 14,
          "context": "schema",
          "snippet": "batches,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 757,
          "context": "query",
          "snippet": ".insert(batches)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 768,
          "context": "schema",
          "snippet": ".returning({ id: batches.id });"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 847,
          "context": "schema",
          "snippet": "// Complete press run and create batches - admin/operator only"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 884,
          "context": "schema",
          "snippet": "// Check if batches already exist for this press run"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 886,
          "context": "query",
          "snippet": ".select({ id: batches.id })"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 887,
          "context": "import",
          "snippet": ".from(batches)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 888,
          "context": "schema",
          "snippet": ".where(eq(batches.originPressRunId, input.pressRunId))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1019,
          "context": "schema",
          "snippet": "id: batches.id,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1020,
          "context": "schema",
          "snippet": "name: batches.name,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1021,
          "context": "schema",
          "snippet": "currentVolumeL: batches.currentVolumeL,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1023,
          "context": "import",
          "snippet": ".from(batches)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1026,
          "context": "schema",
          "snippet": "eq(batches.vesselId, assignment.toVesselId),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1027,
          "context": "schema",
          "snippet": "eq(batches.status, \"active\"),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1028,
          "context": "query",
          "snippet": "isNull(batches.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1150,
          "context": "query",
          "snippet": "// Create or update batches for each assignment"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1164,
          "context": "schema",
          "snippet": "id: batches.id,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1165,
          "context": "schema",
          "snippet": "name: batches.name,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1166,
          "context": "schema",
          "snippet": "currentVolumeL: batches.currentVolumeL,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1167,
          "context": "schema",
          "snippet": "initialVolumeL: batches.initialVolumeL,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1169,
          "context": "import",
          "snippet": ".from(batches)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1172,
          "context": "schema",
          "snippet": "eq(batches.vesselId, assignment.toVesselId),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1173,
          "context": "schema",
          "snippet": "eq(batches.status, \"active\"),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1174,
          "context": "query",
          "snippet": "isNull(batches.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1193,
          "context": "query",
          "snippet": ".update(batches)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1198,
          "context": "schema",
          "snippet": ".where(eq(batches.id, batchId));"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1232,
          "context": "query",
          "snippet": ".insert(batches)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1243,
          "context": "schema",
          "snippet": ".returning({ id: batches.id });"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1473,
          "context": "schema",
          "snippet": "\"batches\","
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1500,
          "context": "schema",
          "snippet": "message: `Press run completed with ${createdBatchIds.length} batches created`,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 757,
          "context": "query",
          "snippet": ".insert(batches)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1232,
          "context": "query",
          "snippet": ".insert(batches)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1193,
          "context": "query",
          "snippet": ".update(batches)"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 7,
          "context": "schema",
          "snippet": "batches,"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 131,
          "context": "schema",
          "snippet": "id: batches.id,"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 132,
          "context": "schema",
          "snippet": "name: batches.name,"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 133,
          "context": "schema",
          "snippet": "currentVolumeL: batches.currentVolumeL,"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 134,
          "context": "schema",
          "snippet": "vesselId: batches.vesselId,"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 136,
          "context": "import",
          "snippet": ".from(batches)"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 139,
          "context": "schema",
          "snippet": "eq(batches.id, input.batchId),"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 140,
          "context": "schema",
          "snippet": "eq(batches.vesselId, input.vesselId),"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 141,
          "context": "query",
          "snippet": "isNull(batches.deletedAt),"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 219,
          "context": "query",
          "snippet": ".update(batches)"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 224,
          "context": "schema",
          "snippet": ".where(eq(batches.id, input.batchId));"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 331,
          "context": "schema",
          "snippet": "batchName: batches.name,"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 338,
          "context": "schema",
          "snippet": ".leftJoin(batches, eq(packagingRuns.batchId, batches.id))"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 338,
          "context": "schema",
          "snippet": ".leftJoin(batches, eq(packagingRuns.batchId, batches.id))"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 718,
          "context": "schema",
          "snippet": "* Get packaging runs for specific batches (batch loading)"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 219,
          "context": "query",
          "snippet": ".update(batches)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 40,
          "context": "schema",
          "snippet": "batches,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1852,
          "context": "schema",
          "snippet": "id: batches.id,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1853,
          "context": "schema",
          "snippet": "batchNumber: batches.batchNumber,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1854,
          "context": "schema",
          "snippet": "status: batches.status,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1855,
          "context": "schema",
          "snippet": "vesselId: batches.vesselId,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1856,
          "context": "schema",
          "snippet": "startDate: batches.startDate,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1857,
          "context": "schema",
          "snippet": "endDate: batches.endDate,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1858,
          "context": "schema",
          "snippet": "initialVolumeL: batches.initialVolumeL,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1859,
          "context": "schema",
          "snippet": "currentVolumeL: batches.currentVolumeL,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1860,
          "context": "schema",
          "snippet": "createdAt: batches.createdAt,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1862,
          "context": "import",
          "snippet": ".from(batches)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1863,
          "context": "query",
          "snippet": ".where(isNull(batches.deletedAt))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1864,
          "context": "schema",
          "snippet": ".orderBy(desc(batches.startDate), desc(batches.createdAt));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1864,
          "context": "schema",
          "snippet": ".orderBy(desc(batches.startDate), desc(batches.createdAt));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1867,
          "context": "schema",
          "snippet": "batches: batchList,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1871,
          "context": "schema",
          "snippet": "console.error(\"Error listing batches:\", error);"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1874,
          "context": "schema",
          "snippet": "message: \"Failed to list batches\","
        },
        {
          "file": "src/routers/index.ts",
          "line": 1978,
          "context": "query",
          "snippet": ".insert(batches)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2021,
          "context": "schema",
          "snippet": "\"batches\","
        },
        {
          "file": "src/routers/index.ts",
          "line": 2072,
          "context": "import",
          "snippet": ".from(batches)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2074,
          "context": "query",
          "snippet": "and(eq(batches.id, input.batchId), isNull(batches.deletedAt)),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2074,
          "context": "query",
          "snippet": "and(eq(batches.id, input.batchId), isNull(batches.deletedAt)),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2117,
          "context": "query",
          "snippet": ".update(batches)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2119,
          "context": "schema",
          "snippet": ".where(eq(batches.id, input.batchId));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2167,
          "context": "import",
          "snippet": ".from(batches)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2169,
          "context": "query",
          "snippet": "and(eq(batches.id, input.batchId), isNull(batches.deletedAt)),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2169,
          "context": "query",
          "snippet": "and(eq(batches.id, input.batchId), isNull(batches.deletedAt)),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2225,
          "context": "query",
          "snippet": ".update(batches)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2231,
          "context": "schema",
          "snippet": ".where(eq(batches.id, input.batchId))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2256,
          "context": "schema",
          "snippet": "\"batches\","
        },
        {
          "file": "src/routers/index.ts",
          "line": 2289,
          "context": "import",
          "snippet": ".from(batches)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2290,
          "context": "query",
          "snippet": ".where(and(eq(batches.id, input.id), isNull(batches.deletedAt)))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2290,
          "context": "query",
          "snippet": ".where(and(eq(batches.id, input.id), isNull(batches.deletedAt)))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2368,
          "context": "schema",
          "snippet": "// Get all vessels with their current active batches"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2379,
          "context": "schema",
          "snippet": "batchId: batches.id,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2380,
          "context": "schema",
          "snippet": "batchName: batches.name,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2381,
          "context": "schema",
          "snippet": "currentVolumeL: batches.currentVolumeL,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2382,
          "context": "schema",
          "snippet": "batchStatus: batches.status,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2386,
          "context": "schema",
          "snippet": "batches,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2388,
          "context": "schema",
          "snippet": "eq(vessels.id, batches.vesselId),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2389,
          "context": "schema",
          "snippet": "eq(batches.status, \"active\"),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2390,
          "context": "query",
          "snippet": "isNull(batches.deletedAt),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2430,
          "context": "schema",
          "snippet": "console.error(\"Error listing vessels with batches:\", error);"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2711,
          "context": "schema",
          "snippet": "// Get vessels with their current batches and apple press runs"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2720,
          "context": "schema",
          "snippet": "batchId: batches.id,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2721,
          "context": "schema",
          "snippet": "batchNumber: batches.batchNumber,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2722,
          "context": "schema",
          "snippet": "batchStatus: batches.status,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2723,
          "context": "schema",
          "snippet": "currentVolumeL: batches.currentVolumeL,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2724,
          "context": "schema",
          "snippet": "batchCustomName: batches.customName,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2731,
          "context": "schema",
          "snippet": "batches,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2733,
          "context": "schema",
          "snippet": "eq(batches.vesselId, vessels.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2734,
          "context": "query",
          "snippet": "isNull(batches.deletedAt),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2735,
          "context": "schema",
          "snippet": "eq(batches.status, \"active\"),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2791,
          "context": "import",
          "snippet": "// Calculate total liquid in cellar from both batches and apple press runs"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2905,
          "context": "import",
          "snippet": ".from(batches)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2908,
          "context": "import",
          "snippet": "eq(batches.vesselId, input.fromVesselId),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2909,
          "context": "schema",
          "snippet": "eq(batches.status, \"active\"),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2910,
          "context": "query",
          "snippet": "isNull(batches.deletedAt),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2941,
          "context": "query",
          "snippet": ".insert(batches)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2961,
          "context": "schema",
          "snippet": "\"batches\","
        },
        {
          "file": "src/routers/index.ts",
          "line": 2985,
          "context": "query",
          "snippet": ".update(batches)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2991,
          "context": "schema",
          "snippet": ".where(eq(batches.id, sourceBatch[0].id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3005,
          "context": "schema",
          "snippet": "\"batches\","
        },
        {
          "file": "src/routers/index.ts",
          "line": 3093,
          "context": "schema",
          "snippet": "const sb = aliasedTable(batches, \"sb\");"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3094,
          "context": "schema",
          "snippet": "const db_alias = aliasedTable(batches, \"db\");"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3095,
          "context": "schema",
          "snippet": "const rb = aliasedTable(batches, \"rb\");"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3166,
          "context": "import",
          "snippet": ".from(batches)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3169,
          "context": "schema",
          "snippet": "eq(batches.vesselId, input.vesselId),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3170,
          "context": "schema",
          "snippet": "eq(batches.status, \"active\"),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3171,
          "context": "query",
          "snippet": "isNull(batches.deletedAt),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3198,
          "context": "query",
          "snippet": ".update(batches)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3203,
          "context": "schema",
          "snippet": ".where(eq(batches.id, activeBatch[0].id));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3207,
          "context": "schema",
          "snippet": "\"batches\","
        },
        {
          "file": "src/routers/index.ts",
          "line": 3272,
          "context": "schema",
          "snippet": "batches: [] as Array<{"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3292,
          "context": "schema",
          "snippet": "batchNumber: batches.batchNumber,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3293,
          "context": "schema",
          "snippet": "batchStatus: batches.status,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3302,
          "context": "schema",
          "snippet": "initialVolumeL: batches.initialVolumeL,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3303,
          "context": "schema",
          "snippet": "currentVolumeL: batches.currentVolumeL,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3306,
          "context": "schema",
          "snippet": ".leftJoin(batches, eq(batches.id, batchCosts.batchId))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3306,
          "context": "schema",
          "snippet": ".leftJoin(batches, eq(batches.id, batchCosts.batchId))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3307,
          "context": "query",
          "snippet": ".where(and(isNull(batchCosts.deletedAt), isNull(batches.deletedAt)))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3335,
          "context": "schema",
          "snippet": "batches: batchCostData.map(batch => ({"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3356,
          "context": "import",
          "snippet": ".from(batches)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3358,
          "context": "query",
          "snippet": "and(eq(batches.id, input.batchId), isNull(batches.deletedAt)),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3358,
          "context": "query",
          "snippet": "and(eq(batches.id, input.batchId), isNull(batches.deletedAt)),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1978,
          "context": "query",
          "snippet": ".insert(batches)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2941,
          "context": "query",
          "snippet": ".insert(batches)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2117,
          "context": "query",
          "snippet": ".update(batches)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2225,
          "context": "query",
          "snippet": ".update(batches)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2985,
          "context": "query",
          "snippet": ".update(batches)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3198,
          "context": "query",
          "snippet": ".update(batches)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 5,
          "context": "schema",
          "snippet": "batches,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 92,
          "context": "query",
          "snippet": ".select({ id: batches.id })"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 93,
          "context": "import",
          "snippet": ".from(batches)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 94,
          "context": "query",
          "snippet": ".where(and(eq(batches.id, input.batchId), isNull(batches.deletedAt)))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 94,
          "context": "query",
          "snippet": ".where(and(eq(batches.id, input.batchId), isNull(batches.deletedAt)))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 162,
          "context": "schema",
          "snippet": "id: batches.id,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 163,
          "context": "schema",
          "snippet": "name: batches.name,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 164,
          "context": "schema",
          "snippet": "status: batches.status,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 165,
          "context": "schema",
          "snippet": "vesselId: batches.vesselId,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 167,
          "context": "schema",
          "snippet": "startDate: batches.startDate,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 168,
          "context": "schema",
          "snippet": "endDate: batches.endDate,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 169,
          "context": "schema",
          "snippet": "originPressRunId: batches.originPressRunId,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 170,
          "context": "schema",
          "snippet": "createdAt: batches.createdAt,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 171,
          "context": "query",
          "snippet": "updatedAt: batches.updatedAt,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 173,
          "context": "import",
          "snippet": ".from(batches)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 174,
          "context": "schema",
          "snippet": ".leftJoin(vessels, eq(batches.vesselId, vessels.id))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 175,
          "context": "query",
          "snippet": ".where(and(eq(batches.id, input.batchId), isNull(batches.deletedAt)))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 175,
          "context": "query",
          "snippet": ".where(and(eq(batches.id, input.batchId), isNull(batches.deletedAt)))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 210,
          "context": "schema",
          "snippet": "* List all batches with filtering and pagination"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 219,
          "context": "query",
          "snippet": "// Only exclude deleted batches if includeDeleted is false"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 221,
          "context": "query",
          "snippet": "conditions.push(isNull(batches.deletedAt));"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 225,
          "context": "schema",
          "snippet": "conditions.push(eq(batches.status, input.status));"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 229,
          "context": "schema",
          "snippet": "conditions.push(eq(batches.vesselId, input.vesselId));"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 233,
          "context": "schema",
          "snippet": "conditions.push(like(batches.name, `%${input.search}%`));"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 238,
          "context": "schema",
          "snippet": "name: batches.name,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 239,
          "context": "schema",
          "snippet": "startDate: sql`COALESCE(${applePressRuns.endTime}, ${batches.startDate})`,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 240,
          "context": "schema",
          "snippet": "status: batches.status,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 246,
          "context": "schema",
          "snippet": "// Query batches with vessel info and press run completion date"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 249,
          "context": "schema",
          "snippet": "id: batches.id,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 250,
          "context": "schema",
          "snippet": "name: batches.name,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 251,
          "context": "schema",
          "snippet": "customName: batches.customName,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 252,
          "context": "schema",
          "snippet": "status: batches.status,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 253,
          "context": "schema",
          "snippet": "vesselId: batches.vesselId,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 256,
          "context": "schema",
          "snippet": "currentVolumeL: batches.currentVolumeL,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 258,
          "context": "schema",
          "snippet": "sql<string>`COALESCE(${applePressRuns.endTime}, ${batches.startDate})`.as("
        },
        {
          "file": "src/routers/batch.ts",
          "line": 261,
          "context": "schema",
          "snippet": "endDate: batches.endDate,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 262,
          "context": "schema",
          "snippet": "originPressRunId: batches.originPressRunId,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 263,
          "context": "schema",
          "snippet": "createdAt: batches.createdAt,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 264,
          "context": "query",
          "snippet": "updatedAt: batches.updatedAt,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 265,
          "context": "query",
          "snippet": "deletedAt: batches.deletedAt,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 267,
          "context": "import",
          "snippet": ".from(batches)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 268,
          "context": "schema",
          "snippet": ".leftJoin(vessels, eq(batches.vesselId, vessels.id))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 271,
          "context": "schema",
          "snippet": "eq(batches.originPressRunId, applePressRuns.id),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 281,
          "context": "import",
          "snippet": ".from(batches)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 352,
          "context": "schema",
          "snippet": "batches: enhancedBatches,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 361,
          "context": "schema",
          "snippet": "console.error(\"Error listing batches:\", error);"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 364,
          "context": "schema",
          "snippet": "message: \"Failed to list batches\","
        },
        {
          "file": "src/routers/batch.ts",
          "line": 379,
          "context": "schema",
          "snippet": "id: batches.id,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 380,
          "context": "schema",
          "snippet": "name: batches.name,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 381,
          "context": "schema",
          "snippet": "status: batches.status,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 382,
          "context": "schema",
          "snippet": "vesselId: batches.vesselId,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 384,
          "context": "schema",
          "snippet": "startDate: batches.startDate,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 385,
          "context": "schema",
          "snippet": "endDate: batches.endDate,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 386,
          "context": "schema",
          "snippet": "originPressRunId: batches.originPressRunId,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 388,
          "context": "import",
          "snippet": ".from(batches)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 389,
          "context": "schema",
          "snippet": ".leftJoin(vessels, eq(batches.vesselId, vessels.id))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 390,
          "context": "query",
          "snippet": ".where(and(eq(batches.id, input.batchId), isNull(batches.deletedAt)))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 390,
          "context": "query",
          "snippet": ".where(and(eq(batches.id, input.batchId), isNull(batches.deletedAt)))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 543,
          "context": "query",
          "snippet": ".select({ id: batches.id })"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 544,
          "context": "import",
          "snippet": ".from(batches)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 545,
          "context": "query",
          "snippet": ".where(and(eq(batches.id, input.batchId), isNull(batches.deletedAt)))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 545,
          "context": "query",
          "snippet": ".where(and(eq(batches.id, input.batchId), isNull(batches.deletedAt)))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 597,
          "context": "schema",
          "snippet": "id: batches.id,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 598,
          "context": "schema",
          "snippet": "vesselId: batches.vesselId,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 600,
          "context": "import",
          "snippet": ".from(batches)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 601,
          "context": "query",
          "snippet": ".where(and(eq(batches.id, input.batchId), isNull(batches.deletedAt)))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 601,
          "context": "query",
          "snippet": ".where(and(eq(batches.id, input.batchId), isNull(batches.deletedAt)))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 658,
          "context": "import",
          "snippet": ".from(batches)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 659,
          "context": "query",
          "snippet": ".where(and(eq(batches.id, input.batchId), isNull(batches.deletedAt)))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 659,
          "context": "query",
          "snippet": ".where(and(eq(batches.id, input.batchId), isNull(batches.deletedAt)))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 682,
          "context": "query",
          "snippet": ".update(batches)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 684,
          "context": "schema",
          "snippet": ".where(eq(batches.id, input.batchId))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 711,
          "context": "query",
          "snippet": ".select({ status: batches.status, vesselId: batches.vesselId })"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 711,
          "context": "query",
          "snippet": ".select({ status: batches.status, vesselId: batches.vesselId })"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 712,
          "context": "import",
          "snippet": ".from(batches)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 713,
          "context": "query",
          "snippet": ".where(and(eq(batches.id, input.batchId), isNull(batches.deletedAt)))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 713,
          "context": "query",
          "snippet": ".where(and(eq(batches.id, input.batchId), isNull(batches.deletedAt)))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 727,
          "context": "query",
          "snippet": ".update(batches)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 732,
          "context": "schema",
          "snippet": ".where(eq(batches.id, input.batchId));"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 775,
          "context": "schema",
          "snippet": "id: batches.id,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 776,
          "context": "schema",
          "snippet": "name: batches.name,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 777,
          "context": "schema",
          "snippet": "createdAt: batches.startDate,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 778,
          "context": "schema",
          "snippet": "initialVolumeL: batches.initialVolumeL,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 779,
          "context": "schema",
          "snippet": "currentVolumeL: batches.currentVolumeL,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 780,
          "context": "schema",
          "snippet": "status: batches.status,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 781,
          "context": "schema",
          "snippet": "vesselId: batches.vesselId,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 783,
          "context": "schema",
          "snippet": "originPressRunId: batches.originPressRunId,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 786,
          "context": "import",
          "snippet": ".from(batches)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 787,
          "context": "schema",
          "snippet": ".leftJoin(vessels, eq(batches.vesselId, vessels.id))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 790,
          "context": "schema",
          "snippet": "eq(batches.originPressRunId, applePressRuns.id),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 792,
          "context": "schema",
          "snippet": ".where(eq(batches.id, input.batchId))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 957,
          "context": "schema",
          "snippet": "sql`batches AS source_batch`,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 961,
          "context": "schema",
          "snippet": "sql`batches AS dest_batch`,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 983,
          "context": "schema",
          "snippet": "// Check if this is a vessel move (same batch moved) or traditional transfer (different batches)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 1004,
          "context": "schema",
          "snippet": "// Traditional transfer: different batches involved"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 682,
          "context": "query",
          "snippet": ".update(batches)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 727,
          "context": "query",
          "snippet": ".update(batches)"
        },
        {
          "file": "src/components/cellar/BatchManagementTable.tsx",
          "line": 89,
          "context": "schema",
          "snippet": "// Fetch batches"
        },
        {
          "file": "src/components/cellar/BatchManagementTable.tsx",
          "line": 198,
          "context": "schema",
          "snippet": "<div className=\"text-center py-8\">Loading batches...</div>"
        },
        {
          "file": "src/components/cellar/BatchManagementTable.tsx",
          "line": 212,
          "context": "schema",
          "snippet": "Error loading batches: {error.message}"
        },
        {
          "file": "src/components/cellar/BatchManagementTable.tsx",
          "line": 219,
          "context": "schema",
          "snippet": "const batches = data?.batches || [];"
        },
        {
          "file": "src/components/cellar/BatchManagementTable.tsx",
          "line": 219,
          "context": "schema",
          "snippet": "const batches = data?.batches || [];"
        },
        {
          "file": "src/components/cellar/BatchManagementTable.tsx",
          "line": 232,
          "context": "schema",
          "snippet": "Track and manage all active fermentation batches"
        },
        {
          "file": "src/components/cellar/BatchManagementTable.tsx",
          "line": 243,
          "context": "schema",
          "snippet": "placeholder=\"Search batches...\""
        },
        {
          "file": "src/components/cellar/BatchManagementTable.tsx",
          "line": 282,
          "context": "schema",
          "snippet": "{batches.length === 0 ? ("
        },
        {
          "file": "src/components/cellar/BatchManagementTable.tsx",
          "line": 288,
          "context": "schema",
          "snippet": "No batches found"
        },
        {
          "file": "src/components/cellar/BatchManagementTable.tsx",
          "line": 292,
          "context": "schema",
          "snippet": "batches.map((batch) => ("
        },
        {
          "file": "src/components/cellar/BatchManagementTable.tsx",
          "line": 448,
          "context": "schema",
          "snippet": "Showing {batches.length} of {data.pagination.total} batches"
        },
        {
          "file": "src/components/cellar/BatchManagementTable.tsx",
          "line": 448,
          "context": "schema",
          "snippet": "Showing {batches.length} of {data.pagination.total} batches"
        },
        {
          "file": "src/components/pressing/press-run-completion.tsx",
          "line": 300,
          "context": "schema",
          "snippet": "Creating batches and assigning to vessels..."
        },
        {
          "file": "src/components/pressing/press-run-completion-success.tsx",
          "line": 187,
          "context": "schema",
          "snippet": "(window.location.href = `/batches/${batchId}`)"
        },
        {
          "file": "src/components/pressing/press-run-completion-success.tsx",
          "line": 262,
          "context": "schema",
          "snippet": "onClick={() => (window.location.href = \"/batches\")}"
        },
        {
          "file": "src/app/reports/page.tsx",
          "line": 71,
          "context": "schema",
          "snippet": "const { data: batches, isLoading: batchesLoading } ="
        },
        {
          "file": "src/app/reports/page.tsx",
          "line": 135,
          "context": "schema",
          "snippet": "const batchList = batches?.batches || [];"
        },
        {
          "file": "src/app/reports/page.tsx",
          "line": 135,
          "context": "schema",
          "snippet": "const batchList = batches?.batches || [];"
        },
        {
          "file": "src/app/dashboard/page.tsx",
          "line": 679,
          "context": "schema",
          "snippet": "if (!cogsData?.batches) return;"
        },
        {
          "file": "src/app/dashboard/page.tsx",
          "line": 695,
          "context": "schema",
          "snippet": "const rows = cogsData.batches.map((batch) => ["
        },
        {
          "file": "src/app/dashboard/page.tsx",
          "line": 723,
          "context": "schema",
          "snippet": "if (!cogsData?.batches) return;"
        },
        {
          "file": "src/app/dashboard/page.tsx",
          "line": 768,
          "context": "schema",
          "snippet": "{cogsData.batches.map((batch, index) => ("
        },
        {
          "file": "src/app/dashboard/page.tsx",
          "line": 803,
          "context": "schema",
          "snippet": "Total Batches: {cogsData.batches.length}"
        },
        {
          "file": "src/app/dashboard/page.tsx",
          "line": 931,
          "context": "schema",
          "snippet": "const batches = cogsData?.batches || [];"
        },
        {
          "file": "src/app/dashboard/page.tsx",
          "line": 931,
          "context": "schema",
          "snippet": "const batches = cogsData?.batches || [];"
        },
        {
          "file": "src/app/dashboard/page.tsx",
          "line": 943,
          "context": "schema",
          "snippet": "Cost breakdown for {batches.length} batches"
        },
        {
          "file": "src/app/dashboard/page.tsx",
          "line": 943,
          "context": "schema",
          "snippet": "Cost breakdown for {batches.length} batches"
        },
        {
          "file": "src/app/dashboard/page.tsx",
          "line": 981,
          "context": "schema",
          "snippet": "{batches.map((batch) => ("
        },
        {
          "file": "src/app/dashboard/page.tsx",
          "line": 1027,
          "context": "schema",
          "snippet": "{batches.length === 0 && ("
        },
        {
          "file": "src/app/dashboard/page.tsx",
          "line": 1032,
          "context": "schema",
          "snippet": "Cost calculations will appear here once batches are processed"
        },
        {
          "file": "src/app/dashboard/page.tsx",
          "line": 1195,
          "context": "schema",
          "snippet": "Monitor your current fermentation batches"
        },
        {
          "file": "src/app/cellar/page.tsx",
          "line": 405,
          "context": "schema",
          "snippet": "Additives can only be added to vessels with active batches."
        },
        {
          "file": "src/app/cellar/page.tsx",
          "line": 1509,
          "context": "schema",
          "snippet": "const [activeTab, setActiveTab] = useState<\"vessels\" | \"batches\">(\"vessels\");"
        },
        {
          "file": "src/app/cellar/page.tsx",
          "line": 1528,
          "context": "schema",
          "snippet": "{ key: \"batches\", label: \"Batch Details\", icon: Activity },"
        },
        {
          "file": "src/app/cellar/page.tsx",
          "line": 1551,
          "context": "schema",
          "snippet": "{activeTab === \"batches\" && <BatchDetails />}"
        },
        {
          "file": "src/app/admin/batches/page.tsx",
          "line": 48,
          "context": "schema",
          "snippet": "// Get all batches (active only by default)"
        },
        {
          "file": "src/app/admin/batches/page.tsx",
          "line": 116,
          "context": "schema",
          "snippet": "const batches = batchesData?.batches || [];"
        },
        {
          "file": "src/app/admin/batches/page.tsx",
          "line": 116,
          "context": "schema",
          "snippet": "const batches = batchesData?.batches || [];"
        },
        {
          "file": "src/app/admin/batches/page.tsx",
          "line": 144,
          "context": "schema",
          "snippet": "Delete accidentally created batches"
        },
        {
          "file": "src/app/admin/batches/page.tsx",
          "line": 152,
          "context": "query",
          "snippet": "<CardDescription>Select batches to delete</CardDescription>"
        },
        {
          "file": "src/app/admin/batches/page.tsx",
          "line": 157,
          "context": "schema",
          "snippet": "Loading batches..."
        },
        {
          "file": "src/app/admin/batches/page.tsx",
          "line": 159,
          "context": "schema",
          "snippet": ") : batches.length === 0 ? ("
        },
        {
          "file": "src/app/admin/batches/page.tsx",
          "line": 161,
          "context": "schema",
          "snippet": "No batches found"
        },
        {
          "file": "src/app/admin/batches/page.tsx",
          "line": 177,
          "context": "schema",
          "snippet": "{batches.map((batch) => ("
        },
        {
          "file": "packaging-optimized.ts",
          "line": 17,
          "context": "schema",
          "snippet": "batches,"
        },
        {
          "file": "packaging-optimized.ts",
          "line": 199,
          "context": "schema",
          "snippet": "batchName: batches.name,"
        },
        {
          "file": "packaging-optimized.ts",
          "line": 204,
          "context": "schema",
          "snippet": ".leftJoin(batches, eq(packagingRuns.batchId, batches.id))"
        },
        {
          "file": "packaging-optimized.ts",
          "line": 204,
          "context": "schema",
          "snippet": ".leftJoin(batches, eq(packagingRuns.batchId, batches.id))"
        },
        {
          "file": "packaging-optimized.ts",
          "line": 213,
          "context": "schema",
          "snippet": "conditions.push(like(batches.name, `%${filters.batchSearch}%`));"
        },
        {
          "file": "packaging-optimized.ts",
          "line": 234,
          "context": "schema",
          "snippet": "batches,"
        },
        {
          "file": "packaging-optimized.ts",
          "line": 235,
          "context": "schema",
          "snippet": "eq(packagingRuns.batchId, batches.id),"
        },
        {
          "file": "packaging-optimized.ts",
          "line": 310,
          "context": "schema",
          "snippet": "batchName: batches.name,"
        },
        {
          "file": "packaging-optimized.ts",
          "line": 315,
          "context": "schema",
          "snippet": ".leftJoin(batches, eq(packagingRuns.batchId, batches.id))"
        },
        {
          "file": "packaging-optimized.ts",
          "line": 315,
          "context": "schema",
          "snippet": ".leftJoin(batches, eq(packagingRuns.batchId, batches.id))"
        }
      ],
      "columns": []
    },
    {
      "name": "batchCompositions",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/pressRun.ts",
          "line": 15,
          "context": "schema",
          "snippet": "batchCompositions,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 752,
          "context": "schema",
          "snippet": "batchCompositions: batchCompositionData,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 798,
          "context": "query",
          "snippet": "await tx.insert(batchCompositions).values({"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1227,
          "context": "schema",
          "snippet": "batchCompositions: batchCompositionData,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1310,
          "context": "import",
          "snippet": ".from(batchCompositions)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1313,
          "context": "schema",
          "snippet": "eq(batchCompositions.batchId, batchId),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1314,
          "context": "query",
          "snippet": "isNull(batchCompositions.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1326,
          "context": "query",
          "snippet": ".update(batchCompositions)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1331,
          "context": "schema",
          "snippet": ".where(eq(batchCompositions.id, existingComp.id));"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1380,
          "context": "query",
          "snippet": ".update(batchCompositions)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1390,
          "context": "schema",
          "snippet": ".where(eq(batchCompositions.id, existingPurchaseComp.id));"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1393,
          "context": "query",
          "snippet": "await tx.insert(batchCompositions).values({"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1443,
          "context": "query",
          "snippet": "await tx.insert(batchCompositions).values({"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 798,
          "context": "query",
          "snippet": "await tx.insert(batchCompositions).values({"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1393,
          "context": "query",
          "snippet": "await tx.insert(batchCompositions).values({"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1443,
          "context": "query",
          "snippet": "await tx.insert(batchCompositions).values({"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1326,
          "context": "query",
          "snippet": ".update(batchCompositions)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1380,
          "context": "query",
          "snippet": ".update(batchCompositions)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 41,
          "context": "schema",
          "snippet": "batchCompositions,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2000,
          "context": "query",
          "snippet": "//   .insert(batchCompositions)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2302,
          "context": "import",
          "snippet": ".from(batchCompositions)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2305,
          "context": "schema",
          "snippet": "eq(batchCompositions.batchId, input.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2306,
          "context": "query",
          "snippet": "isNull(batchCompositions.deletedAt),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2000,
          "context": "query",
          "snippet": "//   .insert(batchCompositions)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 6,
          "context": "schema",
          "snippet": "batchCompositions,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 109,
          "context": "schema",
          "snippet": "lotCode: batchCompositions.lotCode,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 110,
          "context": "schema",
          "snippet": "inputWeightKg: batchCompositions.inputWeightKg,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 111,
          "context": "schema",
          "snippet": "juiceVolumeL: batchCompositions.juiceVolumeL,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 112,
          "context": "schema",
          "snippet": "fractionOfBatch: batchCompositions.fractionOfBatch,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 113,
          "context": "schema",
          "snippet": "materialCost: batchCompositions.materialCost,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 114,
          "context": "schema",
          "snippet": "avgBrix: batchCompositions.avgBrix,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 116,
          "context": "import",
          "snippet": ".from(batchCompositions)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 117,
          "context": "schema",
          "snippet": ".innerJoin(vendors, eq(batchCompositions.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 120,
          "context": "schema",
          "snippet": "eq(batchCompositions.varietyId, baseFruitVarieties.id),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 124,
          "context": "schema",
          "snippet": "eq(batchCompositions.batchId, input.batchId),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 125,
          "context": "query",
          "snippet": "isNull(batchCompositions.deletedAt),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 128,
          "context": "schema",
          "snippet": ".orderBy(batchCompositions.fractionOfBatch); // Order by fraction for consistent display"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 407,
          "context": "schema",
          "snippet": "inputWeightKg: batchCompositions.inputWeightKg,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 408,
          "context": "schema",
          "snippet": "juiceVolumeL: batchCompositions.juiceVolumeL,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 409,
          "context": "schema",
          "snippet": "fractionOfBatch: batchCompositions.fractionOfBatch,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 410,
          "context": "schema",
          "snippet": "materialCost: batchCompositions.materialCost,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 411,
          "context": "schema",
          "snippet": "avgBrix: batchCompositions.avgBrix,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 413,
          "context": "import",
          "snippet": ".from(batchCompositions)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 414,
          "context": "schema",
          "snippet": ".innerJoin(vendors, eq(batchCompositions.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 417,
          "context": "schema",
          "snippet": "eq(batchCompositions.varietyId, baseFruitVarieties.id),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 421,
          "context": "schema",
          "snippet": "eq(batchCompositions.batchId, input.batchId),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 422,
          "context": "query",
          "snippet": "isNull(batchCompositions.deletedAt),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 425,
          "context": "schema",
          "snippet": ".orderBy(desc(batchCompositions.fractionOfBatch));"
        }
      ],
      "columns": []
    },
    {
      "name": "batchMeasurements",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/index.ts",
          "line": 42,
          "context": "schema",
          "snippet": "batchMeasurements,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2086,
          "context": "query",
          "snippet": ".insert(batchMeasurements)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2312,
          "context": "import",
          "snippet": ".from(batchMeasurements)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2315,
          "context": "schema",
          "snippet": "eq(batchMeasurements.batchId, input.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2316,
          "context": "query",
          "snippet": "isNull(batchMeasurements.deletedAt),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2319,
          "context": "schema",
          "snippet": ".orderBy(desc(batchMeasurements.measurementDate));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2758,
          "context": "schema",
          "snippet": "batchId: batchMeasurements.batchId,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2759,
          "context": "schema",
          "snippet": "specificGravity: batchMeasurements.specificGravity,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2760,
          "context": "schema",
          "snippet": "ph: batchMeasurements.ph,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2761,
          "context": "schema",
          "snippet": "temperature: batchMeasurements.temperature,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2762,
          "context": "schema",
          "snippet": "measurementDate: batchMeasurements.measurementDate,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2764,
          "context": "import",
          "snippet": ".from(batchMeasurements)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2767,
          "context": "schema",
          "snippet": "inArray(batchMeasurements.batchId, batchIds),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2768,
          "context": "query",
          "snippet": "isNull(batchMeasurements.deletedAt),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2771,
          "context": "schema",
          "snippet": ".orderBy(desc(batchMeasurements.measurementDate));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2086,
          "context": "query",
          "snippet": ".insert(batchMeasurements)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 11,
          "context": "schema",
          "snippet": "batchMeasurements,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 293,
          "context": "schema",
          "snippet": "batchId: batchMeasurements.batchId,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 294,
          "context": "schema",
          "snippet": "volumeL: batchMeasurements.volumeL,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 295,
          "context": "schema",
          "snippet": "specificGravity: batchMeasurements.specificGravity,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 296,
          "context": "schema",
          "snippet": "ph: batchMeasurements.ph,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 297,
          "context": "schema",
          "snippet": "temperature: batchMeasurements.temperature,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 298,
          "context": "schema",
          "snippet": "measurementDate: batchMeasurements.measurementDate,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 300,
          "context": "import",
          "snippet": ".from(batchMeasurements)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 303,
          "context": "schema",
          "snippet": "sql`${batchMeasurements.batchId} IN (${sql.join("
        },
        {
          "file": "src/routers/batch.ts",
          "line": 307,
          "context": "query",
          "snippet": "isNull(batchMeasurements.deletedAt),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 310,
          "context": "schema",
          "snippet": ".orderBy(desc(batchMeasurements.measurementDate));"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 430,
          "context": "schema",
          "snippet": "id: batchMeasurements.id,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 431,
          "context": "schema",
          "snippet": "measurementDate: batchMeasurements.measurementDate,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 432,
          "context": "schema",
          "snippet": "specificGravity: batchMeasurements.specificGravity,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 433,
          "context": "schema",
          "snippet": "abv: batchMeasurements.abv,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 434,
          "context": "schema",
          "snippet": "ph: batchMeasurements.ph,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 435,
          "context": "schema",
          "snippet": "totalAcidity: batchMeasurements.totalAcidity,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 436,
          "context": "schema",
          "snippet": "temperature: batchMeasurements.temperature,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 437,
          "context": "schema",
          "snippet": "volumeL: batchMeasurements.volumeL,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 438,
          "context": "schema",
          "snippet": "notes: batchMeasurements.notes,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 439,
          "context": "schema",
          "snippet": "takenBy: batchMeasurements.takenBy,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 441,
          "context": "import",
          "snippet": ".from(batchMeasurements)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 444,
          "context": "schema",
          "snippet": "eq(batchMeasurements.batchId, input.batchId),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 445,
          "context": "query",
          "snippet": "isNull(batchMeasurements.deletedAt),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 448,
          "context": "schema",
          "snippet": ".orderBy(desc(batchMeasurements.measurementDate));"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 557,
          "context": "query",
          "snippet": ".insert(batchMeasurements)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 822,
          "context": "schema",
          "snippet": "id: batchMeasurements.id,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 823,
          "context": "schema",
          "snippet": "measurementDate: batchMeasurements.measurementDate,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 824,
          "context": "schema",
          "snippet": "specificGravity: batchMeasurements.specificGravity,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 825,
          "context": "schema",
          "snippet": "abv: batchMeasurements.abv,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 826,
          "context": "schema",
          "snippet": "ph: batchMeasurements.ph,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 827,
          "context": "schema",
          "snippet": "totalAcidity: batchMeasurements.totalAcidity,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 828,
          "context": "schema",
          "snippet": "temperature: batchMeasurements.temperature,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 829,
          "context": "schema",
          "snippet": "volumeL: batchMeasurements.volumeL,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 830,
          "context": "schema",
          "snippet": "notes: batchMeasurements.notes,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 831,
          "context": "schema",
          "snippet": "takenBy: batchMeasurements.takenBy,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 833,
          "context": "import",
          "snippet": ".from(batchMeasurements)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 836,
          "context": "schema",
          "snippet": "eq(batchMeasurements.batchId, input.batchId),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 837,
          "context": "query",
          "snippet": "isNull(batchMeasurements.deletedAt),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 557,
          "context": "query",
          "snippet": ".insert(batchMeasurements)"
        }
      ],
      "columns": []
    },
    {
      "name": "batchAdditives",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/batch.ts",
          "line": 12,
          "context": "schema",
          "snippet": "batchAdditives,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 453,
          "context": "schema",
          "snippet": "id: batchAdditives.id,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 454,
          "context": "schema",
          "snippet": "additiveType: batchAdditives.additiveType,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 455,
          "context": "schema",
          "snippet": "additiveName: batchAdditives.additiveName,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 456,
          "context": "schema",
          "snippet": "amount: batchAdditives.amount,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 457,
          "context": "schema",
          "snippet": "unit: batchAdditives.unit,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 458,
          "context": "schema",
          "snippet": "notes: batchAdditives.notes,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 459,
          "context": "schema",
          "snippet": "addedAt: batchAdditives.addedAt,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 460,
          "context": "schema",
          "snippet": "addedBy: batchAdditives.addedBy,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 462,
          "context": "import",
          "snippet": ".from(batchAdditives)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 465,
          "context": "schema",
          "snippet": "eq(batchAdditives.batchId, input.batchId),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 466,
          "context": "query",
          "snippet": "isNull(batchAdditives.deletedAt),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 469,
          "context": "schema",
          "snippet": ".orderBy(desc(batchAdditives.addedAt));"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 620,
          "context": "query",
          "snippet": ".insert(batchAdditives)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 868,
          "context": "schema",
          "snippet": "id: batchAdditives.id,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 869,
          "context": "schema",
          "snippet": "addedAt: batchAdditives.addedAt,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 870,
          "context": "schema",
          "snippet": "additiveType: batchAdditives.additiveType,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 871,
          "context": "schema",
          "snippet": "additiveName: batchAdditives.additiveName,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 872,
          "context": "schema",
          "snippet": "amount: batchAdditives.amount,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 873,
          "context": "schema",
          "snippet": "unit: batchAdditives.unit,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 874,
          "context": "schema",
          "snippet": "notes: batchAdditives.notes,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 875,
          "context": "schema",
          "snippet": "addedBy: batchAdditives.addedBy,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 877,
          "context": "import",
          "snippet": ".from(batchAdditives)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 880,
          "context": "schema",
          "snippet": "eq(batchAdditives.batchId, input.batchId),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 881,
          "context": "query",
          "snippet": "isNull(batchAdditives.deletedAt),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 620,
          "context": "query",
          "snippet": ".insert(batchAdditives)"
        }
      ],
      "columns": []
    },
    {
      "name": "packages",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/services/inventory.ts",
          "line": 6,
          "context": "schema",
          "snippet": "packages,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 7,
          "context": "schema",
          "snippet": "packages,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 44,
          "context": "schema",
          "snippet": "packages,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2785,
          "context": "schema",
          "snippet": "totalVolumeL: sql<number>`sum(${packages.volumePackagedL}::decimal * ${inventory.currentBottleCount}::decimal / ${packages.bottleCount}::decimal)`,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2785,
          "context": "schema",
          "snippet": "totalVolumeL: sql<number>`sum(${packages.volumePackagedL}::decimal * ${inventory.currentBottleCount}::decimal / ${packages.bottleCount}::decimal)`,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2788,
          "context": "schema",
          "snippet": ".leftJoin(packages, eq(packages.id, inventory.packageId))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2788,
          "context": "schema",
          "snippet": ".leftJoin(packages, eq(packages.id, inventory.packageId))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2789,
          "context": "query",
          "snippet": ".where(and(isNull(inventory.deletedAt), isNull(packages.deletedAt)));"
        },
        {
          "file": "src/services/pdf/PdfService.ts",
          "line": 61,
          "context": "schema",
          "snippet": "\"packages\","
        },
        {
          "file": "src/services/pdf/PdfService.ts",
          "line": 71,
          "context": "schema",
          "snippet": "\"packages\","
        },
        {
          "file": "src/services/pdf/PdfService.ts",
          "line": 85,
          "context": "schema",
          "snippet": "\"packages\","
        },
        {
          "file": "src/services/pdf/PdfService.ts",
          "line": 105,
          "context": "schema",
          "snippet": "\"/Users/benjaminwierzbanowski/Code/CideryManagementApp/packages/api/src/services/pdf/assets/logo.png\","
        },
        {
          "file": "src/components/packaging/bottle-modal.tsx",
          "line": 288,
          "context": "schema",
          "snippet": "placeholder=\"Number of packages filled\""
        },
        {
          "file": "src/components/packaging/bottle-modal.tsx",
          "line": 298,
          "context": "schema",
          "snippet": "Number of packages filled"
        }
      ],
      "columns": []
    },
    {
      "name": "inventory",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/services/inventory.ts",
          "line": 4,
          "context": "schema",
          "snippet": "inventory,"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 38,
          "context": "import",
          "snippet": "} from \"../types/inventory\";"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 87,
          "context": "schema",
          "snippet": "* Handles all inventory-related business logic and operations"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 319,
          "context": "import",
          "snippet": "message: \"Cannot create inventory from cancelled press run\","
        },
        {
          "file": "src/services/inventory.ts",
          "line": 370,
          "context": "schema",
          "snippet": "* Check if inventory levels are sufficient for transaction"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 379,
          "context": "schema",
          "snippet": "id: inventory.id,"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 380,
          "context": "schema",
          "snippet": "currentBottleCount: inventory.currentBottleCount,"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 381,
          "context": "schema",
          "snippet": "reservedBottleCount: inventory.reservedBottleCount,"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 383,
          "context": "import",
          "snippet": ".from(inventory)"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 384,
          "context": "query",
          "snippet": ".where(and(eq(inventory.id, inventoryId), isNull(inventory.deletedAt)))"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 384,
          "context": "query",
          "snippet": ".where(and(eq(inventory.id, inventoryId), isNull(inventory.deletedAt)))"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 397,
          "context": "schema",
          "snippet": "// Prevent negative inventory"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 401,
          "context": "schema",
          "snippet": "message: `Insufficient inventory. Current: ${currentLevel}, Requested change: ${quantityChange}`,"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 409,
          "context": "schema",
          "snippet": "message: `Cannot reduce inventory below reserved level. Reserved: ${inventoryItem[0].reservedBottleCount}, New level would be: ${newLevel}`,"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 417,
          "context": "schema",
          "snippet": "* Create a new inventory item with material-specific validation"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 450,
          "context": "schema",
          "snippet": "// TODO: Implement proper raw material inventory without package constraint"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 457,
          "context": "query",
          "snippet": "\"Package ID is required for inventory creation. Raw material inventory management needs schema updates.\","
        },
        {
          "file": "src/services/inventory.ts",
          "line": 457,
          "context": "query",
          "snippet": "\"Package ID is required for inventory creation. Raw material inventory management needs schema updates.\","
        },
        {
          "file": "src/services/inventory.ts",
          "line": 461,
          "context": "schema",
          "snippet": "// Create inventory item"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 463,
          "context": "query",
          "snippet": ".insert(inventory)"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 486,
          "context": "schema",
          "snippet": "reason: transaction.reason || \"Initial inventory creation\","
        },
        {
          "file": "src/services/inventory.ts",
          "line": 493,
          "context": "schema",
          "snippet": "\"inventory.created\","
        },
        {
          "file": "src/services/inventory.ts",
          "line": 504,
          "context": "schema",
          "snippet": "\"inventory.transaction\","
        },
        {
          "file": "src/services/inventory.ts",
          "line": 525,
          "context": "schema",
          "snippet": "console.error(\"Error creating inventory item:\", error);"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 528,
          "context": "schema",
          "snippet": "message: \"Failed to create inventory item\","
        },
        {
          "file": "src/services/inventory.ts",
          "line": 535,
          "context": "schema",
          "snippet": "* Record a transaction for existing inventory with comprehensive validation"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 543,
          "context": "schema",
          "snippet": "// Validate inventory levels and get current state"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 550,
          "context": "schema",
          "snippet": "// Get inventory item details for audit"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 553,
          "context": "import",
          "snippet": ".from(inventory)"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 554,
          "context": "schema",
          "snippet": ".where(eq(inventory.id, input.inventoryId))"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 570,
          "context": "schema",
          "snippet": "// Update inventory count"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 572,
          "context": "query",
          "snippet": ".update(inventory)"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 577,
          "context": "schema",
          "snippet": ".where(eq(inventory.id, input.inventoryId))"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 582,
          "context": "schema",
          "snippet": "\"inventory.transaction\","
        },
        {
          "file": "src/services/inventory.ts",
          "line": 603,
          "context": "schema",
          "snippet": "console.error(\"Error recording inventory transaction:\", error);"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 606,
          "context": "schema",
          "snippet": "message: \"Failed to record inventory transaction\","
        },
        {
          "file": "src/services/inventory.ts",
          "line": 624,
          "context": "schema",
          "snippet": "// Validate all inventory items exist and are at the specified location"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 627,
          "context": "import",
          "snippet": ".from(inventory)"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 630,
          "context": "schema",
          "snippet": "inArray(inventory.id, inventoryIds),"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 631,
          "context": "query",
          "snippet": "isNull(inventory.deletedAt),"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 632,
          "context": "import",
          "snippet": "eq(inventory.location, fromLocation),"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 640,
          "context": "schema",
          "snippet": "\"Some inventory items not found or not at the specified location\","
        },
        {
          "file": "src/services/inventory.ts",
          "line": 665,
          "context": "query",
          "snippet": ".update(inventory)"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 670,
          "context": "schema",
          "snippet": ".where(eq(inventory.id, item.id))"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 678,
          "context": "schema",
          "snippet": "\"inventory.transferred\","
        },
        {
          "file": "src/services/inventory.ts",
          "line": 717,
          "context": "schema",
          "snippet": "id: inventory.id,"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 718,
          "context": "schema",
          "snippet": "currentBottleCount: inventory.currentBottleCount,"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 719,
          "context": "schema",
          "snippet": "reservedBottleCount: inventory.reservedBottleCount,"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 720,
          "context": "schema",
          "snippet": "materialType: inventory.materialType,"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 721,
          "context": "schema",
          "snippet": "location: inventory.location,"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 722,
          "context": "schema",
          "snippet": "metadata: inventory.metadata,"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 724,
          "context": "import",
          "snippet": ".from(inventory)"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 725,
          "context": "query",
          "snippet": ".where(isNull(inventory.deletedAt));"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 729,
          "context": "schema",
          "snippet": "conditions.push(eq(inventory.materialType, materialType));"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 732,
          "context": "schema",
          "snippet": "conditions.push(eq(inventory.location, location));"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 774,
          "context": "schema",
          "snippet": "* Get transaction summary for inventory items"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 805,
          "context": "schema",
          "snippet": "// Group and summarize by inventory ID"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 855,
          "context": "schema",
          "snippet": "* Reserve inventory for upcoming operations"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 865,
          "context": "schema",
          "snippet": "// Get current inventory state"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 868,
          "context": "import",
          "snippet": ".from(inventory)"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 870,
          "context": "query",
          "snippet": "and(eq(inventory.id, inventoryId), isNull(inventory.deletedAt)),"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 870,
          "context": "query",
          "snippet": "and(eq(inventory.id, inventoryId), isNull(inventory.deletedAt)),"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 896,
          "context": "query",
          "snippet": ".update(inventory)"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 901,
          "context": "schema",
          "snippet": ".where(eq(inventory.id, inventoryId))"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 906,
          "context": "schema",
          "snippet": "\"inventory.reserved\","
        },
        {
          "file": "src/services/inventory.ts",
          "line": 928,
          "context": "schema",
          "snippet": "console.error(\"Error reserving inventory:\", error);"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 931,
          "context": "schema",
          "snippet": "message: \"Failed to reserve inventory\","
        },
        {
          "file": "src/services/inventory.ts",
          "line": 938,
          "context": "schema",
          "snippet": "* Release reserved inventory"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 948,
          "context": "schema",
          "snippet": "// Get current inventory state"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 951,
          "context": "import",
          "snippet": ".from(inventory)"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 953,
          "context": "query",
          "snippet": "and(eq(inventory.id, inventoryId), isNull(inventory.deletedAt)),"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 953,
          "context": "query",
          "snippet": "and(eq(inventory.id, inventoryId), isNull(inventory.deletedAt)),"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 977,
          "context": "query",
          "snippet": ".update(inventory)"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 982,
          "context": "schema",
          "snippet": ".where(eq(inventory.id, inventoryId))"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 987,
          "context": "schema",
          "snippet": "\"inventory.reservation_released\","
        },
        {
          "file": "src/services/inventory.ts",
          "line": 463,
          "context": "query",
          "snippet": ".insert(inventory)"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 572,
          "context": "query",
          "snippet": ".update(inventory)"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 665,
          "context": "query",
          "snippet": ".update(inventory)"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 896,
          "context": "query",
          "snippet": ".update(inventory)"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 977,
          "context": "query",
          "snippet": ".update(inventory)"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 53,
          "context": "schema",
          "snippet": "* Generates a lot code for inventory items"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 84,
          "context": "import",
          "snippet": "* Handles packaging operations from cellar to finished goods inventory"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 90,
          "context": "query",
          "snippet": "* Creates run, updates vessel volume, creates inventory"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 239,
          "context": "schema",
          "snippet": "// 6. Generate lot code and create inventory item"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 364,
          "context": "schema",
          "snippet": "// Get inventory items for this run (optimized)"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 366,
          "context": "schema",
          "snippet": "const inventory = inventoryMap.get(runId) || [];"
        },
        {
          "file": "src/routers/packaging.ts",
          "line": 394,
          "context": "schema",
          "snippet": "inventory,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 5,
          "context": "schema",
          "snippet": "inventory,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 35,
          "context": "import",
          "snippet": "} from \"../types/inventory\";"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 36,
          "context": "import",
          "snippet": "import { InventoryService } from \"../services/inventory\";"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 41,
          "context": "schema",
          "snippet": "// List inventory items - accessible by both admin and operator"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 45,
          "context": "schema",
          "snippet": "// TODO: Temporarily show purchase items as inventory until proper inventory system is ready"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 45,
          "context": "schema",
          "snippet": "// TODO: Temporarily show purchase items as inventory until proper inventory system is ready"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 49,
          "context": "schema",
          "snippet": "// Get all purchase items as unified inventory"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 217,
          "context": "schema",
          "snippet": "console.error(\"Error listing inventory (purchase items):\", error);"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 235,
          "context": "schema",
          "snippet": "//     id: inventory.id,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 236,
          "context": "schema",
          "snippet": "//     packageId: inventory.packageId,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 237,
          "context": "schema",
          "snippet": "//     currentBottleCount: inventory.currentBottleCount,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 238,
          "context": "schema",
          "snippet": "//     reservedBottleCount: inventory.reservedBottleCount,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 239,
          "context": "schema",
          "snippet": "//     // materialType: inventory.materialType, // TODO: Re-enable after database migration"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 240,
          "context": "schema",
          "snippet": "//     metadata: inventory.metadata,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 241,
          "context": "schema",
          "snippet": "//     location: inventory.location,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 242,
          "context": "schema",
          "snippet": "//     notes: inventory.notes,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 243,
          "context": "schema",
          "snippet": "//     createdAt: inventory.createdAt,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 244,
          "context": "query",
          "snippet": "//     updatedAt: inventory.updatedAt,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 246,
          "context": "import",
          "snippet": "//   .from(inventory)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 252,
          "context": "schema",
          "snippet": "//   conditions.push(eq(inventory.materialType, materialType))"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 256,
          "context": "schema",
          "snippet": "//   conditions.push(like(inventory.location, `%${location}%`))"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 260,
          "context": "query",
          "snippet": "//   conditions.push(isNull(inventory.deletedAt))"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 268,
          "context": "schema",
          "snippet": "//   .orderBy(desc(inventory.createdAt))"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 274,
          "context": "import",
          "snippet": "//   .from(inventory)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 288,
          "context": "schema",
          "snippet": "// Get inventory item by ID - accessible by both admin and operator"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 289,
          "context": "schema",
          "snippet": "getById: createRbacProcedure(\"read\", \"inventory\")"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 294,
          "context": "import",
          "snippet": ".from(inventory)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 295,
          "context": "query",
          "snippet": ".where(and(eq(inventory.id, input.id), isNull(inventory.deletedAt)))"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 295,
          "context": "query",
          "snippet": ".where(and(eq(inventory.id, input.id), isNull(inventory.deletedAt)))"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 318,
          "context": "schema",
          "snippet": "// Search inventory items - accessible by both admin and operator"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 319,
          "context": "schema",
          "snippet": "search: createRbacProcedure(\"list\", \"inventory\")"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 326,
          "context": "import",
          "snippet": ".from(inventory)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 330,
          "context": "schema",
          "snippet": "like(inventory.notes, `%${query}%`),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 331,
          "context": "schema",
          "snippet": "like(inventory.location, `%${query}%`),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 333,
          "context": "query",
          "snippet": "isNull(inventory.deletedAt),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 337,
          "context": "type",
          "snippet": "eq(inventory.materialType, type),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 343,
          "context": "query",
          "snippet": ".orderBy(desc(inventory.updatedAt))"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 354,
          "context": "schema",
          "snippet": "// Record inventory transaction - accessible by both admin and operator"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 356,
          "context": "schema",
          "snippet": "recordTransaction: createRbacProcedure(\"create\", \"inventory\")"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 365,
          "context": "schema",
          "snippet": "// Create new inventory item with material-specific data - accessible by both admin and operator"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 366,
          "context": "schema",
          "snippet": "createInventoryItem: createRbacProcedure(\"create\", \"inventory\")"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 388,
          "context": "schema",
          "snippet": "bulkTransfer: createRbacProcedure(\"create\", \"inventory\")"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 393,
          "context": "schema",
          "snippet": ".min(1, \"At least one inventory ID required\"),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 409,
          "context": "schema",
          "snippet": "// Check stock levels for low inventory - accessible by both admin and operator"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 410,
          "context": "schema",
          "snippet": "checkStockLevels: createRbacProcedure(\"list\", \"inventory\")"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 426,
          "context": "schema",
          "snippet": "// Reserve inventory for upcoming operations - accessible by both admin and operator"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 427,
          "context": "schema",
          "snippet": "reserveInventory: createRbacProcedure(\"create\", \"inventory\")"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 430,
          "context": "validation",
          "snippet": "inventoryId: z.string().uuid(\"Invalid inventory ID\"),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 447,
          "context": "schema",
          "snippet": "// Release reserved inventory - accessible by both admin and operator"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 448,
          "context": "schema",
          "snippet": "releaseReservation: createRbacProcedure(\"create\", \"inventory\")"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 451,
          "context": "validation",
          "snippet": "inventoryId: z.string().uuid(\"Invalid inventory ID\"),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 470,
          "context": "schema",
          "snippet": "// Get transaction history for an inventory item - accessible by both admin and operator"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 471,
          "context": "schema",
          "snippet": "getTransactionHistory: createRbacProcedure(\"read\", \"inventory\")"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 506,
          "context": "type",
          "snippet": "// Get inventory summary by material type - accessible by both admin and operator"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 507,
          "context": "schema",
          "snippet": "getSummaryByMaterialType: createRbacProcedure(\"list\", \"inventory\").query("
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 511,
          "context": "schema",
          "snippet": "materialType: inventory.materialType,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 513,
          "context": "schema",
          "snippet": "totalQuantity: sql<number>`sum(${inventory.currentBottleCount})`,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 515,
          "context": "import",
          "snippet": ".from(inventory)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 516,
          "context": "query",
          "snippet": ".where(isNull(inventory.deletedAt))"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 517,
          "context": "schema",
          "snippet": ".groupBy(inventory.materialType);"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 529,
          "context": "schema",
          "snippet": "// Get transaction summary for inventory items - accessible by both admin and operator"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 530,
          "context": "schema",
          "snippet": "getTransactionSummary: createRbacProcedure(\"read\", \"inventory\")"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 535,
          "context": "schema",
          "snippet": ".min(1, \"At least one inventory ID required\"),"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 549,
          "context": "query",
          "snippet": "updateBaseFruitItem: createRbacProcedure(\"update\", \"inventory\")"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 587,
          "context": "query",
          "snippet": "updateAdditiveItem: createRbacProcedure(\"update\", \"inventory\")"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 626,
          "context": "query",
          "snippet": "updateJuiceItem: createRbacProcedure(\"update\", \"inventory\")"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 663,
          "context": "query",
          "snippet": "updatePackagingItem: createRbacProcedure(\"update\", \"inventory\")"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 696,
          "context": "query",
          "snippet": "deleteItem: createRbacProcedure(\"delete\", \"inventory\")"
        },
        {
          "file": "src/routers/index.ts",
          "line": 12,
          "context": "import",
          "snippet": "import { inventoryRouter } from \"./inventory\";"
        },
        {
          "file": "src/routers/index.ts",
          "line": 45,
          "context": "schema",
          "snippet": "inventory,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1371,
          "context": "schema",
          "snippet": ".filter((item) => item.availableQuantityKg > 0); // Only return items with available inventory"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2781,
          "context": "schema",
          "snippet": "// Get total packaged inventory"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2784,
          "context": "schema",
          "snippet": "totalBottles: sql<number>`sum(${inventory.currentBottleCount})`,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2785,
          "context": "schema",
          "snippet": "totalVolumeL: sql<number>`sum(${packages.volumePackagedL}::decimal * ${inventory.currentBottleCount}::decimal / ${packages.bottleCount}::decimal)`,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2787,
          "context": "import",
          "snippet": ".from(inventory)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2788,
          "context": "schema",
          "snippet": ".leftJoin(packages, eq(packages.id, inventory.packageId))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2789,
          "context": "query",
          "snippet": ".where(and(isNull(inventory.deletedAt), isNull(packages.deletedAt)));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2802,
          "context": "schema",
          "snippet": "// Ensure packaged inventory values are valid numbers"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3450,
          "context": "schema",
          "snippet": "inventory: inventoryRouter,"
        },
        {
          "file": "src/types/inventory.ts",
          "line": 20,
          "context": "schema",
          "snippet": "// Apple transaction - for base fruit inventory tracking"
        },
        {
          "file": "src/types/inventory.ts",
          "line": 46,
          "context": "schema",
          "snippet": "// Juice transaction - for pressed juice inventory"
        },
        {
          "file": "src/types/inventory.ts",
          "line": 94,
          "context": "validation",
          "snippet": "// Simplified transaction schema for recording transactions on existing inventory items"
        },
        {
          "file": "src/types/inventory.ts",
          "line": 96,
          "context": "validation",
          "snippet": "inventoryId: z.string().uuid(\"Invalid inventory ID\"),"
        },
        {
          "file": "src/types/inventory.ts",
          "line": 110,
          "context": "validation",
          "snippet": "// Extended transaction schema for creating new inventory items with material-specific data"
        },
        {
          "file": "src/types/inventory.ts",
          "line": 119,
          "context": "validation",
          "snippet": "transactionType: z.literal(\"purchase\"), // Only purchases can create new inventory items"
        },
        {
          "file": "src/types/inventory.ts",
          "line": 126,
          "context": "validation",
          "snippet": "transactionType: z.literal(\"purchase\"), // Only purchases can create new inventory items"
        },
        {
          "file": "src/types/inventory.ts",
          "line": 133,
          "context": "validation",
          "snippet": "transactionType: z.literal(\"purchase\"), // Only purchases can create new inventory items"
        },
        {
          "file": "src/types/inventory.ts",
          "line": 140,
          "context": "validation",
          "snippet": "transactionType: z.literal(\"purchase\"), // Only purchases can create new inventory items"
        },
        {
          "file": "src/types/inventory.ts",
          "line": 145,
          "context": "validation",
          "snippet": "// Input schema for creating new inventory items"
        },
        {
          "file": "src/types/inventory.ts",
          "line": 164,
          "context": "validation",
          "snippet": "// Query schemas for filtering inventory"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 523,
          "context": "schema",
          "snippet": "it(\"should detect insufficient inventory\", async () => {"
        },
        {
          "file": "src/utils/searchUtils.ts",
          "line": 2,
          "context": "schema",
          "snippet": "* Search utilities for optimized inventory search functionality"
        },
        {
          "file": "src/utils/searchUtils.ts",
          "line": 6,
          "context": "import",
          "snippet": "import type { MaterialType } from \"@/types/inventory\";"
        },
        {
          "file": "src/utils/searchUtils.ts",
          "line": 8,
          "context": "schema",
          "snippet": "// Interface for searchable inventory items"
        },
        {
          "file": "src/utils/searchUtils.ts",
          "line": 556,
          "context": "schema",
          "snippet": "constructor(maxSize = 20, storageKey = \"inventory-search-history\") {"
        },
        {
          "file": "src/utils/error-handling.ts",
          "line": 86,
          "context": "schema",
          "snippet": "\"There is not enough inventory available for this transaction.\","
        },
        {
          "file": "src/types/inventory.ts",
          "line": 12,
          "context": "type",
          "snippet": "// Search state interface for inventory search functionality"
        },
        {
          "file": "src/types/inventory.ts",
          "line": 20,
          "context": "type",
          "snippet": "// Filter state interface for inventory filters"
        },
        {
          "file": "src/lib/pdf-generator.ts",
          "line": 44,
          "context": "schema",
          "snippet": "inventory: Array<{"
        },
        {
          "file": "src/lib/pdf-generator.ts",
          "line": 116,
          "context": "schema",
          "snippet": "// Add inventory details"
        },
        {
          "file": "src/lib/pdf-generator.ts",
          "line": 455,
          "context": "schema",
          "snippet": "* Add inventory details section"
        },
        {
          "file": "src/lib/pdf-generator.ts",
          "line": 461,
          "context": "schema",
          "snippet": "if (data.inventory.length === 0) {"
        },
        {
          "file": "src/lib/pdf-generator.ts",
          "line": 463,
          "context": "schema",
          "snippet": "this.doc.text(\"No inventory items found\", this.marginLeft, this.currentY);"
        },
        {
          "file": "src/lib/pdf-generator.ts",
          "line": 495,
          "context": "schema",
          "snippet": "// Draw inventory rows"
        },
        {
          "file": "src/lib/pdf-generator.ts",
          "line": 497,
          "context": "schema",
          "snippet": "data.inventory.forEach((item) => {"
        },
        {
          "file": "src/components/navbar.tsx",
          "line": 37,
          "context": "schema",
          "snippet": "href: \"/inventory\","
        },
        {
          "file": "src/app/layout.tsx",
          "line": 11,
          "context": "schema",
          "snippet": "\"Replace Excel with a web app to track vendor purchases → pressing → fermentation → packaging → inventory\","
        },
        {
          "file": "src/hooks/useOptimizedSearch.ts",
          "line": 2,
          "context": "schema",
          "snippet": "* Optimized search hook for inventory management"
        },
        {
          "file": "src/components/cellar/AddBatchAdditiveForm.tsx",
          "line": 81,
          "context": "import",
          "snippet": "// Fetch available additives from inventory, filtered by type if selected"
        },
        {
          "file": "src/components/cellar/AddBatchAdditiveForm.tsx",
          "line": 243,
          "context": "query",
          "snippet": "? `No ${selectedAdditiveType.toLowerCase()} additives found in inventory.`"
        },
        {
          "file": "src/components/inventory/TransactionTypeSelector.tsx",
          "line": 27,
          "context": "schema",
          "snippet": "route: \"/inventory\","
        },
        {
          "file": "src/components/inventory/TransactionTypeSelector.tsx",
          "line": 38,
          "context": "schema",
          "snippet": "route: \"/inventory?tab=additives\","
        },
        {
          "file": "src/components/inventory/TransactionTypeSelector.tsx",
          "line": 49,
          "context": "schema",
          "snippet": "route: \"/inventory?tab=juice\","
        },
        {
          "file": "src/components/inventory/TransactionTypeSelector.tsx",
          "line": 60,
          "context": "schema",
          "snippet": "route: \"/inventory?tab=packaging\","
        },
        {
          "file": "src/components/inventory/TransactionTypeSelector.tsx",
          "line": 79,
          "context": "schema",
          "snippet": "// For base fruit, navigate to inventory page with apple tab active"
        },
        {
          "file": "src/components/inventory/TransactionTypeSelector.tsx",
          "line": 80,
          "context": "schema",
          "snippet": "router.push(\"/inventory\");"
        },
        {
          "file": "src/components/inventory/TransactionTypeSelector.tsx",
          "line": 87,
          "context": "schema",
          "snippet": "// For additives, navigate to inventory page with additives tab active"
        },
        {
          "file": "src/components/inventory/TransactionTypeSelector.tsx",
          "line": 88,
          "context": "schema",
          "snippet": "router.push(\"/inventory\");"
        },
        {
          "file": "src/components/inventory/TransactionTypeSelector.tsx",
          "line": 97,
          "context": "schema",
          "snippet": "// For juice, navigate to inventory page with juice tab active"
        },
        {
          "file": "src/components/inventory/TransactionTypeSelector.tsx",
          "line": 98,
          "context": "schema",
          "snippet": "router.push(\"/inventory\");"
        },
        {
          "file": "src/components/inventory/TransactionTypeSelector.tsx",
          "line": 105,
          "context": "schema",
          "snippet": "// For packaging, navigate to inventory page with packaging tab active"
        },
        {
          "file": "src/components/inventory/TransactionTypeSelector.tsx",
          "line": 106,
          "context": "schema",
          "snippet": "router.push(\"/inventory\");"
        },
        {
          "file": "src/components/inventory/PackagingInventoryTable.tsx",
          "line": 58,
          "context": "import",
          "snippet": "// Type for packaging inventory item from API"
        },
        {
          "file": "src/components/inventory/PackagingInventoryTable.tsx",
          "line": 126,
          "context": "schema",
          "snippet": "// API queries - using inventory.list with materialType filter"
        },
        {
          "file": "src/components/inventory/PackagingInventoryTable.tsx",
          "line": 132,
          "context": "schema",
          "snippet": "} = trpc.inventory.list.useQuery({"
        },
        {
          "file": "src/components/inventory/PackagingInventoryTable.tsx",
          "line": 137,
          "context": "schema",
          "snippet": "// Transform and filter inventory data to show only packaging"
        },
        {
          "file": "src/components/inventory/PackagingInventoryTable.tsx",
          "line": 384,
          "context": "schema",
          "snippet": "<span>Error loading packaging inventory: {error.message}</span>"
        },
        {
          "file": "src/components/inventory/PackagingInventoryTable.tsx",
          "line": 603,
          "context": "import",
          "snippet": "this packaging item from your inventory."
        },
        {
          "file": "src/components/inventory/MaterialTypeIndicator.tsx",
          "line": 6,
          "context": "import",
          "snippet": "import type { MaterialType } from \"@/types/inventory\";"
        },
        {
          "file": "src/components/inventory/MaterialTypeIndicator.tsx",
          "line": 7,
          "context": "import",
          "snippet": "import { MATERIAL_TYPE_CONFIG } from \"@/types/inventory\";"
        },
        {
          "file": "src/components/inventory/JuiceInventoryTable.tsx",
          "line": 58,
          "context": "import",
          "snippet": "import { InventoryEditDialog } from \"@/components/inventory/InventoryEditDialog\";"
        },
        {
          "file": "src/components/inventory/JuiceInventoryTable.tsx",
          "line": 61,
          "context": "import",
          "snippet": "// Type for juice inventory item from API"
        },
        {
          "file": "src/components/inventory/JuiceInventoryTable.tsx",
          "line": 122,
          "context": "schema",
          "snippet": "// API queries - using inventory.list with materialType filter"
        },
        {
          "file": "src/components/inventory/JuiceInventoryTable.tsx",
          "line": 128,
          "context": "schema",
          "snippet": "} = trpc.inventory.list.useQuery({"
        },
        {
          "file": "src/components/inventory/JuiceInventoryTable.tsx",
          "line": 134,
          "context": "query",
          "snippet": "const deleteMutation = trpc.inventory.deleteItem.useMutation({"
        },
        {
          "file": "src/components/inventory/JuiceInventoryTable.tsx",
          "line": 153,
          "context": "schema",
          "snippet": "// Transform and filter inventory data to show only juice"
        },
        {
          "file": "src/components/inventory/JuiceInventoryTable.tsx",
          "line": 380,
          "context": "schema",
          "snippet": "<span>Error loading juice inventory: {error.message}</span>"
        },
        {
          "file": "src/components/inventory/JuiceInventoryTable.tsx",
          "line": 591,
          "context": "import",
          "snippet": "this juice lot from your inventory."
        },
        {
          "file": "src/components/inventory/InventoryTable.tsx",
          "line": 62,
          "context": "import",
          "snippet": "} from \"@/types/inventory\";"
        },
        {
          "file": "src/components/inventory/InventoryTable.tsx",
          "line": 64,
          "context": "import",
          "snippet": "// Type for inventory item from API"
        },
        {
          "file": "src/components/inventory/InventoryTable.tsx",
          "line": 167,
          "context": "schema",
          "snippet": "} = trpc.inventory.list.useQuery(apiParams, {"
        },
        {
          "file": "src/components/inventory/InventoryTable.tsx",
          "line": 176,
          "context": "schema",
          "snippet": "} = trpc.inventory.search.useQuery(searchParams, {"
        },
        {
          "file": "src/components/inventory/InventoryTable.tsx",
          "line": 181,
          "context": "query",
          "snippet": "const deleteMutation = trpc.inventory.deleteItem.useMutation({"
        },
        {
          "file": "src/components/inventory/InventoryTable.tsx",
          "line": 293,
          "context": "schema",
          "snippet": "// For basefruit purchase items being shown as inventory"
        },
        {
          "file": "src/components/inventory/InventoryTable.tsx",
          "line": 400,
          "context": "schema",
          "snippet": "placeholder=\"Search inventory items...\""
        },
        {
          "file": "src/components/inventory/InventoryTable.tsx",
          "line": 463,
          "context": "schema",
          "snippet": "<span>Error loading inventory: {error.message}</span>"
        },
        {
          "file": "src/components/inventory/InventoryTable.tsx",
          "line": 547,
          "context": "schema",
          "snippet": ": \"No inventory items found\"}"
        },
        {
          "file": "src/components/inventory/InventoryTable.tsx",
          "line": 688,
          "context": "schema",
          "snippet": "your inventory."
        },
        {
          "file": "src/components/inventory/InventorySearch.tsx",
          "line": 17,
          "context": "import",
          "snippet": "} from \"@/types/inventory\";"
        },
        {
          "file": "src/components/inventory/InventorySearch.tsx",
          "line": 38,
          "context": "schema",
          "snippet": "placeholder = \"Search inventory...\","
        },
        {
          "file": "src/components/inventory/InventorySearch.tsx",
          "line": 214,
          "context": "schema",
          "snippet": "aria-label=\"Search inventory\""
        },
        {
          "file": "src/components/inventory/InventorySearch.tsx",
          "line": 383,
          "context": "schema",
          "snippet": "* High-performance search component specifically optimized for inventory items"
        },
        {
          "file": "src/components/inventory/InventorySearch.tsx",
          "line": 389,
          "context": "schema",
          "snippet": "placeholder = \"Search inventory...\","
        },
        {
          "file": "src/components/inventory/InventoryFilters.tsx",
          "line": 30,
          "context": "import",
          "snippet": "} from \"@/types/inventory\";"
        },
        {
          "file": "src/components/inventory/InventoryFilters.tsx",
          "line": 35,
          "context": "import",
          "snippet": "} from \"@/types/inventory\";"
        },
        {
          "file": "src/components/inventory/InventoryEditDialog.tsx",
          "line": 75,
          "context": "schema",
          "snippet": "item: any; // The inventory item to edit"
        },
        {
          "file": "src/components/inventory/InventoryEditDialog.tsx",
          "line": 152,
          "context": "query",
          "snippet": "const updateBaseFruit = trpc.inventory.updateBaseFruitItem.useMutation({"
        },
        {
          "file": "src/components/inventory/InventoryEditDialog.tsx",
          "line": 158,
          "context": "schema",
          "snippet": "utils.inventory.list.invalidate();"
        },
        {
          "file": "src/components/inventory/InventoryEditDialog.tsx",
          "line": 171,
          "context": "query",
          "snippet": "const updateAdditive = trpc.inventory.updateAdditiveItem.useMutation({"
        },
        {
          "file": "src/components/inventory/InventoryEditDialog.tsx",
          "line": 177,
          "context": "schema",
          "snippet": "utils.inventory.list.invalidate();"
        },
        {
          "file": "src/components/inventory/InventoryEditDialog.tsx",
          "line": 190,
          "context": "query",
          "snippet": "const updateJuice = trpc.inventory.updateJuiceItem.useMutation({"
        },
        {
          "file": "src/components/inventory/InventoryEditDialog.tsx",
          "line": 196,
          "context": "schema",
          "snippet": "utils.inventory.list.invalidate();"
        },
        {
          "file": "src/components/inventory/InventoryEditDialog.tsx",
          "line": 209,
          "context": "query",
          "snippet": "const updatePackaging = trpc.inventory.updatePackagingItem.useMutation({"
        },
        {
          "file": "src/components/inventory/InventoryEditDialog.tsx",
          "line": 215,
          "context": "schema",
          "snippet": "utils.inventory.list.invalidate();"
        },
        {
          "file": "src/components/inventory/InventoryEditDialog.tsx",
          "line": 663,
          "context": "schema",
          "snippet": "Update the inventory details for this item"
        },
        {
          "file": "src/components/inventory/BaseFruitTable.tsx",
          "line": 141,
          "context": "schema",
          "snippet": "// API queries - using inventory.list for now, will create specialized endpoint later"
        },
        {
          "file": "src/components/inventory/BaseFruitTable.tsx",
          "line": 147,
          "context": "schema",
          "snippet": "} = trpc.inventory.list.useQuery({"
        },
        {
          "file": "src/components/inventory/BaseFruitTable.tsx",
          "line": 153,
          "context": "query",
          "snippet": "const deleteMutation = trpc.inventory.deleteItem.useMutation({"
        },
        {
          "file": "src/components/inventory/BaseFruitTable.tsx",
          "line": 241,
          "context": "schema",
          "snippet": "router.push(`/inventory/${item.id}`);"
        },
        {
          "file": "src/components/inventory/BaseFruitTable.tsx",
          "line": 584,
          "context": "import",
          "snippet": "this purchase from your inventory."
        },
        {
          "file": "src/components/inventory/AdditivesInventoryTable.tsx",
          "line": 57,
          "context": "import",
          "snippet": "// Type for additive inventory item from API"
        },
        {
          "file": "src/components/inventory/AdditivesInventoryTable.tsx",
          "line": 130,
          "context": "schema",
          "snippet": "// API queries - using inventory.list with materialType filter"
        },
        {
          "file": "src/components/inventory/AdditivesInventoryTable.tsx",
          "line": 136,
          "context": "schema",
          "snippet": "} = trpc.inventory.list.useQuery({"
        },
        {
          "file": "src/components/inventory/AdditivesInventoryTable.tsx",
          "line": 141,
          "context": "schema",
          "snippet": "// Transform and filter inventory data to show only additives"
        },
        {
          "file": "src/components/inventory/AdditivesInventoryTable.tsx",
          "line": 371,
          "context": "schema",
          "snippet": "<span>Error loading additives inventory: {error.message}</span>"
        },
        {
          "file": "src/components/inventory/AdditivesInventoryTable.tsx",
          "line": 566,
          "context": "import",
          "snippet": "this item from your inventory."
        },
        {
          "file": "src/app/vendors/page.tsx",
          "line": 24,
          "context": "import",
          "snippet": "import { VendorManagement } from \"@/components/inventory/VendorManagement\";"
        },
        {
          "file": "src/app/vendors/page.tsx",
          "line": 25,
          "context": "import",
          "snippet": "import { AdditiveVarietyManagement } from \"@/components/inventory/AdditiveVarietyManagement\";"
        },
        {
          "file": "src/app/vendors/page.tsx",
          "line": 26,
          "context": "import",
          "snippet": "import { JuiceVarietyManagement } from \"@/components/inventory/JuiceVarietyManagement\";"
        },
        {
          "file": "src/app/vendors/page.tsx",
          "line": 27,
          "context": "import",
          "snippet": "import { PackagingVarietyManagement } from \"@/components/inventory/PackagingVarietyManagement\";"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 16,
          "context": "import",
          "snippet": "import { TransactionTypeSelector } from \"@/components/inventory/TransactionTypeSelector\";"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 17,
          "context": "import",
          "snippet": "import { AdditivesTransactionForm } from \"@/components/inventory/AdditivesTransactionForm\";"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 18,
          "context": "import",
          "snippet": "import { JuiceTransactionForm } from \"@/components/inventory/JuiceTransactionForm\";"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 19,
          "context": "import",
          "snippet": "import { PackagingTransactionForm } from \"@/components/inventory/PackagingTransactionForm\";"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 20,
          "context": "import",
          "snippet": "import { AppleTransactionForm } from \"@/components/inventory/AppleTransactionForm\";"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 21,
          "context": "import",
          "snippet": "import { InventoryTable } from \"@/components/inventory/InventoryTable\";"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 22,
          "context": "import",
          "snippet": "import { BaseFruitTable } from \"@/components/inventory/BaseFruitTable\";"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 23,
          "context": "import",
          "snippet": "import { AdditivesInventoryTable } from \"@/components/inventory/AdditivesInventoryTable\";"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 24,
          "context": "import",
          "snippet": "import { JuiceInventoryTable } from \"@/components/inventory/JuiceInventoryTable\";"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 25,
          "context": "import",
          "snippet": "import { PackagingInventoryTable } from \"@/components/inventory/PackagingInventoryTable\";"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 26,
          "context": "import",
          "snippet": "import { PurchaseOrdersTable } from \"@/components/inventory/PurchaseOrdersTable\";"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 48,
          "context": "schema",
          "snippet": "const [activeTab, setActiveTab] = useState(\"inventory\");"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 54,
          "context": "schema",
          "snippet": "// Get inventory data using unified inventory API (minimal data for now)"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 54,
          "context": "schema",
          "snippet": "// Get inventory data using unified inventory API (minimal data for now)"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 55,
          "context": "schema",
          "snippet": "const { data: inventoryData, isLoading } = trpc.inventory.list.useQuery({"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 68,
          "context": "schema",
          "snippet": "utils.inventory.list.invalidate();"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 74,
          "context": "schema",
          "snippet": "utils.inventory.list.invalidate();"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 81,
          "context": "schema",
          "snippet": "utils.inventory.list.invalidate();"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 88,
          "context": "schema",
          "snippet": "// Refetch inventory data"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 134,
          "context": "schema",
          "snippet": "`Successfully added ${itemText} to inventory.`,"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 203,
          "context": "schema",
          "snippet": "`Successfully added ${itemText} to inventory.`,"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 256,
          "context": "schema",
          "snippet": "`Successfully added ${itemText} to inventory.`,"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 309,
          "context": "schema",
          "snippet": "`Successfully added ${itemText} to inventory.`,"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 366,
          "context": "schema",
          "snippet": "Track and manage your cidery inventory"
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 393,
          "context": "schema",
          "snippet": "value=\"inventory\""
        },
        {
          "file": "src/app/inventory/page.tsx",
          "line": 436,
          "context": "schema",
          "snippet": "<TabsContent value=\"inventory\" className=\"space-y-6\">"
        },
        {
          "file": "src/app/dashboard/page.tsx",
          "line": 213,
          "context": "schema",
          "snippet": "You need admin or operator permissions to view liquid inventory"
        },
        {
          "file": "src/app/dashboard/page.tsx",
          "line": 230,
          "context": "schema",
          "snippet": "Loading liquid inventory across cellar and packaging..."
        },
        {
          "file": "src/app/dashboard/page.tsx",
          "line": 1055,
          "context": "schema",
          "snippet": "Overview of liquid inventory, batch costs, and cidery operations"
        },
        {
          "file": "src/app/admin/page.tsx",
          "line": 877,
          "context": "schema",
          "snippet": "description: \"Alert threshold for low inventory\","
        },
        {
          "file": "src/app/packaging/[id]/page.tsx",
          "line": 254,
          "context": "schema",
          "snippet": "inventory:"
        },
        {
          "file": "src/app/packaging/[id]/page.tsx",
          "line": 255,
          "context": "schema",
          "snippet": "runData.inventory"
        },
        {
          "file": "src/app/packaging/[id]/page.tsx",
          "line": 304,
          "context": "schema",
          "snippet": "inventory:"
        },
        {
          "file": "src/app/packaging/[id]/page.tsx",
          "line": 305,
          "context": "schema",
          "snippet": "runData.inventory"
        },
        {
          "file": "src/app/packaging/[id]/page.tsx",
          "line": 585,
          "context": "schema",
          "snippet": "{runData.inventory && runData.inventory.length > 0 && ("
        },
        {
          "file": "src/app/packaging/[id]/page.tsx",
          "line": 585,
          "context": "schema",
          "snippet": "{runData.inventory && runData.inventory.length > 0 && ("
        },
        {
          "file": "src/app/packaging/[id]/page.tsx",
          "line": 593,
          "context": "schema",
          "snippet": "{runData.inventory.length} item"
        },
        {
          "file": "src/app/packaging/[id]/page.tsx",
          "line": 594,
          "context": "schema",
          "snippet": "{runData.inventory.length !== 1 ? \"s\" : \"\"} created"
        },
        {
          "file": "src/app/packaging/[id]/page.tsx",
          "line": 598,
          "context": "schema",
          "snippet": "{runData.inventory.map((item: any) => ("
        },
        {
          "file": "packaging-optimized.ts",
          "line": 401,
          "context": "schema",
          "snippet": "* Optimized inventory lookup for packaging runs"
        },
        {
          "file": "packaging-optimized.ts",
          "line": 407,
          "context": "schema",
          "snippet": "const inventory = await db"
        },
        {
          "file": "packaging-optimized.ts",
          "line": 427,
          "context": "type",
          "snippet": "const grouped = new Map<string, typeof inventory>();"
        },
        {
          "file": "packaging-optimized.ts",
          "line": 429,
          "context": "schema",
          "snippet": "for (const item of inventory) {"
        }
      ],
      "columns": []
    },
    {
      "name": "inventoryTransactions",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/services/inventory.ts",
          "line": 5,
          "context": "schema",
          "snippet": "inventoryTransactions,"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 480,
          "context": "query",
          "snippet": ".insert(inventoryTransactions)"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 559,
          "context": "query",
          "snippet": ".insert(inventoryTransactions)"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 651,
          "context": "query",
          "snippet": ".insert(inventoryTransactions)"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 784,
          "context": "schema",
          "snippet": "inventoryId: inventoryTransactions.inventoryId,"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 785,
          "context": "schema",
          "snippet": "transactionType: inventoryTransactions.transactionType,"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 786,
          "context": "schema",
          "snippet": "quantityChange: inventoryTransactions.quantityChange,"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 788,
          "context": "import",
          "snippet": ".from(inventoryTransactions)"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 789,
          "context": "schema",
          "snippet": ".where(inArray(inventoryTransactions.inventoryId, inventoryIds));"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 793,
          "context": "schema",
          "snippet": "conditions.push(gte(inventoryTransactions.transactionDate, startDate));"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 796,
          "context": "schema",
          "snippet": "conditions.push(lte(inventoryTransactions.transactionDate, endDate));"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 480,
          "context": "query",
          "snippet": ".insert(inventoryTransactions)"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 559,
          "context": "query",
          "snippet": ".insert(inventoryTransactions)"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 651,
          "context": "query",
          "snippet": ".insert(inventoryTransactions)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 6,
          "context": "schema",
          "snippet": "inventoryTransactions,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 308,
          "context": "import",
          "snippet": ".from(inventoryTransactions)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 309,
          "context": "schema",
          "snippet": ".where(eq(inventoryTransactions.inventoryId, input.id))"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 310,
          "context": "schema",
          "snippet": ".orderBy(desc(inventoryTransactions.transactionDate));"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 484,
          "context": "import",
          "snippet": ".from(inventoryTransactions)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 485,
          "context": "schema",
          "snippet": ".where(eq(inventoryTransactions.inventoryId, inventoryId))"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 486,
          "context": "schema",
          "snippet": ".orderBy(desc(inventoryTransactions.transactionDate))"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 492,
          "context": "import",
          "snippet": ".from(inventoryTransactions)"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 493,
          "context": "schema",
          "snippet": ".where(eq(inventoryTransactions.inventoryId, inventoryId));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 46,
          "context": "schema",
          "snippet": "inventoryTransactions,"
        }
      ],
      "columns": []
    },
    {
      "name": "batchCosts",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/index.ts",
          "line": 3270,
          "context": "schema",
          "snippet": "// TODO: Implement when batchCosts and cogsItems tables are created"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3291,
          "context": "schema",
          "snippet": "batchId: batchCosts.batchId,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3294,
          "context": "schema",
          "snippet": "totalAppleCost: batchCosts.totalAppleCost,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3295,
          "context": "schema",
          "snippet": "laborCost: batchCosts.laborCost,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3296,
          "context": "schema",
          "snippet": "overheadCost: batchCosts.overheadCost,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3297,
          "context": "schema",
          "snippet": "packagingCost: batchCosts.packagingCost,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3298,
          "context": "schema",
          "snippet": "totalCost: batchCosts.totalCost,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3299,
          "context": "schema",
          "snippet": "costPerBottle: batchCosts.costPerBottle,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3300,
          "context": "schema",
          "snippet": "costPerL: batchCosts.costPerL,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3301,
          "context": "schema",
          "snippet": "calculatedAt: batchCosts.calculatedAt,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3305,
          "context": "import",
          "snippet": ".from(batchCosts)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3306,
          "context": "schema",
          "snippet": ".leftJoin(batches, eq(batches.id, batchCosts.batchId))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3307,
          "context": "query",
          "snippet": ".where(and(isNull(batchCosts.deletedAt), isNull(batches.deletedAt)))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3308,
          "context": "schema",
          "snippet": ".orderBy(desc(batchCosts.calculatedAt))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3369,
          "context": "schema",
          "snippet": "// TODO: Implement when batchCosts and cogsItems tables are created"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3378,
          "context": "import",
          "snippet": ".from(batchCosts)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3379,
          "context": "query",
          "snippet": ".where(and(eq(batchCosts.batchId, input.batchId), isNull(batchCosts.deletedAt)))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3379,
          "context": "query",
          "snippet": ".where(and(eq(batchCosts.batchId, input.batchId), isNull(batchCosts.deletedAt)))"
        }
      ],
      "columns": []
    },
    {
      "name": "cogsItems",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/index.ts",
          "line": 3270,
          "context": "schema",
          "snippet": "// TODO: Implement when batchCosts and cogsItems tables are created"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3311,
          "context": "schema",
          "snippet": "const cogsItems = await db"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3313,
          "context": "schema",
          "snippet": "batchId: cogsItems.batchId,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3314,
          "context": "schema",
          "snippet": "itemType: cogsItems.itemType,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3315,
          "context": "schema",
          "snippet": "description: cogsItems.description,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3316,
          "context": "schema",
          "snippet": "cost: cogsItems.cost,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3317,
          "context": "schema",
          "snippet": "quantity: cogsItems.quantity,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3318,
          "context": "schema",
          "snippet": "unit: cogsItems.unit,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3319,
          "context": "schema",
          "snippet": "appliedAt: cogsItems.appliedAt,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3321,
          "context": "import",
          "snippet": ".from(cogsItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3322,
          "context": "query",
          "snippet": ".where(isNull(cogsItems.deletedAt))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3323,
          "context": "schema",
          "snippet": ".orderBy(cogsItems.appliedAt)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3326,
          "context": "schema",
          "snippet": "const cogsItemsByBatch = cogsItems.reduce((acc, item) => {"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3332,
          "context": "type",
          "snippet": "}, {} as Record<string, typeof cogsItems>)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3337,
          "context": "schema",
          "snippet": "cogsItems: cogsItemsByBatch[batch.batchId] || [],"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3369,
          "context": "schema",
          "snippet": "// TODO: Implement when batchCosts and cogsItems tables are created"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3384,
          "context": "import",
          "snippet": ".from(cogsItems)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3385,
          "context": "query",
          "snippet": ".where(and(eq(cogsItems.batchId, input.batchId), isNull(cogsItems.deletedAt)))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3385,
          "context": "query",
          "snippet": ".where(and(eq(cogsItems.batchId, input.batchId), isNull(cogsItems.deletedAt)))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3386,
          "context": "schema",
          "snippet": ".orderBy(cogsItems.appliedAt)"
        }
      ],
      "columns": []
    },
    {
      "name": "applePressRuns",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/services/inventory.ts",
          "line": 10,
          "context": "schema",
          "snippet": "applePressRuns,"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 299,
          "context": "query",
          "snippet": ".select({ id: applePressRuns.id, status: applePressRuns.status })"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 299,
          "context": "query",
          "snippet": ".select({ id: applePressRuns.id, status: applePressRuns.status })"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 300,
          "context": "import",
          "snippet": ".from(applePressRuns)"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 303,
          "context": "schema",
          "snippet": "eq(applePressRuns.id, transaction.pressRunId),"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 304,
          "context": "query",
          "snippet": "isNull(applePressRuns.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 5,
          "context": "schema",
          "snippet": "applePressRuns,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 134,
          "context": "query",
          "snippet": ".insert(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 192,
          "context": "import",
          "snippet": ".from(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 195,
          "context": "schema",
          "snippet": "eq(applePressRuns.id, input.pressRunId),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 196,
          "context": "query",
          "snippet": "isNull(applePressRuns.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 297,
          "context": "query",
          "snippet": ".update(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 304,
          "context": "schema",
          "snippet": ".where(eq(applePressRuns.id, input.pressRunId));"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 324,
          "context": "query",
          "snippet": ".update(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 330,
          "context": "schema",
          "snippet": ".where(eq(applePressRuns.id, input.pressRunId));"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 375,
          "context": "schema",
          "snippet": "pressRunStatus: applePressRuns.status,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 379,
          "context": "schema",
          "snippet": "applePressRuns,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 380,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.applePressRunId, applePressRuns.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 482,
          "context": "query",
          "snippet": ".update(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 488,
          "context": "schema",
          "snippet": ".where(eq(applePressRuns.id, existingLoad[0].pressRunId));"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 529,
          "context": "import",
          "snippet": ".from(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 532,
          "context": "schema",
          "snippet": "eq(applePressRuns.id, input.pressRunId),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 533,
          "context": "query",
          "snippet": "isNull(applePressRuns.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 633,
          "context": "query",
          "snippet": ".select({ pressRunName: applePressRuns.pressRunName })"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 634,
          "context": "import",
          "snippet": ".from(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 637,
          "context": "schema",
          "snippet": "sql`${applePressRuns.pressRunName} LIKE ${completionDateStr + \"-%\"}`,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 638,
          "context": "query",
          "snippet": "isNull(applePressRuns.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 641,
          "context": "schema",
          "snippet": ".orderBy(desc(applePressRuns.pressRunName));"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 664,
          "context": "query",
          "snippet": ".update(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 679,
          "context": "schema",
          "snippet": ".where(eq(applePressRuns.id, input.pressRunId))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 856,
          "context": "import",
          "snippet": ".from(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 859,
          "context": "schema",
          "snippet": "eq(applePressRuns.id, input.pressRunId),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 860,
          "context": "query",
          "snippet": "isNull(applePressRuns.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 923,
          "context": "query",
          "snippet": ".select({ pressRunName: applePressRuns.pressRunName })"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 924,
          "context": "import",
          "snippet": ".from(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 927,
          "context": "schema",
          "snippet": "sql`${applePressRuns.pressRunName} LIKE ${completionDateStr + \"-%\"}`,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 928,
          "context": "query",
          "snippet": "isNull(applePressRuns.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 931,
          "context": "schema",
          "snippet": ".orderBy(desc(applePressRuns.pressRunName));"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 953,
          "context": "query",
          "snippet": ".update(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 961,
          "context": "schema",
          "snippet": ".where(eq(applePressRuns.id, input.pressRunId));"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 973,
          "context": "schema",
          "snippet": "totalJuiceVolumeL: applePressRuns.totalJuiceVolumeL,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 974,
          "context": "schema",
          "snippet": "endTime: applePressRuns.endTime,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 976,
          "context": "import",
          "snippet": ".from(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 977,
          "context": "schema",
          "snippet": ".where(eq(applePressRuns.id, input.pressRunId))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1519,
          "context": "query",
          "snippet": "const conditions = [isNull(applePressRuns.deletedAt)];"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1522,
          "context": "schema",
          "snippet": "conditions.push(eq(applePressRuns.status, input.status));"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1526,
          "context": "schema",
          "snippet": "conditions.push(eq(applePressRuns.vendorId, input.vendorId));"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1531,
          "context": "schema",
          "snippet": "created: applePressRuns.createdAt,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1532,
          "context": "schema",
          "snippet": "scheduled: applePressRuns.scheduledDate,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1533,
          "context": "schema",
          "snippet": "started: applePressRuns.startTime,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1534,
          "context": "query",
          "snippet": "updated: applePressRuns.updatedAt,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1543,
          "context": "schema",
          "snippet": "id: applePressRuns.id,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1544,
          "context": "schema",
          "snippet": "pressRunName: applePressRuns.pressRunName,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1545,
          "context": "schema",
          "snippet": "vendorId: applePressRuns.vendorId,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1547,
          "context": "schema",
          "snippet": "vesselId: applePressRuns.vesselId,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1549,
          "context": "schema",
          "snippet": "status: applePressRuns.status,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1550,
          "context": "schema",
          "snippet": "scheduledDate: applePressRuns.scheduledDate,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1551,
          "context": "schema",
          "snippet": "startTime: applePressRuns.startTime,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1552,
          "context": "schema",
          "snippet": "endTime: applePressRuns.endTime,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1553,
          "context": "schema",
          "snippet": "totalAppleWeightKg: applePressRuns.totalAppleWeightKg,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1554,
          "context": "schema",
          "snippet": "totalJuiceVolumeL: applePressRuns.totalJuiceVolumeL,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1555,
          "context": "schema",
          "snippet": "extractionRate: applePressRuns.extractionRate,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1556,
          "context": "schema",
          "snippet": "laborHours: applePressRuns.laborHours,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1557,
          "context": "schema",
          "snippet": "totalLaborCost: applePressRuns.totalLaborCost,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1558,
          "context": "schema",
          "snippet": "notes: applePressRuns.notes,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1559,
          "context": "schema",
          "snippet": "createdAt: applePressRuns.createdAt,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1560,
          "context": "query",
          "snippet": "updatedAt: applePressRuns.updatedAt,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1562,
          "context": "import",
          "snippet": ".from(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1563,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(applePressRuns.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1564,
          "context": "schema",
          "snippet": ".leftJoin(vessels, eq(applePressRuns.vesselId, vessels.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1573,
          "context": "import",
          "snippet": ".from(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1681,
          "context": "schema",
          "snippet": "id: applePressRuns.id,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1682,
          "context": "schema",
          "snippet": "pressRunName: applePressRuns.pressRunName,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1683,
          "context": "schema",
          "snippet": "vendorId: applePressRuns.vendorId,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1686,
          "context": "schema",
          "snippet": "vesselId: applePressRuns.vesselId,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1690,
          "context": "schema",
          "snippet": "status: applePressRuns.status,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1691,
          "context": "schema",
          "snippet": "scheduledDate: applePressRuns.scheduledDate,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1692,
          "context": "schema",
          "snippet": "startTime: applePressRuns.startTime,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1693,
          "context": "schema",
          "snippet": "endTime: applePressRuns.endTime,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1694,
          "context": "schema",
          "snippet": "totalAppleWeightKg: applePressRuns.totalAppleWeightKg,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1695,
          "context": "schema",
          "snippet": "totalJuiceVolumeL: applePressRuns.totalJuiceVolumeL,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1696,
          "context": "schema",
          "snippet": "extractionRate: applePressRuns.extractionRate,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1697,
          "context": "schema",
          "snippet": "laborHours: applePressRuns.laborHours,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1698,
          "context": "schema",
          "snippet": "laborCostPerHour: applePressRuns.laborCostPerHour,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1699,
          "context": "schema",
          "snippet": "totalLaborCost: applePressRuns.totalLaborCost,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1700,
          "context": "schema",
          "snippet": "notes: applePressRuns.notes,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1701,
          "context": "schema",
          "snippet": "pressingMethod: applePressRuns.pressingMethod,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1702,
          "context": "schema",
          "snippet": "weatherConditions: applePressRuns.weatherConditions,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1703,
          "context": "schema",
          "snippet": "createdAt: applePressRuns.createdAt,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1704,
          "context": "query",
          "snippet": "updatedAt: applePressRuns.updatedAt,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1705,
          "context": "schema",
          "snippet": "createdByUserId: applePressRuns.createdBy,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1706,
          "context": "query",
          "snippet": "updatedByUserId: applePressRuns.updatedBy,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1708,
          "context": "import",
          "snippet": ".from(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1709,
          "context": "schema",
          "snippet": ".leftJoin(vendors, eq(applePressRuns.vendorId, vendors.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1710,
          "context": "schema",
          "snippet": ".leftJoin(vessels, eq(applePressRuns.vesselId, vessels.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1713,
          "context": "schema",
          "snippet": "eq(applePressRuns.id, input.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1714,
          "context": "query",
          "snippet": "isNull(applePressRuns.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1887,
          "context": "import",
          "snippet": ".from(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1889,
          "context": "query",
          "snippet": "and(eq(applePressRuns.id, id), isNull(applePressRuns.deletedAt)),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1889,
          "context": "query",
          "snippet": "and(eq(applePressRuns.id, id), isNull(applePressRuns.deletedAt)),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1908,
          "context": "query",
          "snippet": ".update(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1917,
          "context": "schema",
          "snippet": ".where(eq(applePressRuns.id, id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1957,
          "context": "import",
          "snippet": ".from(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1960,
          "context": "schema",
          "snippet": "eq(applePressRuns.id, input.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1961,
          "context": "query",
          "snippet": "isNull(applePressRuns.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1988,
          "context": "query",
          "snippet": ".update(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1998,
          "context": "schema",
          "snippet": ".where(eq(applePressRuns.id, input.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2034,
          "context": "import",
          "snippet": ".from(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2037,
          "context": "schema",
          "snippet": "eq(applePressRuns.id, input.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2038,
          "context": "query",
          "snippet": "isNull(applePressRuns.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2077,
          "context": "query",
          "snippet": ".update(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2083,
          "context": "schema",
          "snippet": ".where(eq(applePressRuns.id, input.id))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2151,
          "context": "query",
          "snippet": ".select({ status: applePressRuns.status })"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2152,
          "context": "import",
          "snippet": ".from(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2155,
          "context": "schema",
          "snippet": "eq(applePressRuns.id, load[0].applePressRunId),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2156,
          "context": "query",
          "snippet": "isNull(applePressRuns.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2246,
          "context": "query",
          "snippet": ".select({ id: applePressRuns.id })"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2247,
          "context": "import",
          "snippet": ".from(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2250,
          "context": "schema",
          "snippet": "eq(applePressRuns.id, input.pressRunId),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2251,
          "context": "query",
          "snippet": "isNull(applePressRuns.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 134,
          "context": "query",
          "snippet": ".insert(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 297,
          "context": "query",
          "snippet": ".update(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 324,
          "context": "query",
          "snippet": ".update(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 482,
          "context": "query",
          "snippet": ".update(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 664,
          "context": "query",
          "snippet": ".update(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 953,
          "context": "query",
          "snippet": ".update(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1908,
          "context": "query",
          "snippet": ".update(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1988,
          "context": "query",
          "snippet": ".update(applePressRuns)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2077,
          "context": "query",
          "snippet": ".update(applePressRuns)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 50,
          "context": "schema",
          "snippet": "applePressRuns,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2726,
          "context": "schema",
          "snippet": "applePressRunId: applePressRuns.id,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2727,
          "context": "schema",
          "snippet": "applePressRunVolume: applePressRuns.totalJuiceVolumeL,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2739,
          "context": "schema",
          "snippet": "applePressRuns,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2741,
          "context": "schema",
          "snippet": "eq(applePressRuns.vesselId, vessels.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2742,
          "context": "query",
          "snippet": "isNull(applePressRuns.deletedAt),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 2743,
          "context": "schema",
          "snippet": "eq(applePressRuns.status, \"completed\"),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3179,
          "context": "import",
          "snippet": ".from(applePressRuns)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3182,
          "context": "schema",
          "snippet": "eq(applePressRuns.vesselId, input.vesselId),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3183,
          "context": "schema",
          "snippet": "eq(applePressRuns.status, \"completed\"),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3184,
          "context": "query",
          "snippet": "isNull(applePressRuns.deletedAt),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3223,
          "context": "query",
          "snippet": ".update(applePressRuns)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3228,
          "context": "schema",
          "snippet": ".where(eq(applePressRuns.id, pressRun.id));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3223,
          "context": "query",
          "snippet": ".update(applePressRuns)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 13,
          "context": "schema",
          "snippet": "applePressRuns,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 239,
          "context": "schema",
          "snippet": "startDate: sql`COALESCE(${applePressRuns.endTime}, ${batches.startDate})`,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 258,
          "context": "schema",
          "snippet": "sql<string>`COALESCE(${applePressRuns.endTime}, ${batches.startDate})`.as("
        },
        {
          "file": "src/routers/batch.ts",
          "line": 270,
          "context": "schema",
          "snippet": "applePressRuns,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 271,
          "context": "schema",
          "snippet": "eq(batches.originPressRunId, applePressRuns.id),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 476,
          "context": "schema",
          "snippet": "id: applePressRuns.id,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 477,
          "context": "schema",
          "snippet": "pressRunName: applePressRuns.pressRunName,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 478,
          "context": "schema",
          "snippet": "pressedDate: applePressRuns.startTime,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 479,
          "context": "schema",
          "snippet": "totalAppleWeightKg: applePressRuns.totalAppleWeightKg,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 480,
          "context": "schema",
          "snippet": "totalJuiceVolumeL: applePressRuns.totalJuiceVolumeL,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 481,
          "context": "schema",
          "snippet": "extractionRate: applePressRuns.extractionRate,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 483,
          "context": "import",
          "snippet": ".from(applePressRuns)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 484,
          "context": "schema",
          "snippet": ".where(eq(applePressRuns.id, batch.originPressRunId))"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 784,
          "context": "schema",
          "snippet": "pressRunName: applePressRuns.pressRunName,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 789,
          "context": "schema",
          "snippet": "applePressRuns,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 790,
          "context": "schema",
          "snippet": "eq(batches.originPressRunId, applePressRuns.id),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 909,
          "context": "schema",
          "snippet": "pressRunName: applePressRuns.pressRunName,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 913,
          "context": "schema",
          "snippet": "applePressRuns,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 914,
          "context": "schema",
          "snippet": "eq(batchMergeHistory.sourcePressRunId, applePressRuns.id),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 1077,
          "context": "schema",
          "snippet": "pressRunName: applePressRuns.pressRunName,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 1081,
          "context": "schema",
          "snippet": "applePressRuns,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 1082,
          "context": "schema",
          "snippet": "eq(batchMergeHistory.sourcePressRunId, applePressRuns.id),"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 10,
          "context": "schema",
          "snippet": "applePressRuns,"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 38,
          "context": "query",
          "snippet": "await db.delete(applePressRuns);"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 334,
          "context": "query",
          "snippet": ".insert(applePressRuns)"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 387,
          "context": "query",
          "snippet": ".insert(applePressRuns)"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 435,
          "context": "query",
          "snippet": ".insert(applePressRuns)"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 542,
          "context": "query",
          "snippet": ".insert(applePressRuns)"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 334,
          "context": "query",
          "snippet": ".insert(applePressRuns)"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 387,
          "context": "query",
          "snippet": ".insert(applePressRuns)"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 435,
          "context": "query",
          "snippet": ".insert(applePressRuns)"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 542,
          "context": "query",
          "snippet": ".insert(applePressRuns)"
        }
      ],
      "columns": []
    },
    {
      "name": "applePressRunLoads",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/pressRun.ts",
          "line": 6,
          "context": "schema",
          "snippet": "applePressRunLoads,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 258,
          "context": "schema",
          "snippet": "maxSequence: sql<number>`COALESCE(MAX(${applePressRunLoads.loadSequence}), 0)`,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 260,
          "context": "import",
          "snippet": ".from(applePressRunLoads)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 263,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.applePressRunId, input.pressRunId),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 264,
          "context": "query",
          "snippet": "isNull(applePressRunLoads.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 272,
          "context": "query",
          "snippet": ".insert(applePressRunLoads)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 309,
          "context": "query",
          "snippet": ".select({ appleWeightKg: applePressRunLoads.appleWeightKg })"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 310,
          "context": "import",
          "snippet": ".from(applePressRunLoads)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 313,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.applePressRunId, input.pressRunId),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 314,
          "context": "query",
          "snippet": "isNull(applePressRunLoads.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 373,
          "context": "schema",
          "snippet": "loadId: applePressRunLoads.id,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 374,
          "context": "schema",
          "snippet": "pressRunId: applePressRunLoads.applePressRunId,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 377,
          "context": "import",
          "snippet": ".from(applePressRunLoads)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 380,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.applePressRunId, applePressRuns.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 384,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.id, input.loadId),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 385,
          "context": "query",
          "snippet": "isNull(applePressRunLoads.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 444,
          "context": "query",
          "snippet": ".update(applePressRunLoads)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 459,
          "context": "schema",
          "snippet": ".where(eq(applePressRunLoads.id, input.loadId))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 464,
          "context": "query",
          "snippet": ".select({ appleWeightKg: applePressRunLoads.appleWeightKg })"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 465,
          "context": "import",
          "snippet": ".from(applePressRunLoads)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 469,
          "context": "schema",
          "snippet": "applePressRunLoads.applePressRunId,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 472,
          "context": "query",
          "snippet": "isNull(applePressRunLoads.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 588,
          "context": "query",
          "snippet": ".update(applePressRunLoads)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 600,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.id, load.loadId),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 601,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.applePressRunId, input.pressRunId),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 695,
          "context": "schema",
          "snippet": "id: applePressRunLoads.id,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 696,
          "context": "schema",
          "snippet": "purchaseItemId: applePressRunLoads.purchaseItemId,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 699,
          "context": "schema",
          "snippet": "fruitVarietyId: applePressRunLoads.fruitVarietyId,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 701,
          "context": "schema",
          "snippet": "appleWeightKg: applePressRunLoads.appleWeightKg,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 702,
          "context": "schema",
          "snippet": "juiceVolumeL: applePressRunLoads.juiceVolumeL,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 703,
          "context": "schema",
          "snippet": "brixMeasured: applePressRunLoads.brixMeasured,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 706,
          "context": "import",
          "snippet": ".from(applePressRunLoads)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 709,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.purchaseItemId, basefruitPurchaseItems.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 718,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.fruitVarietyId, baseFruitVarieties.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 722,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.applePressRunId, input.pressRunId),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 723,
          "context": "query",
          "snippet": "isNull(applePressRunLoads.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 902,
          "context": "query",
          "snippet": ".select({ juiceVolumeL: applePressRunLoads.juiceVolumeL })"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 903,
          "context": "import",
          "snippet": ".from(applePressRunLoads)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 906,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.applePressRunId, input.pressRunId),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 907,
          "context": "query",
          "snippet": "isNull(applePressRunLoads.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1099,
          "context": "schema",
          "snippet": "id: applePressRunLoads.id,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1100,
          "context": "schema",
          "snippet": "purchaseItemId: applePressRunLoads.purchaseItemId,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1101,
          "context": "schema",
          "snippet": "fruitVarietyId: applePressRunLoads.fruitVarietyId,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1103,
          "context": "schema",
          "snippet": "appleWeightKg: applePressRunLoads.appleWeightKg,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1104,
          "context": "schema",
          "snippet": "brixMeasured: applePressRunLoads.brixMeasured,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1108,
          "context": "import",
          "snippet": ".from(applePressRunLoads)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1111,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.purchaseItemId, basefruitPurchaseItems.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1120,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.fruitVarietyId, baseFruitVarieties.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1124,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.applePressRunId, input.pressRunId),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1125,
          "context": "query",
          "snippet": "isNull(applePressRunLoads.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1586,
          "context": "schema",
          "snippet": "pressRunId: applePressRunLoads.applePressRunId,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1589,
          "context": "import",
          "snippet": ".from(applePressRunLoads)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1592,
          "context": "schema",
          "snippet": "inArray(applePressRunLoads.applePressRunId, pressRunIds),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1593,
          "context": "query",
          "snippet": "isNull(applePressRunLoads.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1596,
          "context": "schema",
          "snippet": ".groupBy(applePressRunLoads.applePressRunId);"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1609,
          "context": "schema",
          "snippet": "pressRunId: applePressRunLoads.applePressRunId,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1612,
          "context": "import",
          "snippet": ".from(applePressRunLoads)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1615,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.fruitVarietyId, baseFruitVarieties.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1619,
          "context": "schema",
          "snippet": "inArray(applePressRunLoads.applePressRunId, pressRunIds),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1620,
          "context": "query",
          "snippet": "isNull(applePressRunLoads.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1624,
          "context": "schema",
          "snippet": "applePressRunLoads.applePressRunId,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1731,
          "context": "schema",
          "snippet": "id: applePressRunLoads.id,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1732,
          "context": "schema",
          "snippet": "purchaseItemId: applePressRunLoads.purchaseItemId,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1733,
          "context": "schema",
          "snippet": "fruitVarietyId: applePressRunLoads.fruitVarietyId,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1737,
          "context": "schema",
          "snippet": "loadSequence: applePressRunLoads.loadSequence,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1738,
          "context": "schema",
          "snippet": "appleWeightKg: applePressRunLoads.appleWeightKg,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1739,
          "context": "schema",
          "snippet": "originalWeight: applePressRunLoads.originalWeight,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1740,
          "context": "schema",
          "snippet": "originalWeightUnit: applePressRunLoads.originalWeightUnit,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1741,
          "context": "schema",
          "snippet": "juiceVolumeL: applePressRunLoads.juiceVolumeL,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1742,
          "context": "schema",
          "snippet": "originalVolume: applePressRunLoads.originalVolume,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1743,
          "context": "schema",
          "snippet": "originalVolumeUnit: applePressRunLoads.originalVolumeUnit,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1744,
          "context": "schema",
          "snippet": "brixMeasured: applePressRunLoads.brixMeasured,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1745,
          "context": "schema",
          "snippet": "phMeasured: applePressRunLoads.phMeasured,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1746,
          "context": "schema",
          "snippet": "appleCondition: applePressRunLoads.appleCondition,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1747,
          "context": "schema",
          "snippet": "defectPercentage: applePressRunLoads.defectPercentage,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1748,
          "context": "schema",
          "snippet": "notes: applePressRunLoads.notes,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1749,
          "context": "schema",
          "snippet": "pressedAt: applePressRunLoads.pressedAt,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1750,
          "context": "schema",
          "snippet": "createdAt: applePressRunLoads.createdAt,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1756,
          "context": "import",
          "snippet": ".from(applePressRunLoads)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1759,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.fruitVarietyId, baseFruitVarieties.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1763,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.purchaseItemId, basefruitPurchaseItems.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1772,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.applePressRunId, input.id),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1773,
          "context": "query",
          "snippet": "isNull(applePressRunLoads.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 1776,
          "context": "schema",
          "snippet": ".orderBy(asc(applePressRunLoads.loadSequence));"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2087,
          "context": "query",
          "snippet": ".update(applePressRunLoads)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2093,
          "context": "schema",
          "snippet": ".where(eq(applePressRunLoads.applePressRunId, input.id));"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2129,
          "context": "schema",
          "snippet": "id: applePressRunLoads.id,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2130,
          "context": "schema",
          "snippet": "applePressRunId: applePressRunLoads.applePressRunId,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2131,
          "context": "schema",
          "snippet": "loadSequence: applePressRunLoads.loadSequence,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2133,
          "context": "import",
          "snippet": ".from(applePressRunLoads)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2136,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.id, input.loadId),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2137,
          "context": "query",
          "snippet": "isNull(applePressRunLoads.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2170,
          "context": "query",
          "snippet": ".update(applePressRunLoads)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2175,
          "context": "schema",
          "snippet": ".where(eq(applePressRunLoads.id, input.loadId))"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2181,
          "context": "schema",
          "snippet": "id: applePressRunLoads.id,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2182,
          "context": "schema",
          "snippet": "loadSequence: applePressRunLoads.loadSequence,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2184,
          "context": "import",
          "snippet": ".from(applePressRunLoads)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2187,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.applePressRunId, load[0].applePressRunId),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2188,
          "context": "query",
          "snippet": "isNull(applePressRunLoads.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2191,
          "context": "schema",
          "snippet": ".orderBy(asc(applePressRunLoads.loadSequence));"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2198,
          "context": "query",
          "snippet": ".update(applePressRunLoads)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2203,
          "context": "schema",
          "snippet": ".where(eq(applePressRunLoads.id, remainingLoads[i].id));"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2324,
          "context": "schema",
          "snippet": "purchaseItemId: applePressRunLoads.purchaseItemId,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2325,
          "context": "schema",
          "snippet": "allocatedKg: sql<number>`COALESCE(SUM(CAST(${applePressRunLoads.appleWeightKg} AS NUMERIC)), 0)`,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2327,
          "context": "import",
          "snippet": ".from(applePressRunLoads)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2330,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.applePressRunId, input.pressRunId),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2331,
          "context": "query",
          "snippet": "isNull(applePressRunLoads.deletedAt),"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2333,
          "context": "schema",
          "snippet": "applePressRunLoads.purchaseItemId,"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2338,
          "context": "schema",
          "snippet": ".groupBy(applePressRunLoads.purchaseItemId);"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 272,
          "context": "query",
          "snippet": ".insert(applePressRunLoads)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 444,
          "context": "query",
          "snippet": ".update(applePressRunLoads)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 588,
          "context": "query",
          "snippet": ".update(applePressRunLoads)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2087,
          "context": "query",
          "snippet": ".update(applePressRunLoads)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2170,
          "context": "query",
          "snippet": ".update(applePressRunLoads)"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 2198,
          "context": "query",
          "snippet": ".update(applePressRunLoads)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 51,
          "context": "schema",
          "snippet": "applePressRunLoads,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1315,
          "context": "schema",
          "snippet": "consumedKg: sql<string>`COALESCE(SUM(${applePressRunLoads.appleWeightKg}), 0)`,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1328,
          "context": "schema",
          "snippet": "applePressRunLoads,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1329,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.purchaseItemId, basefruitPurchaseItems.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1384,
          "context": "schema",
          "snippet": "applePressRunLoads,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1385,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.purchaseItemId, basefruitPurchaseItems.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1430,
          "context": "schema",
          "snippet": "consumedKg: sql<string>`COALESCE(SUM(${applePressRunLoads.appleWeightKg}), 0)`,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1445,
          "context": "schema",
          "snippet": "applePressRunLoads,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 1446,
          "context": "schema",
          "snippet": "eq(applePressRunLoads.purchaseItemId, basefruitPurchaseItems.id),"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 9,
          "context": "schema",
          "snippet": "applePressRunLoads,"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 37,
          "context": "query",
          "snippet": "await db.delete(applePressRunLoads);"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 350,
          "context": "query",
          "snippet": "await db.insert(applePressRunLoads).values({"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 403,
          "context": "query",
          "snippet": "await db.insert(applePressRunLoads).values({"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 451,
          "context": "query",
          "snippet": "await db.insert(applePressRunLoads).values(["
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 557,
          "context": "query",
          "snippet": "await db.insert(applePressRunLoads).values({"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 350,
          "context": "query",
          "snippet": "await db.insert(applePressRunLoads).values({"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 403,
          "context": "query",
          "snippet": "await db.insert(applePressRunLoads).values({"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 451,
          "context": "query",
          "snippet": "await db.insert(applePressRunLoads).values(["
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 557,
          "context": "query",
          "snippet": "await db.insert(applePressRunLoads).values({"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 350,
          "context": "query",
          "snippet": "await db.insert(applePressRunLoads).values({"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 403,
          "context": "query",
          "snippet": "await db.insert(applePressRunLoads).values({"
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 451,
          "context": "query",
          "snippet": "await db.insert(applePressRunLoads).values(["
        },
        {
          "file": "src/routers/__tests__/purchase-line-integration.test.ts",
          "line": 557,
          "context": "query",
          "snippet": "await db.insert(applePressRunLoads).values({"
        }
      ],
      "columns": []
    },
    {
      "name": "auditLog",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/services/inventory.ts",
          "line": 9,
          "context": "schema",
          "snippet": "auditLog,"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 72,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 72,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/services/inventory.ts",
          "line": 72,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 8,
          "context": "schema",
          "snippet": "auditLog,"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 252,
          "context": "query",
          "snippet": "await tx.insert(auditLog).values({"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 299,
          "context": "query",
          "snippet": "await tx.insert(auditLog).values({"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 381,
          "context": "query",
          "snippet": "await tx.insert(auditLog).values({"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 252,
          "context": "query",
          "snippet": "await tx.insert(auditLog).values({"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 299,
          "context": "query",
          "snippet": "await tx.insert(auditLog).values({"
        },
        {
          "file": "src/routers/vendorVariety.ts",
          "line": 381,
          "context": "query",
          "snippet": "await tx.insert(auditLog).values({"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 6,
          "context": "schema",
          "snippet": "auditLog,"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 36,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 36,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/vendor.ts",
          "line": 36,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/varieties.ts",
          "line": 3,
          "context": "import",
          "snippet": "import { db, appleVarieties, auditLog } from \"db\";"
        },
        {
          "file": "src/routers/pressRun.ts",
          "line": 12,
          "context": "schema",
          "snippet": "auditLog,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 10,
          "context": "schema",
          "snippet": "auditLog,"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 575,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 614,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 651,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 684,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 750,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 575,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 614,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 651,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 684,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 750,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 575,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 614,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 651,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 684,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/inventory.ts",
          "line": 750,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/index.ts",
          "line": 49,
          "context": "schema",
          "snippet": "auditLog,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 152,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/index.ts",
          "line": 201,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/index.ts",
          "line": 268,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/index.ts",
          "line": 152,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/index.ts",
          "line": 201,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/index.ts",
          "line": 268,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/index.ts",
          "line": 152,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/index.ts",
          "line": 201,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        },
        {
          "file": "src/routers/index.ts",
          "line": 268,
          "context": "query",
          "snippet": "await db.insert(auditLog).values({"
        }
      ],
      "columns": []
    },
    {
      "name": "batchTransfers",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/index.ts",
          "line": 43,
          "context": "schema",
          "snippet": "batchTransfers,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3016,
          "context": "schema",
          "snippet": "// Record the transfer in batchTransfers table"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3018,
          "context": "query",
          "snippet": ".insert(batchTransfers)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3066,
          "context": "query",
          "snippet": "let whereClause = and(isNull(batchTransfers.deletedAt));"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3072,
          "context": "schema",
          "snippet": "eq(batchTransfers.sourceVesselId, input.vesselId),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3073,
          "context": "schema",
          "snippet": "eq(batchTransfers.destinationVesselId, input.vesselId),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3082,
          "context": "schema",
          "snippet": "eq(batchTransfers.sourceBatchId, input.batchId),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3083,
          "context": "schema",
          "snippet": "eq(batchTransfers.destinationBatchId, input.batchId),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3084,
          "context": "schema",
          "snippet": "eq(batchTransfers.remainingBatchId, input.batchId),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3099,
          "context": "schema",
          "snippet": "id: batchTransfers.id,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3100,
          "context": "schema",
          "snippet": "sourceBatchId: batchTransfers.sourceBatchId,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3101,
          "context": "schema",
          "snippet": "sourceVesselId: batchTransfers.sourceVesselId,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3103,
          "context": "schema",
          "snippet": "destinationBatchId: batchTransfers.destinationBatchId,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3104,
          "context": "schema",
          "snippet": "destinationVesselId: batchTransfers.destinationVesselId,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3106,
          "context": "schema",
          "snippet": "remainingBatchId: batchTransfers.remainingBatchId,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3107,
          "context": "schema",
          "snippet": "volumeTransferredL: batchTransfers.volumeTransferredL,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3108,
          "context": "schema",
          "snippet": "lossL: batchTransfers.lossL,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3109,
          "context": "schema",
          "snippet": "totalVolumeProcessedL: batchTransfers.totalVolumeProcessedL,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3110,
          "context": "schema",
          "snippet": "remainingVolumeL: batchTransfers.remainingVolumeL,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3111,
          "context": "schema",
          "snippet": "notes: batchTransfers.notes,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3112,
          "context": "schema",
          "snippet": "transferredAt: batchTransfers.transferredAt,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3113,
          "context": "schema",
          "snippet": "transferredBy: batchTransfers.transferredBy,"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3119,
          "context": "import",
          "snippet": ".from(batchTransfers)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3120,
          "context": "schema",
          "snippet": ".leftJoin(sv, eq(batchTransfers.sourceVesselId, sv.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3121,
          "context": "schema",
          "snippet": ".leftJoin(dv, eq(batchTransfers.destinationVesselId, dv.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3122,
          "context": "schema",
          "snippet": ".leftJoin(u, eq(batchTransfers.transferredBy, u.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3123,
          "context": "schema",
          "snippet": ".leftJoin(sb, eq(batchTransfers.sourceBatchId, sb.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3126,
          "context": "schema",
          "snippet": "eq(batchTransfers.destinationBatchId, db_alias.id),"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3128,
          "context": "schema",
          "snippet": ".leftJoin(rb, eq(batchTransfers.remainingBatchId, rb.id))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3130,
          "context": "schema",
          "snippet": ".orderBy(desc(batchTransfers.transferredAt))"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3136,
          "context": "import",
          "snippet": ".from(batchTransfers)"
        },
        {
          "file": "src/routers/index.ts",
          "line": 3018,
          "context": "query",
          "snippet": ".insert(batchTransfers)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 17,
          "context": "schema",
          "snippet": "batchTransfers,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 940,
          "context": "schema",
          "snippet": "id: batchTransfers.id,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 941,
          "context": "schema",
          "snippet": "transferredAt: batchTransfers.transferredAt,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 942,
          "context": "schema",
          "snippet": "volumeTransferredL: batchTransfers.volumeTransferredL,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 943,
          "context": "schema",
          "snippet": "sourceBatchId: batchTransfers.sourceBatchId,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 944,
          "context": "schema",
          "snippet": "destinationBatchId: batchTransfers.destinationBatchId,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 953,
          "context": "schema",
          "snippet": "notes: batchTransfers.notes,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 955,
          "context": "import",
          "snippet": ".from(batchTransfers)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 958,
          "context": "schema",
          "snippet": "sql`source_batch.id = ${batchTransfers.sourceBatchId}`,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 962,
          "context": "schema",
          "snippet": "sql`dest_batch.id = ${batchTransfers.destinationBatchId}`,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 966,
          "context": "schema",
          "snippet": "sql`source_vessel.id = ${batchTransfers.sourceVesselId}`,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 970,
          "context": "schema",
          "snippet": "sql`dest_vessel.id = ${batchTransfers.destinationVesselId}`,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 975,
          "context": "schema",
          "snippet": "eq(batchTransfers.sourceBatchId, input.batchId),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 976,
          "context": "schema",
          "snippet": "eq(batchTransfers.destinationBatchId, input.batchId),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 978,
          "context": "query",
          "snippet": "isNull(batchTransfers.deletedAt),"
        }
      ],
      "columns": []
    },
    {
      "name": "batchMergeHistory",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [
        {
          "file": "src/routers/batch.ts",
          "line": 16,
          "context": "schema",
          "snippet": "batchMergeHistory,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 902,
          "context": "schema",
          "snippet": "id: batchMergeHistory.id,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 903,
          "context": "schema",
          "snippet": "mergedAt: batchMergeHistory.mergedAt,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 904,
          "context": "schema",
          "snippet": "volumeAddedL: batchMergeHistory.volumeAddedL,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 905,
          "context": "schema",
          "snippet": "targetVolumeBeforeL: batchMergeHistory.targetVolumeBeforeL,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 906,
          "context": "schema",
          "snippet": "targetVolumeAfterL: batchMergeHistory.targetVolumeAfterL,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 907,
          "context": "schema",
          "snippet": "sourceType: batchMergeHistory.sourceType,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 908,
          "context": "schema",
          "snippet": "notes: batchMergeHistory.notes,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 911,
          "context": "import",
          "snippet": ".from(batchMergeHistory)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 914,
          "context": "schema",
          "snippet": "eq(batchMergeHistory.sourcePressRunId, applePressRuns.id),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 918,
          "context": "schema",
          "snippet": "eq(batchMergeHistory.targetBatchId, input.batchId),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 919,
          "context": "query",
          "snippet": "isNull(batchMergeHistory.deletedAt),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 1068,
          "context": "schema",
          "snippet": "id: batchMergeHistory.id,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 1069,
          "context": "schema",
          "snippet": "sourcePressRunId: batchMergeHistory.sourcePressRunId,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 1070,
          "context": "schema",
          "snippet": "sourceType: batchMergeHistory.sourceType,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 1071,
          "context": "schema",
          "snippet": "volumeAddedL: batchMergeHistory.volumeAddedL,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 1072,
          "context": "schema",
          "snippet": "targetVolumeBeforeL: batchMergeHistory.targetVolumeBeforeL,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 1073,
          "context": "schema",
          "snippet": "targetVolumeAfterL: batchMergeHistory.targetVolumeAfterL,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 1074,
          "context": "schema",
          "snippet": "compositionSnapshot: batchMergeHistory.compositionSnapshot,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 1075,
          "context": "schema",
          "snippet": "notes: batchMergeHistory.notes,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 1076,
          "context": "schema",
          "snippet": "mergedAt: batchMergeHistory.mergedAt,"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 1079,
          "context": "import",
          "snippet": ".from(batchMergeHistory)"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 1082,
          "context": "schema",
          "snippet": "eq(batchMergeHistory.sourcePressRunId, applePressRuns.id),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 1086,
          "context": "schema",
          "snippet": "eq(batchMergeHistory.targetBatchId, input.batchId),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 1087,
          "context": "query",
          "snippet": "isNull(batchMergeHistory.deletedAt),"
        },
        {
          "file": "src/routers/batch.ts",
          "line": 1090,
          "context": "schema",
          "snippet": ".orderBy(desc(batchMergeHistory.mergedAt));"
        }
      ],
      "columns": []
    },
    {
      "name": "vendorsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "baseFruitVarietiesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "vendorVarietiesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "additiveVarietiesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "vendorAdditiveVarietiesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "juiceVarietiesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "vendorJuiceVarietiesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "packagingVarietiesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "vendorPackagingVarietiesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "basefruitPurchasesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "basefruitPurchaseItemsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "additivePurchasesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "additivePurchaseItemsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "juicePurchasesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "juicePurchaseItemsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "packagingPurchasesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "packagingPurchaseItemsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "pressRunsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "juiceLotsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "pressItemsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "vesselsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "batchesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "batchMergeHistoryRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "batchCompositionsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "batchMeasurementsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "batchAdditivesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "packagesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "inventoryRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "inventoryTransactionsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "batchCostsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "cogsItemsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "applePressRunsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "applePressRunLoadsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "tankMeasurements",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [],
      "columns": []
    },
    {
      "name": "tankAdditives",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [],
      "columns": []
    },
    {
      "name": "tankMeasurementsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "tankAdditivesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "batchTransfersRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    }
  ],
  "unusedEntities": [
    {
      "name": "unitEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "kg",
        "lb",
        "L",
        "gal",
        "bushel"
      ]
    },
    {
      "name": "batchStatusEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "planned",
        "active",
        "packaged"
      ]
    },
    {
      "name": "vesselStatusEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "available",
        "in_use",
        "cleaning",
        "maintenance",
        "empty",
        "fermenting",
        "storing",
        "aging"
      ]
    },
    {
      "name": "vesselTypeEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "fermenter",
        "conditioning_tank",
        "bright_tank",
        "storage"
      ]
    },
    {
      "name": "vesselMaterialEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "stainless_steel",
        "plastic"
      ]
    },
    {
      "name": "vesselJacketedEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "yes",
        "no"
      ]
    },
    {
      "name": "transactionTypeEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "purchase",
        "transfer",
        "adjustment",
        "sale",
        "waste"
      ]
    },
    {
      "name": "cogsItemTypeEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "apple_cost",
        "labor",
        "overhead",
        "packaging"
      ]
    },
    {
      "name": "userRoleEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "admin",
        "operator"
      ]
    },
    {
      "name": "pressRunStatusEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "draft",
        "in_progress",
        "completed",
        "cancelled"
      ]
    },
    {
      "name": "fruitTypeEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "apple",
        "pear",
        "plum"
      ]
    },
    {
      "name": "ciderCategoryEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "sweet",
        "bittersweet",
        "sharp",
        "bittersharp"
      ]
    },
    {
      "name": "intensityEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "high",
        "medium-high",
        "medium",
        "low-medium",
        "low"
      ]
    },
    {
      "name": "harvestWindowEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "Late",
        "Mid-Late",
        "Mid",
        "Early-Mid",
        "Early"
      ]
    },
    {
      "name": "packagingItemTypeEnum",
      "type": "enum",
      "file": "src/schema.ts",
      "usages": [],
      "enumValues": [
        "Primary Packaging",
        "Closures",
        "Secondary Packaging",
        "Tertiary Packaging"
      ]
    },
    {
      "name": "juiceLots",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [],
      "columns": []
    },
    {
      "name": "vendorsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "baseFruitVarietiesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "vendorVarietiesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "additiveVarietiesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "vendorAdditiveVarietiesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "juiceVarietiesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "vendorJuiceVarietiesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "packagingVarietiesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "vendorPackagingVarietiesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "basefruitPurchasesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "basefruitPurchaseItemsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "additivePurchasesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "additivePurchaseItemsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "juicePurchasesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "juicePurchaseItemsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "packagingPurchasesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "packagingPurchaseItemsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "pressRunsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "juiceLotsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "pressItemsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "vesselsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "batchesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "batchMergeHistoryRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "batchCompositionsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "batchMeasurementsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "batchAdditivesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "packagesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "inventoryRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "inventoryTransactionsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "batchCostsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "cogsItemsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "applePressRunsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "applePressRunLoadsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "tankMeasurements",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [],
      "columns": []
    },
    {
      "name": "tankAdditives",
      "type": "table",
      "file": "src/schema.ts",
      "usages": [],
      "columns": []
    },
    {
      "name": "tankMeasurementsRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "tankAdditivesRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    },
    {
      "name": "batchTransfersRelations",
      "type": "relation",
      "file": "src/schema.ts",
      "usages": []
    }
  ],
  "potentiallyUnused": [],
  "orphanedQueries": [
    "packaging-optimized.ts:withCursorPagination",
    "packaging-optimized.ts:generateCursor",
    "packaging-optimized.ts:clearPackageSizesCache"
  ],
  "schemaCodeDrift": [
    {
      "entity": "unitEnum",
      "issue": "unused_enum",
      "description": "Enum unitEnum is defined but never used",
      "severity": "high"
    },
    {
      "entity": "batchStatusEnum",
      "issue": "unused_enum",
      "description": "Enum batchStatusEnum is defined but never used",
      "severity": "high"
    },
    {
      "entity": "vesselStatusEnum",
      "issue": "unused_enum",
      "description": "Enum vesselStatusEnum is defined but never used",
      "severity": "high"
    },
    {
      "entity": "vesselTypeEnum",
      "issue": "unused_enum",
      "description": "Enum vesselTypeEnum is defined but never used",
      "severity": "high"
    },
    {
      "entity": "vesselMaterialEnum",
      "issue": "unused_enum",
      "description": "Enum vesselMaterialEnum is defined but never used",
      "severity": "high"
    },
    {
      "entity": "vesselJacketedEnum",
      "issue": "unused_enum",
      "description": "Enum vesselJacketedEnum is defined but never used",
      "severity": "high"
    },
    {
      "entity": "transactionTypeEnum",
      "issue": "unused_enum",
      "description": "Enum transactionTypeEnum is defined but never used",
      "severity": "high"
    },
    {
      "entity": "cogsItemTypeEnum",
      "issue": "unused_enum",
      "description": "Enum cogsItemTypeEnum is defined but never used",
      "severity": "high"
    },
    {
      "entity": "userRoleEnum",
      "issue": "unused_enum",
      "description": "Enum userRoleEnum is defined but never used",
      "severity": "high"
    },
    {
      "entity": "pressRunStatusEnum",
      "issue": "unused_enum",
      "description": "Enum pressRunStatusEnum is defined but never used",
      "severity": "high"
    },
    {
      "entity": "fruitTypeEnum",
      "issue": "unused_enum",
      "description": "Enum fruitTypeEnum is defined but never used",
      "severity": "high"
    },
    {
      "entity": "ciderCategoryEnum",
      "issue": "unused_enum",
      "description": "Enum ciderCategoryEnum is defined but never used",
      "severity": "high"
    },
    {
      "entity": "intensityEnum",
      "issue": "unused_enum",
      "description": "Enum intensityEnum is defined but never used",
      "severity": "high"
    },
    {
      "entity": "harvestWindowEnum",
      "issue": "unused_enum",
      "description": "Enum harvestWindowEnum is defined but never used",
      "severity": "high"
    },
    {
      "entity": "packagingItemTypeEnum",
      "issue": "unused_enum",
      "description": "Enum packagingItemTypeEnum is defined but never used",
      "severity": "high"
    },
    {
      "entity": "juiceLots",
      "issue": "no_queries",
      "description": "Table juiceLots is defined but has no query usages",
      "severity": "medium"
    },
    {
      "entity": "vendorsRelations",
      "issue": "unused_relation",
      "description": "Relation vendorsRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "baseFruitVarietiesRelations",
      "issue": "unused_relation",
      "description": "Relation baseFruitVarietiesRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "vendorVarietiesRelations",
      "issue": "unused_relation",
      "description": "Relation vendorVarietiesRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "additiveVarietiesRelations",
      "issue": "unused_relation",
      "description": "Relation additiveVarietiesRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "vendorAdditiveVarietiesRelations",
      "issue": "unused_relation",
      "description": "Relation vendorAdditiveVarietiesRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "juiceVarietiesRelations",
      "issue": "unused_relation",
      "description": "Relation juiceVarietiesRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "vendorJuiceVarietiesRelations",
      "issue": "unused_relation",
      "description": "Relation vendorJuiceVarietiesRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "packagingVarietiesRelations",
      "issue": "unused_relation",
      "description": "Relation packagingVarietiesRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "vendorPackagingVarietiesRelations",
      "issue": "unused_relation",
      "description": "Relation vendorPackagingVarietiesRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "basefruitPurchasesRelations",
      "issue": "unused_relation",
      "description": "Relation basefruitPurchasesRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "basefruitPurchaseItemsRelations",
      "issue": "unused_relation",
      "description": "Relation basefruitPurchaseItemsRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "additivePurchasesRelations",
      "issue": "unused_relation",
      "description": "Relation additivePurchasesRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "additivePurchaseItemsRelations",
      "issue": "unused_relation",
      "description": "Relation additivePurchaseItemsRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "juicePurchasesRelations",
      "issue": "unused_relation",
      "description": "Relation juicePurchasesRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "juicePurchaseItemsRelations",
      "issue": "unused_relation",
      "description": "Relation juicePurchaseItemsRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "packagingPurchasesRelations",
      "issue": "unused_relation",
      "description": "Relation packagingPurchasesRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "packagingPurchaseItemsRelations",
      "issue": "unused_relation",
      "description": "Relation packagingPurchaseItemsRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "pressRunsRelations",
      "issue": "unused_relation",
      "description": "Relation pressRunsRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "juiceLotsRelations",
      "issue": "unused_relation",
      "description": "Relation juiceLotsRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "pressItemsRelations",
      "issue": "unused_relation",
      "description": "Relation pressItemsRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "vesselsRelations",
      "issue": "unused_relation",
      "description": "Relation vesselsRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "batchesRelations",
      "issue": "unused_relation",
      "description": "Relation batchesRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "batchMergeHistoryRelations",
      "issue": "unused_relation",
      "description": "Relation batchMergeHistoryRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "batchCompositionsRelations",
      "issue": "unused_relation",
      "description": "Relation batchCompositionsRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "batchMeasurementsRelations",
      "issue": "unused_relation",
      "description": "Relation batchMeasurementsRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "batchAdditivesRelations",
      "issue": "unused_relation",
      "description": "Relation batchAdditivesRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "packagesRelations",
      "issue": "unused_relation",
      "description": "Relation packagesRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "inventoryRelations",
      "issue": "unused_relation",
      "description": "Relation inventoryRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "inventoryTransactionsRelations",
      "issue": "unused_relation",
      "description": "Relation inventoryTransactionsRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "batchCostsRelations",
      "issue": "unused_relation",
      "description": "Relation batchCostsRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "cogsItemsRelations",
      "issue": "unused_relation",
      "description": "Relation cogsItemsRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "applePressRunsRelations",
      "issue": "unused_relation",
      "description": "Relation applePressRunsRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "applePressRunLoadsRelations",
      "issue": "unused_relation",
      "description": "Relation applePressRunLoadsRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "tankMeasurements",
      "issue": "no_queries",
      "description": "Table tankMeasurements is defined but has no query usages",
      "severity": "medium"
    },
    {
      "entity": "tankAdditives",
      "issue": "no_queries",
      "description": "Table tankAdditives is defined but has no query usages",
      "severity": "medium"
    },
    {
      "entity": "tankMeasurementsRelations",
      "issue": "unused_relation",
      "description": "Relation tankMeasurementsRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "tankAdditivesRelations",
      "issue": "unused_relation",
      "description": "Relation tankAdditivesRelations is defined but never used",
      "severity": "low"
    },
    {
      "entity": "batchTransfersRelations",
      "issue": "unused_relation",
      "description": "Relation batchTransfersRelations is defined but never used",
      "severity": "low"
    }
  ],
  "analysisDate": "2025-09-29T01:46:58.043Z",
  "errors": []
}